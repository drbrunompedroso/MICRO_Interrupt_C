

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Thu Aug 03 15:01:19 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=3
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    36                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    37                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    38                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    39                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    40                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    41   000000                     
    42                           ; Generated 23/03/2023 GMT
    43                           ; 
    44                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution. Publication is not required when
    58                           ;        this file is used in an embedded application.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC18F4520 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76   000000                     _PORTDbits	set	3971
    77   000000                     _INTCON3bits	set	4080
    78   000000                     _INTCONbits	set	4082
    79   000000                     _PORTB	set	3969
    80   000000                     _TRISB	set	3987
    81   000000                     _OSCTUNE	set	3995
    82   000000                     _OSCCON	set	4051
    83   000000                     _INTCON3	set	4080
    84   000000                     _INTCON2	set	4081
    85   000000                     _INTCON	set	4082
    86   000000                     _ADCON1	set	4033
    87   000000                     _TRISEbits	set	3990
    88   000000                     _TRISD	set	3989
    89   000000                     _TRISC	set	3988
    90   000000                     _PORTEbits	set	3972
    91   000000                     _PORTD	set	3971
    92   000000                     _PORTC	set	3970
    93                           
    94                           	psect	smallconst
    95   000600                     __psmallconst:
    96                           	callstack 0
    97   000600  00                 	db	0
    98   000601                     STR_4:
    99   000601  20                 	db	32
   100   000602  20                 	db	32
   101   000603  20                 	db	32
   102   000604  20                 	db	32
   103   000605  20                 	db	32
   104   000606  20                 	db	32
   105   000607  20                 	db	32
   106   000608  20                 	db	32
   107   000609  20                 	db	32
   108   00060A  20                 	db	32
   109   00060B  20                 	db	32
   110   00060C  20                 	db	32
   111   00060D  20                 	db	32
   112   00060E  20                 	db	32
   113   00060F  20                 	db	32
   114   000610  00                 	db	0
   115   000611                     STR_1:
   116   000611  49                 	db	73	;'I'
   117   000612  4E                 	db	78	;'N'
   118   000613  54                 	db	84	;'T'
   119   000614  20                 	db	32
   120   000615  45                 	db	69	;'E'
   121   000616  58                 	db	88	;'X'
   122   000617  54                 	db	84	;'T'
   123   000618  45                 	db	69	;'E'
   124   000619  52                 	db	82	;'R'
   125   00061A  4E                 	db	78	;'N'
   126   00061B  41                 	db	65	;'A'
   127   00061C  00                 	db	0
   128   00061D                     STR_2:
   129   00061D  43                 	db	67	;'C'
   130   00061E  6F                 	db	111	;'o'
   131   00061F  75                 	db	117	;'u'
   132   000620  6E                 	db	110	;'n'
   133   000621  74                 	db	116	;'t'
   134   000622  65                 	db	101	;'e'
   135   000623  72                 	db	114	;'r'
   136   000624  3A                 	db	58	;':'
   137   000625  00                 	db	0
   138   000626                     STR_3:
   139   000626  25                 	db	37
   140   000627  30                 	db	48	;'0'
   141   000628  31                 	db	49	;'1'
   142   000629  64                 	db	100	;'d'
   143   00062A  20                 	db	32
   144   00062B  00                 	db	0
   145   00062C  00                 	db	0	; dummy byte at the end
   146   000000                     
   147                           ; #config settings
   148                           
   149                           	psect	cinit
   150   001684                     __pcinit:
   151                           	callstack 0
   152   001684                     start_initialization:
   153                           	callstack 0
   154   001684                     __initialization:
   155                           	callstack 0
   156                           
   157                           ; Clear objects allocated to BANK0 (48 bytes)
   158   001684  EE00  F080         	lfsr	0,__pbssBANK0
   159   001688  0E30               	movlw	48
   160   00168A                     clear_0:
   161   00168A  6AEE               	clrf	postinc0,c
   162   00168C  06E8               	decf	wreg,f,c
   163   00168E  E1FD               	bnz	clear_0
   164                           
   165                           ; Clear objects allocated to COMRAM (7 bytes)
   166   001690  EE00  F073         	lfsr	0,__pbssCOMRAM
   167   001694  0E07               	movlw	7
   168   001696                     clear_1:
   169   001696  6AEE               	clrf	postinc0,c
   170   001698  06E8               	decf	wreg,f,c
   171   00169A  E1FD               	bnz	clear_1
   172   00169C                     end_of_initialization:
   173                           	callstack 0
   174   00169C                     __end_of__initialization:
   175                           	callstack 0
   176   00169C  907A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   177   00169E  927A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   178   0016A0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   179   0016A2  6EF8               	movwf	tblptru,c
   180   0016A4  0100               	movlb	0
   181   0016A6  EF38  F00A         	goto	_main	;jump to C main() function
   182                           
   183                           	psect	bssCOMRAM
   184   000073                     __pbssCOMRAM:
   185                           	callstack 0
   186   000073                     _width:
   187                           	callstack 0
   188   000073                     	ds	2
   189   000075                     _prec:
   190                           	callstack 0
   191   000075                     	ds	2
   192   000077                     _counter:
   193                           	callstack 0
   194   000077                     	ds	2
   195   000079                     _flags:
   196                           	callstack 0
   197   000079                     	ds	1
   198                           
   199                           	psect	bssBANK0
   200   000080                     __pbssBANK0:
   201                           	callstack 0
   202   000080                     _dbuf:
   203                           	callstack 0
   204   000080                     	ds	32
   205   0000A0                     _BufferLCD:
   206                           	callstack 0
   207   0000A0                     	ds	16
   208                           
   209                           	psect	cstackCOMRAM
   210   000001                     __pcstackCOMRAM:
   211                           	callstack 0
   212   000001                     ??_Ext_Counter:
   213   000001                     
   214                           ; 1 bytes @ 0x0
   215   000001                     	ds	2
   216   000003                     ?_isdigit:
   217                           	callstack 0
   218   000003                     ?_isspace:
   219                           	callstack 0
   220   000003                     ?___wmul:
   221                           	callstack 0
   222   000003                     ?___aodiv:
   223                           	callstack 0
   224   000003                     ?___aomod:
   225                           	callstack 0
   226   000003                     set_bit@comp:
   227                           	callstack 0
   228   000003                     ___wmul@multiplier:
   229                           	callstack 0
   230   000003                     isdigit@c:
   231                           	callstack 0
   232   000003                     isspace@c:
   233                           	callstack 0
   234   000003                     fputc@c:
   235                           	callstack 0
   236   000003                     ___aodiv@dividend:
   237                           	callstack 0
   238   000003                     ___aomod@dividend:
   239                           	callstack 0
   240                           
   241                           ; 8 bytes @ 0x2
   242   000003                     	ds	1
   243   000004                     set_bit@cmd:
   244                           	callstack 0
   245                           
   246                           ; 1 bytes @ 0x3
   247   000004                     	ds	1
   248   000005                     ??_lcd_cmd:
   249   000005                     ??_isdigit:
   250   000005                     ??_isspace:
   251   000005                     ___wmul@multiplicand:
   252                           	callstack 0
   253   000005                     fputc@fp:
   254                           	callstack 0
   255                           
   256                           ; 2 bytes @ 0x4
   257   000005                     	ds	1
   258   000006                     lcd_cmd@cmd:
   259                           	callstack 0
   260                           
   261                           ; 1 bytes @ 0x5
   262   000006                     	ds	1
   263   000007                     ??_lcd_init:
   264   000007                     ??_fputc:
   265   000007                     lcd_send_byte@data:
   266                           	callstack 0
   267   000007                     _isspace$994:
   268                           	callstack 0
   269   000007                     ___wmul@product:
   270                           	callstack 0
   271                           
   272                           ; 2 bytes @ 0x6
   273   000007                     	ds	1
   274   000008                     lcd_init@i:
   275                           	callstack 0
   276   000008                     lcd_send_byte@level:
   277                           	callstack 0
   278                           
   279                           ; 1 bytes @ 0x7
   280   000008                     	ds	1
   281   000009                     ?_atoi:
   282                           	callstack 0
   283   000009                     lcd_write@col:
   284                           	callstack 0
   285   000009                     atoi@s:
   286                           	callstack 0
   287                           
   288                           ; 2 bytes @ 0x8
   289   000009                     	ds	1
   290   00000A                     lcd_write@str:
   291                           	callstack 0
   292                           
   293                           ; 2 bytes @ 0x9
   294   00000A                     	ds	1
   295   00000B                     ??_atoi:
   296   00000B                     ___aodiv@divisor:
   297                           	callstack 0
   298   00000B                     ___aomod@divisor:
   299                           	callstack 0
   300                           
   301                           ; 8 bytes @ 0xA
   302   00000B                     	ds	1
   303   00000C                     lcd_write@end:
   304                           	callstack 0
   305   00000C                     fputs@s:
   306                           	callstack 0
   307                           
   308                           ; 2 bytes @ 0xB
   309   00000C                     	ds	1
   310   00000D                     lcd_write@lin:
   311                           	callstack 0
   312                           
   313                           ; 1 bytes @ 0xC
   314   00000D                     	ds	1
   315   00000E                     atoi@neg:
   316                           	callstack 0
   317   00000E                     fputs@fp:
   318                           	callstack 0
   319                           
   320                           ; 2 bytes @ 0xD
   321   00000E                     	ds	2
   322   000010                     fputs@c:
   323                           	callstack 0
   324   000010                     atoi@n:
   325                           	callstack 0
   326                           
   327                           ; 2 bytes @ 0xF
   328   000010                     	ds	1
   329   000011                     fputs@i:
   330                           	callstack 0
   331                           
   332                           ; 2 bytes @ 0x10
   333   000011                     	ds	2
   334   000013                     ___aodiv@counter:
   335                           	callstack 0
   336   000013                     ___aomod@counter:
   337                           	callstack 0
   338   000013                     pad@fp:
   339                           	callstack 0
   340                           
   341                           ; 2 bytes @ 0x12
   342   000013                     	ds	1
   343   000014                     ___aodiv@sign:
   344                           	callstack 0
   345   000014                     ___aomod@sign:
   346                           	callstack 0
   347                           
   348                           ; 1 bytes @ 0x13
   349   000014                     	ds	1
   350   000015                     ?_abs:
   351                           	callstack 0
   352   000015                     pad@buf:
   353                           	callstack 0
   354   000015                     abs@a:
   355                           	callstack 0
   356   000015                     ___aodiv@quotient:
   357                           	callstack 0
   358                           
   359                           ; 8 bytes @ 0x14
   360   000015                     	ds	2
   361   000017                     ??_abs:
   362   000017                     pad@p:
   363                           	callstack 0
   364                           
   365                           ; 2 bytes @ 0x16
   366   000017                     	ds	2
   367   000019                     ??_pad:
   368                           
   369                           ; 1 bytes @ 0x18
   370   000019                     	ds	1
   371   00001A                     pad@i:
   372                           	callstack 0
   373                           
   374                           ; 2 bytes @ 0x19
   375   00001A                     	ds	2
   376   00001C                     pad@w:
   377                           	callstack 0
   378                           
   379                           ; 2 bytes @ 0x1B
   380   00001C                     	ds	2
   381   00001E                     dtoa@fp:
   382                           	callstack 0
   383                           
   384                           ; 2 bytes @ 0x1D
   385   00001E                     	ds	2
   386   000020                     dtoa@d:
   387                           	callstack 0
   388                           
   389                           ; 8 bytes @ 0x1F
   390   000020                     	ds	8
   391   000028                     ??_dtoa:
   392                           
   393                           ; 1 bytes @ 0x27
   394   000028                     	ds	8
   395   000030                     _dtoa$945:
   396                           	callstack 0
   397                           
   398                           ; 2 bytes @ 0x2F
   399   000030                     	ds	2
   400   000032                     dtoa@p:
   401                           	callstack 0
   402                           
   403                           ; 2 bytes @ 0x31
   404   000032                     	ds	2
   405   000034                     dtoa@w:
   406                           	callstack 0
   407                           
   408                           ; 2 bytes @ 0x33
   409   000034                     	ds	2
   410   000036                     dtoa@n:
   411                           	callstack 0
   412                           
   413                           ; 8 bytes @ 0x35
   414   000036                     	ds	8
   415   00003E                     dtoa@i:
   416                           	callstack 0
   417                           
   418                           ; 2 bytes @ 0x3D
   419   00003E                     	ds	2
   420   000040                     dtoa@s:
   421                           	callstack 0
   422                           
   423                           ; 1 bytes @ 0x3F
   424   000040                     	ds	1
   425   000041                     vfpfcnvrt@fp:
   426                           	callstack 0
   427                           
   428                           ; 2 bytes @ 0x40
   429   000041                     	ds	2
   430   000043                     vfpfcnvrt@fmt:
   431                           	callstack 0
   432                           
   433                           ; 2 bytes @ 0x42
   434   000043                     	ds	2
   435   000045                     vfpfcnvrt@ap:
   436                           	callstack 0
   437                           
   438                           ; 2 bytes @ 0x44
   439   000045                     	ds	2
   440   000047                     ??_vfpfcnvrt:
   441                           
   442                           ; 1 bytes @ 0x46
   443   000047                     	ds	3
   444   00004A                     vfpfcnvrt@convarg:
   445                           	callstack 0
   446                           
   447                           ; 8 bytes @ 0x49
   448   00004A                     	ds	8
   449   000052                     vfpfcnvrt@done:
   450                           	callstack 0
   451                           
   452                           ; 2 bytes @ 0x51
   453   000052                     	ds	2
   454   000054                     vfpfcnvrt@cp:
   455                           	callstack 0
   456                           
   457                           ; 2 bytes @ 0x53
   458   000054                     	ds	2
   459   000056                     ?_vfprintf:
   460                           	callstack 0
   461   000056                     vfprintf@fp:
   462                           	callstack 0
   463                           
   464                           ; 2 bytes @ 0x55
   465   000056                     	ds	2
   466   000058                     vfprintf@fmt:
   467                           	callstack 0
   468                           
   469                           ; 2 bytes @ 0x57
   470   000058                     	ds	2
   471   00005A                     vfprintf@ap:
   472                           	callstack 0
   473                           
   474                           ; 2 bytes @ 0x59
   475   00005A                     	ds	2
   476   00005C                     vfprintf@cfmt:
   477                           	callstack 0
   478                           
   479                           ; 2 bytes @ 0x5B
   480   00005C                     	ds	2
   481   00005E                     ?_sprintf:
   482                           	callstack 0
   483   00005E                     sprintf@s:
   484                           	callstack 0
   485                           
   486                           ; 2 bytes @ 0x5D
   487   00005E                     	ds	2
   488   000060                     sprintf@fmt:
   489                           	callstack 0
   490                           
   491                           ; 2 bytes @ 0x5F
   492   000060                     	ds	4
   493   000064                     sprintf@ap:
   494                           	callstack 0
   495                           
   496                           ; 2 bytes @ 0x63
   497   000064                     	ds	2
   498   000066                     sprintf@f:
   499                           	callstack 0
   500                           
   501                           ; 11 bytes @ 0x65
   502   000066                     	ds	11
   503   000071                     ??_main:
   504                           
   505                           ; 1 bytes @ 0x70
   506   000071                     	ds	2
   507                           
   508 ;;
   509 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   510 ;;
   511 ;; *************** function _main *****************
   512 ;; Defined at:
   513 ;;		line 139 in file "Program_Interrupt_LEDs.c"
   514 ;; Parameters:    Size  Location     Type
   515 ;;		None
   516 ;; Auto vars:     Size  Location     Type
   517 ;;		None
   518 ;; Return value:  Size  Location     Type
   519 ;;                  1    wreg      void 
   520 ;; Registers used:
   521 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   522 ;; Tracked objects:
   523 ;;		On entry : 0/0
   524 ;;		On exit  : 0/0
   525 ;;		Unchanged: 0/0
   526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   527 ;;      Params:         0       0       0       0       0       0       0
   528 ;;      Locals:         0       0       0       0       0       0       0
   529 ;;      Temps:          2       0       0       0       0       0       0
   530 ;;      Totals:         2       0       0       0       0       0       0
   531 ;;Total ram usage:        2 bytes
   532 ;; Hardware stack levels required when called: 9
   533 ;; This function calls:
   534 ;;		_config_EXT_INT
   535 ;;		_config_FOSC
   536 ;;		_config_IO
   537 ;;		_lcd_init
   538 ;;		_lcd_write
   539 ;;		_sprintf
   540 ;; This function is called by:
   541 ;;		Startup code after reset
   542 ;; This function uses a non-reentrant model
   543 ;;
   544                           
   545                           	psect	text0
   546   001470                     __ptext0:
   547                           	callstack 0
   548   001470                     _main:
   549                           	callstack 22
   550   001470                     
   551                           ;Program_Interrupt_LEDs.c: 141:     config_FOSC();
   552   001470  EC98  F00B         	call	_config_FOSC	;wreg free
   553                           
   554                           ;Program_Interrupt_LEDs.c: 142:     config_IO();
   555   001474  EC87  F00B         	call	_config_IO	;wreg free
   556                           
   557                           ;Program_Interrupt_LEDs.c: 143:     config_EXT_INT();
   558   001478  EC91  F00B         	call	_config_EXT_INT	;wreg free
   559   00147C                     
   560                           ;Program_Interrupt_LEDs.c: 145:     lcd_init();
   561   00147C  ECE9  F009         	call	_lcd_init	;wreg free
   562   001480                     
   563                           ;Program_Interrupt_LEDs.c: 146:     lcd_write(1,2,"INT EXTERNA");
   564   001480  0E02               	movlw	2
   565   001482  6E09               	movwf	lcd_write@col^0,c
   566   001484  0E11               	movlw	low STR_1
   567   001486  6E0A               	movwf	lcd_write@str^0,c
   568   001488  0E06               	movlw	high STR_1
   569   00148A  6E0B               	movwf	(lcd_write@str+1)^0,c
   570   00148C  0E01               	movlw	1
   571   00148E  EC99  F009         	call	_lcd_write
   572   001492                     
   573                           ;Program_Interrupt_LEDs.c: 147:     lcd_write(2,2,"Counter:");
   574   001492  0E02               	movlw	2
   575   001494  6E09               	movwf	lcd_write@col^0,c
   576   001496  0E1D               	movlw	low STR_2
   577   001498  6E0A               	movwf	lcd_write@str^0,c
   578   00149A  0E06               	movlw	high STR_2
   579   00149C  6E0B               	movwf	(lcd_write@str+1)^0,c
   580   00149E  0E02               	movlw	2
   581   0014A0  EC99  F009         	call	_lcd_write
   582   0014A4                     l1902:
   583                           
   584                           ;Program_Interrupt_LEDs.c: 150:     {;Program_Interrupt_LEDs.c: 151:         _delay((uns
      +                          igned long)((100)*(8000000/4000.0)));
   585   0014A4  0E02               	movlw	2
   586   0014A6  6E72               	movwf	(??_main+1)^0,c
   587   0014A8  0E04               	movlw	4
   588   0014AA  6E71               	movwf	??_main^0,c
   589   0014AC  0EBA               	movlw	186
   590   0014AE                     u1257:
   591   0014AE  2EE8               	decfsz	wreg,f,c
   592   0014B0  D7FE               	bra	u1257
   593   0014B2  2E71               	decfsz	??_main^0,f,c
   594   0014B4  D7FC               	bra	u1257
   595   0014B6  2E72               	decfsz	(??_main+1)^0,f,c
   596   0014B8  D7FA               	bra	u1257
   597   0014BA  D000               	nop2	
   598   0014BC                     
   599                           ;Program_Interrupt_LEDs.c: 152:         sprintf(BufferLCD,"%01d ", counter);
   600   0014BC  0EA0               	movlw	low _BufferLCD
   601   0014BE  6E5E               	movwf	sprintf@s^0,c
   602   0014C0  0E00               	movlw	high _BufferLCD
   603   0014C2  6E5F               	movwf	(sprintf@s+1)^0,c
   604   0014C4  0E26               	movlw	low STR_3
   605   0014C6  6E60               	movwf	sprintf@fmt^0,c
   606   0014C8  0E06               	movlw	high STR_3
   607   0014CA  6E61               	movwf	(sprintf@fmt+1)^0,c
   608   0014CC  C077  F062         	movff	_counter,?_sprintf+4
   609   0014D0  C078  F063         	movff	_counter+1,?_sprintf+5
   610   0014D4  EC79  F00A         	call	_sprintf	;wreg free
   611   0014D8                     
   612                           ;Program_Interrupt_LEDs.c: 153:         lcd_write(2,10,BufferLCD);
   613   0014D8  0E0A               	movlw	10
   614   0014DA  6E09               	movwf	lcd_write@col^0,c
   615   0014DC  0EA0               	movlw	low _BufferLCD
   616   0014DE  6E0A               	movwf	lcd_write@str^0,c
   617   0014E0  0E00               	movlw	high _BufferLCD
   618   0014E2  6E0B               	movwf	(lcd_write@str+1)^0,c
   619   0014E4  0E02               	movlw	2
   620   0014E6  EC99  F009         	call	_lcd_write
   621   0014EA  EF52  F00A         	goto	l1902
   622   0014EE  EF07  F000         	goto	start
   623   0014F2                     __end_of_main:
   624                           	callstack 0
   625                           
   626 ;; *************** function _sprintf *****************
   627 ;; Defined at:
   628 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_sprintf.c"
   629 ;; Parameters:    Size  Location     Type
   630 ;;  s               2   93[COMRAM] PTR unsigned char 
   631 ;;		 -> BufferLCD(16), 
   632 ;;  fmt             2   95[COMRAM] PTR const unsigned char 
   633 ;;		 -> STR_3(6), 
   634 ;; Auto vars:     Size  Location     Type
   635 ;;  f              11  101[COMRAM] struct _IO_FILE
   636 ;;  ap              2   99[COMRAM] PTR void [1]
   637 ;;		 -> ?_sprintf(2), 
   638 ;;  ret             2    0        int 
   639 ;; Return value:  Size  Location     Type
   640 ;;                  2   93[COMRAM] int 
   641 ;; Registers used:
   642 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   643 ;; Tracked objects:
   644 ;;		On entry : 0/0
   645 ;;		On exit  : 0/0
   646 ;;		Unchanged: 0/0
   647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   648 ;;      Params:         6       0       0       0       0       0       0
   649 ;;      Locals:        13       0       0       0       0       0       0
   650 ;;      Temps:          0       0       0       0       0       0       0
   651 ;;      Totals:        19       0       0       0       0       0       0
   652 ;;Total ram usage:       19 bytes
   653 ;; Hardware stack levels used: 1
   654 ;; Hardware stack levels required when called: 8
   655 ;; This function calls:
   656 ;;		_vfprintf
   657 ;; This function is called by:
   658 ;;		_main
   659 ;; This function uses a non-reentrant model
   660 ;;
   661                           
   662                           	psect	text1
   663   0014F2                     __ptext1:
   664                           	callstack 0
   665   0014F2                     _sprintf:
   666                           	callstack 22
   667   0014F2  0E62               	movlw	low (?_sprintf+4)
   668   0014F4  6E64               	movwf	sprintf@ap^0,c
   669   0014F6  0E00               	movlw	high (?_sprintf+4)
   670   0014F8  6E65               	movwf	(sprintf@ap+1)^0,c
   671   0014FA  C05E  F066         	movff	sprintf@s,sprintf@f
   672   0014FE  C05F  F067         	movff	sprintf@s+1,sprintf@f+1
   673   001502  0E00               	movlw	0
   674   001504  6E6A               	movwf	(sprintf@f+4)^0,c
   675   001506  0E00               	movlw	0
   676   001508  6E69               	movwf	(sprintf@f+3)^0,c
   677   00150A  0E00               	movlw	0
   678   00150C  6E70               	movwf	(sprintf@f+10)^0,c
   679   00150E  0E00               	movlw	0
   680   001510  6E6F               	movwf	(sprintf@f+9)^0,c
   681   001512  0E66               	movlw	low sprintf@f
   682   001514  6E56               	movwf	vfprintf@fp^0,c
   683   001516  0E00               	movlw	high sprintf@f
   684   001518  6E57               	movwf	(vfprintf@fp+1)^0,c
   685   00151A  C060  F058         	movff	sprintf@fmt,vfprintf@fmt
   686   00151E  C061  F059         	movff	sprintf@fmt+1,vfprintf@fmt+1
   687   001522  0E64               	movlw	low sprintf@ap
   688   001524  6E5A               	movwf	vfprintf@ap^0,c
   689   001526  0E00               	movlw	high sprintf@ap
   690   001528  6E5B               	movwf	(vfprintf@ap+1)^0,c
   691   00152A  ECA0  F00A         	call	_vfprintf	;wreg free
   692   00152E  5069               	movf	(sprintf@f+3)^0,w,c
   693   001530  245E               	addwf	sprintf@s^0,w,c
   694   001532  6ED9               	movwf	fsr2l,c
   695   001534  506A               	movf	(sprintf@f+4)^0,w,c
   696   001536  205F               	addwfc	(sprintf@s+1)^0,w,c
   697   001538  6EDA               	movwf	fsr2h,c
   698   00153A  0E00               	movlw	0
   699   00153C  6EDF               	movwf	indf2,c
   700   00153E  0012               	return		;funcret
   701   001540                     __end_of_sprintf:
   702                           	callstack 0
   703                           
   704 ;; *************** function _vfprintf *****************
   705 ;; Defined at:
   706 ;;		line 1520 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
   707 ;; Parameters:    Size  Location     Type
   708 ;;  fp              2   85[COMRAM] PTR struct _IO_FILE
   709 ;;		 -> sprintf@f(11), 
   710 ;;  fmt             2   87[COMRAM] PTR const unsigned char 
   711 ;;		 -> STR_3(6), 
   712 ;;  ap              2   89[COMRAM] PTR PTR void 
   713 ;;		 -> sprintf@ap(2), 
   714 ;; Auto vars:     Size  Location     Type
   715 ;;  cfmt            2   91[COMRAM] PTR unsigned char 
   716 ;;		 -> STR_3(6), 
   717 ;; Return value:  Size  Location     Type
   718 ;;                  2   85[COMRAM] int 
   719 ;; Registers used:
   720 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   721 ;; Tracked objects:
   722 ;;		On entry : 0/0
   723 ;;		On exit  : 0/0
   724 ;;		Unchanged: 0/0
   725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   726 ;;      Params:         6       0       0       0       0       0       0
   727 ;;      Locals:         2       0       0       0       0       0       0
   728 ;;      Temps:          0       0       0       0       0       0       0
   729 ;;      Totals:         8       0       0       0       0       0       0
   730 ;;Total ram usage:        8 bytes
   731 ;; Hardware stack levels used: 1
   732 ;; Hardware stack levels required when called: 7
   733 ;; This function calls:
   734 ;;		_vfpfcnvrt
   735 ;; This function is called by:
   736 ;;		_sprintf
   737 ;; This function uses a non-reentrant model
   738 ;;
   739                           
   740                           	psect	text2
   741   001540                     __ptext2:
   742                           	callstack 0
   743   001540                     _vfprintf:
   744                           	callstack 22
   745   001540                     
   746                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1520: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\source
      +                          s\c99\common\doprnt.c: 1521: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\comm
      +                          on\doprnt.c: 1523:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\
      +                          common\doprnt.c: 1525:     cfmt = (char *)fmt;
   747   001540  C058  F05C         	movff	vfprintf@fmt,vfprintf@cfmt
   748   001544  C059  F05D         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   749                           
   750                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
   751   001548  EFB4  F00A         	goto	l1808
   752   00154C                     l1806:
   753                           
   754                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1533:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
   755   00154C  C056  F041         	movff	vfprintf@fp,vfpfcnvrt@fp
   756   001550  C057  F042         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   757   001554  0E5C               	movlw	low vfprintf@cfmt
   758   001556  6E43               	movwf	vfpfcnvrt@fmt^0,c
   759   001558  0E00               	movlw	high vfprintf@cfmt
   760   00155A  6E44               	movwf	(vfpfcnvrt@fmt+1)^0,c
   761   00155C  C05A  F045         	movff	vfprintf@ap,vfpfcnvrt@ap
   762   001560  C05B  F046         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   763   001564  EC71  F004         	call	_vfpfcnvrt	;wreg free
   764   001568                     l1808:
   765                           
   766                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1529:     while (
      +                          *cfmt) {
   767   001568  C05C  FFF6         	movff	vfprintf@cfmt,tblptrl
   768   00156C  C05D  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   769   001570                     	if	0	;tblptru may be non-zero
   770   001570                     	endif
   771   001570                     	if	0	;tblptru may be non-zero
   772   001570                     	endif
   773   001570  0008               	tblrd		*
   774   001572  50F5               	movf	tablat,w,c
   775   001574  0900               	iorlw	0
   776   001576  A4D8               	btfss	status,2,c
   777   001578  EFC0  F00A         	goto	u1181
   778   00157C  EFC2  F00A         	goto	u1180
   779   001580                     u1181:
   780   001580  EFA6  F00A         	goto	l1806
   781   001584                     u1180:
   782   001584                     
   783                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1538:  return 0;
   784   001584  0E00               	movlw	0
   785   001586  6E57               	movwf	(?_vfprintf+1)^0,c
   786   001588  0E00               	movlw	0
   787   00158A  6E56               	movwf	?_vfprintf^0,c
   788   00158C  0012               	return		;funcret
   789   00158E                     __end_of_vfprintf:
   790                           	callstack 0
   791                           
   792 ;; *************** function _vfpfcnvrt *****************
   793 ;; Defined at:
   794 ;;		line 1007 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
   795 ;; Parameters:    Size  Location     Type
   796 ;;  fp              2   64[COMRAM] PTR struct _IO_FILE
   797 ;;		 -> sprintf@f(11), 
   798 ;;  fmt             2   66[COMRAM] PTR PTR unsigned char 
   799 ;;		 -> vfprintf@cfmt(2), 
   800 ;;  ap              2   68[COMRAM] PTR PTR void 
   801 ;;		 -> sprintf@ap(2), 
   802 ;; Auto vars:     Size  Location     Type
   803 ;;  convarg         8   73[COMRAM] struct .
   804 ;;  cp              2   83[COMRAM] PTR unsigned char 
   805 ;;		 -> STR_3(6), 
   806 ;;  done            2   81[COMRAM] int 
   807 ;;  i               2    0        int 
   808 ;;  c               1    0        unsigned char 
   809 ;; Return value:  Size  Location     Type
   810 ;;                  1    wreg      void 
   811 ;; Registers used:
   812 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   813 ;; Tracked objects:
   814 ;;		On entry : 0/0
   815 ;;		On exit  : 0/0
   816 ;;		Unchanged: 0/0
   817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   818 ;;      Params:         6       0       0       0       0       0       0
   819 ;;      Locals:        12       0       0       0       0       0       0
   820 ;;      Temps:          3       0       0       0       0       0       0
   821 ;;      Totals:        21       0       0       0       0       0       0
   822 ;;Total ram usage:       21 bytes
   823 ;; Hardware stack levels used: 1
   824 ;; Hardware stack levels required when called: 6
   825 ;; This function calls:
   826 ;;		_atoi
   827 ;;		_dtoa
   828 ;;		_fputc
   829 ;;		_isdigit
   830 ;; This function is called by:
   831 ;;		_vfprintf
   832 ;; This function uses a non-reentrant model
   833 ;;
   834                           
   835                           	psect	text3
   836   0008E2                     __ptext3:
   837                           	callstack 0
   838   0008E2                     _vfpfcnvrt:
   839                           	callstack 22
   840   0008E2                     
   841                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1007: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1008: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\dopr
      +                          nt.c: 1009:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common
      +                          \doprnt.c: 1010:     int done, i;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1016:  } convarg;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\c
      +                          ommon\doprnt.c: 1019:     if ((*fmt)[0] == '%') {
   842   0008E2  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   843   0008E6  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   844   0008EA  CFDE FFF6          	movff	postinc2,tblptrl
   845   0008EE  CFDD FFF7          	movff	postdec2,tblptrh
   846   0008F2                     	if	0	;tblptru may be non-zero
   847   0008F2                     	endif
   848   0008F2                     	if	0	;tblptru may be non-zero
   849   0008F2                     	endif
   850   0008F2  0008               	tblrd		*
   851   0008F4  50F5               	movf	tablat,w,c
   852   0008F6  0A25               	xorlw	37
   853   0008F8  A4D8               	btfss	status,2,c
   854   0008FA  EF81  F004         	goto	u1101
   855   0008FE  EF83  F004         	goto	u1100
   856   000902                     u1101:
   857   000902  EFA9  F005         	goto	l1786
   858   000906                     u1100:
   859   000906                     
   860                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1020:         ++*
      +                          fmt;
   861   000906  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   862   00090A  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   863   00090E  2ADE               	incf	postinc2,f,c
   864   000910  0E00               	movlw	0
   865   000912  22DD               	addwfc	postdec2,f,c
   866   000914                     
   867                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1022:         fla
      +                          gs = width = 0;
   868   000914  0E00               	movlw	0
   869   000916  6E74               	movwf	(_width+1)^0,c
   870   000918  0E00               	movlw	0
   871   00091A  6E73               	movwf	_width^0,c
   872   00091C  C073  F079         	movff	_width,_flags
   873   000920                     
   874                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1023:         pre
      +                          c = -1;
   875   000920  6875               	setf	_prec^0,c
   876   000922  6876               	setf	(_prec+1)^0,c
   877   000924                     
   878                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1027:         don
      +                          e = 0;
   879   000924  0E00               	movlw	0
   880   000926  6E53               	movwf	(vfpfcnvrt@done+1)^0,c
   881   000928  0E00               	movlw	0
   882   00092A  6E52               	movwf	vfpfcnvrt@done^0,c
   883                           
   884                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1028:         whi
      +                          le (!done) {
   885   00092C  EFC2  F004         	goto	l1752
   886   000930                     l1742:
   887                           
   888                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1038:            
      +                                   flags |= (1 << 1);
   889   000930  8279               	bsf	_flags^0,1,c
   890   000932                     
   891                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1039:            
      +                                   ++*fmt;
   892   000932  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   893   000936  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   894   00093A  2ADE               	incf	postinc2,f,c
   895   00093C  0E00               	movlw	0
   896   00093E  22DD               	addwfc	postdec2,f,c
   897                           
   898                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1040:            
      +                                   break;
   899   000940  EFC2  F004         	goto	l1752
   900   000944                     l1746:
   901                           
   902                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1061:            
      +                                   done = 1;
   903   000944  0E00               	movlw	0
   904   000946  6E53               	movwf	(vfpfcnvrt@done+1)^0,c
   905   000948  0E01               	movlw	1
   906   00094A  6E52               	movwf	vfpfcnvrt@done^0,c
   907                           
   908                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1062:            
      +                                   break;
   909   00094C  EFC2  F004         	goto	l1752
   910   000950                     l1750:
   911   000950  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   912   000954  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   913   000958  CFDE FFF6          	movff	postinc2,tblptrl
   914   00095C  CFDD FFF7          	movff	postdec2,tblptrh
   915   000960                     	if	0	;tblptru may be non-zero
   916   000960                     	endif
   917   000960                     	if	0	;tblptru may be non-zero
   918   000960                     	endif
   919   000960  0008               	tblrd		*
   920   000962  50F5               	movf	tablat,w,c
   921   000964  6E47               	movwf	??_vfpfcnvrt^0,c
   922   000966  6A48               	clrf	(??_vfpfcnvrt+1)^0,c
   923                           
   924                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   925                           ; Switch size 1, requested type "simple"
   926                           ; Number of cases is 1, Range of values is 0 to 0
   927                           ; switch strategies available:
   928                           ; Name         Instructions Cycles
   929                           ; simple_byte            4     3 (average)
   930                           ;	Chosen strategy is simple_byte
   931   000968  5048               	movf	(??_vfpfcnvrt+1)^0,w,c
   932   00096A  0A00               	xorlw	0	; case 0
   933   00096C  B4D8               	btfsc	status,2,c
   934   00096E  EFBB  F004         	goto	l1990
   935   000972  EFA2  F004         	goto	l1746
   936   000976                     l1990:
   937                           
   938                           ; Switch size 1, requested type "simple"
   939                           ; Number of cases is 1, Range of values is 48 to 48
   940                           ; switch strategies available:
   941                           ; Name         Instructions Cycles
   942                           ; simple_byte            4     3 (average)
   943                           ;	Chosen strategy is simple_byte
   944   000976  5047               	movf	??_vfpfcnvrt^0,w,c
   945   000978  0A30               	xorlw	48	; case 48
   946   00097A  B4D8               	btfsc	status,2,c
   947   00097C  EF98  F004         	goto	l1742
   948   000980  EFA2  F004         	goto	l1746
   949   000984                     l1752:
   950                           
   951                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1028:         whi
      +                          le (!done) {
   952   000984  5052               	movf	vfpfcnvrt@done^0,w,c
   953   000986  1053               	iorwf	(vfpfcnvrt@done+1)^0,w,c
   954   000988  B4D8               	btfsc	status,2,c
   955   00098A  EFC9  F004         	goto	u1111
   956   00098E  EFCB  F004         	goto	u1110
   957   000992                     u1111:
   958   000992  EFA8  F004         	goto	l1750
   959   000996                     u1110:
   960   000996                     
   961                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1074:         if 
      +                          ((*fmt)[0] == '*') {
   962   000996  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   963   00099A  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   964   00099E  CFDE FFF6          	movff	postinc2,tblptrl
   965   0009A2  CFDD FFF7          	movff	postdec2,tblptrh
   966   0009A6                     	if	0	;tblptru may be non-zero
   967   0009A6                     	endif
   968   0009A6                     	if	0	;tblptru may be non-zero
   969   0009A6                     	endif
   970   0009A6  0008               	tblrd		*
   971   0009A8  50F5               	movf	tablat,w,c
   972   0009AA  0A2A               	xorlw	42
   973   0009AC  A4D8               	btfss	status,2,c
   974   0009AE  EFDB  F004         	goto	u1121
   975   0009B2  EFDD  F004         	goto	u1120
   976   0009B6                     u1121:
   977   0009B6  EF06  F005         	goto	l1762
   978   0009BA                     u1120:
   979   0009BA                     
   980                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1075:            
      +                           ++*fmt;
   981   0009BA  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   982   0009BE  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   983   0009C2  2ADE               	incf	postinc2,f,c
   984   0009C4  0E00               	movlw	0
   985   0009C6  22DD               	addwfc	postdec2,f,c
   986                           
   987                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1076:            
      +                           width = (*(int *)__va_arg(*(int **)ap, (int)0));
   988   0009C8  C045  FFD9         	movff	vfpfcnvrt@ap,fsr2l
   989   0009CC  C046  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
   990   0009D0  CFDF F047          	movff	indf2,??_vfpfcnvrt
   991   0009D4  0E02               	movlw	2
   992   0009D6  26DE               	addwf	postinc2,f,c
   993   0009D8  CFDF F048          	movff	indf2,??_vfpfcnvrt+1
   994   0009DC  0E00               	movlw	0
   995   0009DE  22DD               	addwfc	postdec2,f,c
   996   0009E0  C047  FFD9         	movff	??_vfpfcnvrt,fsr2l
   997   0009E4  C048  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
   998   0009E8  CFDE F073          	movff	postinc2,_width
   999   0009EC  CFDD F074          	movff	postdec2,_width+1
  1000   0009F0                     
  1001                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1077:            
      +                           if (width < 0) {
  1002   0009F0  BE74               	btfsc	(_width+1)^0,7,c
  1003   0009F2  EFFF  F004         	goto	u1130
  1004   0009F6  EFFD  F004         	goto	u1131
  1005   0009FA                     u1131:
  1006   0009FA  EF39  F005         	goto	l1770
  1007   0009FE                     u1130:
  1008   0009FE                     
  1009                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1078:            
      +                               flags |= (1 << 0);
  1010   0009FE  8079               	bsf	_flags^0,0,c
  1011                           
  1012                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1079:            
      +                               width = -width;
  1013   000A00  6C73               	negf	_width^0,c
  1014   000A02  1E74               	comf	(_width+1)^0,f,c
  1015   000A04  B0D8               	btfsc	status,0,c
  1016   000A06  2A74               	incf	(_width+1)^0,f,c
  1017   000A08  EF39  F005         	goto	l1770
  1018   000A0C                     l1762:
  1019                           
  1020                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1082:            
      +                           width = atoi(*fmt);
  1021   000A0C  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1022   000A10  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1023   000A14  CFDE F009          	movff	postinc2,atoi@s
  1024   000A18  CFDD F00A          	movff	postdec2,atoi@s+1
  1025   000A1C  EC34  F007         	call	_atoi	;wreg free
  1026   000A20  C009  F073         	movff	?_atoi,_width
  1027   000A24  C00A  F074         	movff	?_atoi+1,_width+1
  1028                           
  1029                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1083:            
      +                           while ((0 && isdigit((*fmt)[0]), ((unsigned)((*fmt)[0])-'0') < 10)) {
  1030   000A28  EF1D  F005         	goto	l1768
  1031   000A2C                     l1764:
  1032                           
  1033                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1084:            
      +                               ++*fmt;
  1034   000A2C  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1035   000A30  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1036   000A34  2ADE               	incf	postinc2,f,c
  1037   000A36  0E00               	movlw	0
  1038   000A38  22DD               	addwfc	postdec2,f,c
  1039   000A3A                     l1768:
  1040   000A3A  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1041   000A3E  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1042   000A42  CFDE FFF6          	movff	postinc2,tblptrl
  1043   000A46  CFDD FFF7          	movff	postdec2,tblptrh
  1044   000A4A                     	if	0	;tblptru may be non-zero
  1045   000A4A                     	endif
  1046   000A4A                     	if	0	;tblptru may be non-zero
  1047   000A4A                     	endif
  1048   000A4A  0008               	tblrd		*
  1049   000A4C  CFF5 F047          	movff	tablat,??_vfpfcnvrt
  1050   000A50  0ED0               	movlw	208
  1051   000A52  2447               	addwf	??_vfpfcnvrt^0,w,c
  1052   000A54  6E48               	movwf	(??_vfpfcnvrt+1)^0,c
  1053   000A56  6A49               	clrf	(??_vfpfcnvrt+2)^0,c
  1054   000A58  0EFF               	movlw	255
  1055   000A5A  2249               	addwfc	(??_vfpfcnvrt+2)^0,f,c
  1056   000A5C  5049               	movf	(??_vfpfcnvrt+2)^0,w,c
  1057   000A5E  E109               	bnz	u1140
  1058   000A60  0E0A               	movlw	10
  1059   000A62  5C48               	subwf	(??_vfpfcnvrt+1)^0,w,c
  1060   000A64  A0D8               	btfss	status,0,c
  1061   000A66  EF37  F005         	goto	u1141
  1062   000A6A  EF39  F005         	goto	u1140
  1063   000A6E                     u1141:
  1064   000A6E  EF16  F005         	goto	l1764
  1065   000A72                     u1140:
  1066   000A72                     l1770:
  1067                           
  1068                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1117:   cp = *fmt
      +                          ;
  1069   000A72  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1070   000A76  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1071   000A7A  CFDE F054          	movff	postinc2,vfpfcnvrt@cp
  1072   000A7E  CFDD F055          	movff	postdec2,vfpfcnvrt@cp+1
  1073   000A82                     
  1074                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1187:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  1075   000A82  C054  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1076   000A86  C055  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1077   000A8A                     	if	0	;tblptru may be non-zero
  1078   000A8A                     	endif
  1079   000A8A                     	if	0	;tblptru may be non-zero
  1080   000A8A                     	endif
  1081   000A8A  0008               	tblrd		*
  1082   000A8C  50F5               	movf	tablat,w,c
  1083   000A8E  0A64               	xorlw	100
  1084   000A90  B4D8               	btfsc	status,2,c
  1085   000A92  EF4D  F005         	goto	u1151
  1086   000A96  EF4F  F005         	goto	u1150
  1087   000A9A                     u1151:
  1088   000A9A  EF5D  F005         	goto	l1776
  1089   000A9E                     u1150:
  1090   000A9E  C054  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  1091   000AA2  C055  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
  1092   000AA6                     	if	0	;tblptru may be non-zero
  1093   000AA6                     	endif
  1094   000AA6                     	if	0	;tblptru may be non-zero
  1095   000AA6                     	endif
  1096   000AA6  0008               	tblrd		*
  1097   000AA8  50F5               	movf	tablat,w,c
  1098   000AAA  0A69               	xorlw	105
  1099   000AAC  A4D8               	btfss	status,2,c
  1100   000AAE  EF5B  F005         	goto	u1161
  1101   000AB2  EF5D  F005         	goto	u1160
  1102   000AB6                     u1161:
  1103   000AB6  EFA0  F005         	goto	l1782
  1104   000ABA                     u1160:
  1105   000ABA                     l1776:
  1106                           
  1107                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1230:    convarg.
      +                          ll = (long long)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  1108   000ABA  C045  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1109   000ABE  C046  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1110   000AC2  CFDF F047          	movff	indf2,??_vfpfcnvrt
  1111   000AC6  0E02               	movlw	2
  1112   000AC8  26DE               	addwf	postinc2,f,c
  1113   000ACA  CFDF F048          	movff	indf2,??_vfpfcnvrt+1
  1114   000ACE  0E00               	movlw	0
  1115   000AD0  22DD               	addwfc	postdec2,f,c
  1116   000AD2  C047  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1117   000AD6  C048  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1118   000ADA  CFDE F04A          	movff	postinc2,vfpfcnvrt@convarg
  1119   000ADE  CFDD F04B          	movff	postdec2,vfpfcnvrt@convarg+1
  1120   000AE2  0E00               	movlw	0
  1121   000AE4  BE4B               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  1122   000AE6  0EFF               	movlw	-1
  1123   000AE8  6E4C               	movwf	(vfpfcnvrt@convarg+2)^0,c
  1124   000AEA  6E4D               	movwf	(vfpfcnvrt@convarg+3)^0,c
  1125   000AEC  6E4E               	movwf	(vfpfcnvrt@convarg+4)^0,c
  1126   000AEE  6E4F               	movwf	(vfpfcnvrt@convarg+5)^0,c
  1127   000AF0  6E50               	movwf	(vfpfcnvrt@convarg+6)^0,c
  1128   000AF2  6E51               	movwf	(vfpfcnvrt@convarg+7)^0,c
  1129                           
  1130                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1232:    *fmt = c
      +                          p+1;
  1131   000AF4  0E01               	movlw	1
  1132   000AF6  2454               	addwf	vfpfcnvrt@cp^0,w,c
  1133   000AF8  6E47               	movwf	??_vfpfcnvrt^0,c
  1134   000AFA  0E00               	movlw	0
  1135   000AFC  2055               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
  1136   000AFE  6E48               	movwf	(??_vfpfcnvrt+1)^0,c
  1137   000B00  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1138   000B04  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1139   000B08  C047  FFDE         	movff	??_vfpfcnvrt,postinc2
  1140   000B0C  C048  FFDD         	movff	??_vfpfcnvrt+1,postdec2
  1141   000B10                     
  1142                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1233:    return (
      +                          void) dtoa(fp, convarg.ll);;	Return value of _vfpfcnvrt is never used
  1143   000B10  C041  F01E         	movff	vfpfcnvrt@fp,dtoa@fp
  1144   000B14  C042  F01F         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1145   000B18  C04A  F020         	movff	vfpfcnvrt@convarg,dtoa@d
  1146   000B1C  C04B  F021         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
  1147   000B20  C04C  F022         	movff	vfpfcnvrt@convarg+2,dtoa@d+2
  1148   000B24  C04D  F023         	movff	vfpfcnvrt@convarg+3,dtoa@d+3
  1149   000B28  C04E  F024         	movff	vfpfcnvrt@convarg+4,dtoa@d+4
  1150   000B2C  C04F  F025         	movff	vfpfcnvrt@convarg+5,dtoa@d+5
  1151   000B30  C050  F026         	movff	vfpfcnvrt@convarg+6,dtoa@d+6
  1152   000B34  C051  F027         	movff	vfpfcnvrt@convarg+7,dtoa@d+7
  1153   000B38  EC17  F003         	call	_dtoa	;wreg free
  1154   000B3C  EFBD  F005         	goto	l875
  1155   000B40                     l1782:
  1156                           
  1157                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1509:         ++*
      +                          fmt;
  1158   000B40  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1159   000B44  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1160   000B48  2ADE               	incf	postinc2,f,c
  1161   000B4A  0E00               	movlw	0
  1162   000B4C  22DD               	addwfc	postdec2,f,c
  1163   000B4E  EFBD  F005         	goto	l875
  1164   000B52                     l1786:
  1165                           
  1166                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 1514:     fputc((
      +                          int)(*fmt)[0], fp);
  1167   000B52  C043  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1168   000B56  C044  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1169   000B5A  CFDE FFF6          	movff	postinc2,tblptrl
  1170   000B5E  CFDD FFF7          	movff	postdec2,tblptrh
  1171   000B62                     	if	0	;tblptru may be non-zero
  1172   000B62                     	endif
  1173   000B62                     	if	0	;tblptru may be non-zero
  1174   000B62                     	endif
  1175   000B62  0008               	tblrd		*
  1176   000B64  50F5               	movf	tablat,w,c
  1177   000B66  6E03               	movwf	fputc@c^0,c
  1178   000B68  6A04               	clrf	(fputc@c+1)^0,c
  1179   000B6A  C041  F005         	movff	vfpfcnvrt@fp,fputc@fp
  1180   000B6E  C042  F006         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1181   000B72  ECDF  F008         	call	_fputc	;wreg free
  1182   000B76  EFA0  F005         	goto	l1782
  1183   000B7A                     l875:
  1184   000B7A  0012               	return		;funcret
  1185   000B7C                     __end_of_vfpfcnvrt:
  1186                           	callstack 0
  1187                           
  1188 ;; *************** function _dtoa *****************
  1189 ;; Defined at:
  1190 ;;		line 443 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1191 ;; Parameters:    Size  Location     Type
  1192 ;;  fp              2   29[COMRAM] PTR struct _IO_FILE
  1193 ;;		 -> sprintf@f(11), 
  1194 ;;  d               8   31[COMRAM] long long 
  1195 ;; Auto vars:     Size  Location     Type
  1196 ;;  n               8   53[COMRAM] long long 
  1197 ;;  i               2   61[COMRAM] int 
  1198 ;;  w               2   51[COMRAM] int 
  1199 ;;  p               2   49[COMRAM] int 
  1200 ;;  s               1   63[COMRAM] unsigned char 
  1201 ;; Return value:  Size  Location     Type
  1202 ;;                  1    wreg      void 
  1203 ;; Registers used:
  1204 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1205 ;; Tracked objects:
  1206 ;;		On entry : 0/0
  1207 ;;		On exit  : 0/0
  1208 ;;		Unchanged: 0/0
  1209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1210 ;;      Params:        10       0       0       0       0       0       0
  1211 ;;      Locals:        17       0       0       0       0       0       0
  1212 ;;      Temps:          8       0       0       0       0       0       0
  1213 ;;      Totals:        35       0       0       0       0       0       0
  1214 ;;Total ram usage:       35 bytes
  1215 ;; Hardware stack levels used: 1
  1216 ;; Hardware stack levels required when called: 5
  1217 ;; This function calls:
  1218 ;;		___aodiv
  1219 ;;		___aomod
  1220 ;;		_abs
  1221 ;;		_pad
  1222 ;; This function is called by:
  1223 ;;		_vfpfcnvrt
  1224 ;; This function uses a non-reentrant model
  1225 ;;
  1226                           
  1227                           	psect	text4
  1228   00062E                     __ptext4:
  1229                           	callstack 0
  1230   00062E                     _dtoa:
  1231                           	callstack 22
  1232   00062E                     
  1233                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 443: static void 
      +                          dtoa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\
      +                          doprnt.c: 444: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          45:  char s;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 446: 
      +                              int i, p, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 4
      +                          47:     long long n;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 450:     n = d;
  1234   00062E  C020  F036         	movff	dtoa@d,dtoa@n
  1235   000632  C021  F037         	movff	dtoa@d+1,dtoa@n+1
  1236   000636  C022  F038         	movff	dtoa@d+2,dtoa@n+2
  1237   00063A  C023  F039         	movff	dtoa@d+3,dtoa@n+3
  1238   00063E  C024  F03A         	movff	dtoa@d+4,dtoa@n+4
  1239   000642  C025  F03B         	movff	dtoa@d+5,dtoa@n+5
  1240   000646  C026  F03C         	movff	dtoa@d+6,dtoa@n+6
  1241   00064A  C027  F03D         	movff	dtoa@d+7,dtoa@n+7
  1242   00064E                     
  1243                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 451:     s = n < 
      +                          0 ? 1 : 0;
  1244   00064E  BE3D               	btfsc	(dtoa@n+7)^0,7,c
  1245   000650  EF2C  F003         	goto	u931
  1246   000654  EF2F  F003         	goto	u930
  1247   000658                     u931:
  1248   000658  0E01               	movlw	1
  1249   00065A  EF30  F003         	goto	u940
  1250   00065E                     u930:
  1251   00065E  0E00               	movlw	0
  1252   000660                     u940:
  1253   000660  6E40               	movwf	dtoa@s^0,c
  1254   000662                     
  1255                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 452:     if (s) {
  1256   000662  5040               	movf	dtoa@s^0,w,c
  1257   000664  B4D8               	btfsc	status,2,c
  1258   000666  EF37  F003         	goto	u951
  1259   00066A  EF39  F003         	goto	u950
  1260   00066E                     u951:
  1261   00066E  EF49  F003         	goto	l1628
  1262   000672                     u950:
  1263   000672                     
  1264                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 453:         n = 
      +                          -n;
  1265   000672  1E3D               	comf	(dtoa@n+7)^0,f,c
  1266   000674  1E3C               	comf	(dtoa@n+6)^0,f,c
  1267   000676  1E3B               	comf	(dtoa@n+5)^0,f,c
  1268   000678  1E3A               	comf	(dtoa@n+4)^0,f,c
  1269   00067A  1E39               	comf	(dtoa@n+3)^0,f,c
  1270   00067C  1E38               	comf	(dtoa@n+2)^0,f,c
  1271   00067E  1E37               	comf	(dtoa@n+1)^0,f,c
  1272   000680  6C36               	negf	dtoa@n^0,c
  1273   000682  0E00               	movlw	0
  1274   000684  2237               	addwfc	(dtoa@n+1)^0,f,c
  1275   000686  2238               	addwfc	(dtoa@n+2)^0,f,c
  1276   000688  2239               	addwfc	(dtoa@n+3)^0,f,c
  1277   00068A  223A               	addwfc	(dtoa@n+4)^0,f,c
  1278   00068C  223B               	addwfc	(dtoa@n+5)^0,f,c
  1279   00068E  223C               	addwfc	(dtoa@n+6)^0,f,c
  1280   000690  223D               	addwfc	(dtoa@n+7)^0,f,c
  1281   000692                     l1628:
  1282                           
  1283                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 458:     if (!(pr
      +                          ec < 0)) {
  1284   000692  BE76               	btfsc	(_prec+1)^0,7,c
  1285   000694  EF4E  F003         	goto	u961
  1286   000698  EF50  F003         	goto	u960
  1287   00069C                     u961:
  1288   00069C  EF51  F003         	goto	l1632
  1289   0006A0                     u960:
  1290   0006A0                     
  1291                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 459:         flag
      +                          s &= ~(1 << 1);
  1292   0006A0  9279               	bcf	_flags^0,1,c
  1293   0006A2                     l1632:
  1294                           
  1295                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 462:     p = (0 <
      +                           prec) ? prec : 1;
  1296   0006A2  BE76               	btfsc	(_prec+1)^0,7,c
  1297   0006A4  EF5E  F003         	goto	u970
  1298   0006A8  5076               	movf	(_prec+1)^0,w,c
  1299   0006AA  E106               	bnz	u971
  1300   0006AC  0475               	decf	_prec^0,w,c
  1301   0006AE  B0D8               	btfsc	status,0,c
  1302   0006B0  EF5C  F003         	goto	u971
  1303   0006B4  EF5E  F003         	goto	u970
  1304   0006B8                     u971:
  1305   0006B8  EF64  F003         	goto	l837
  1306   0006BC                     u970:
  1307   0006BC  0E00               	movlw	0
  1308   0006BE  6E33               	movwf	(dtoa@p+1)^0,c
  1309   0006C0  0E01               	movlw	1
  1310   0006C2  6E32               	movwf	dtoa@p^0,c
  1311   0006C4  EF68  F003         	goto	l839
  1312   0006C8                     l837:
  1313   0006C8  C075  F032         	movff	_prec,dtoa@p
  1314   0006CC  C076  F033         	movff	_prec+1,dtoa@p+1
  1315   0006D0                     l839:
  1316                           
  1317                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 463:     w = widt
      +                          h;
  1318   0006D0  C073  F034         	movff	_width,dtoa@w
  1319   0006D4  C074  F035         	movff	_width+1,dtoa@w+1
  1320   0006D8                     
  1321                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 464:     if (s
  1322   0006D8  5040               	movf	dtoa@s^0,w,c
  1323   0006DA  B4D8               	btfsc	status,2,c
  1324   0006DC  EF72  F003         	goto	u981
  1325   0006E0  EF74  F003         	goto	u980
  1326   0006E4                     u981:
  1327   0006E4  EF8B  F003         	goto	l840
  1328   0006E8                     u980:
  1329   0006E8                     
  1330                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 468:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 469:         --w;
  1331   0006E8  0634               	decf	dtoa@w^0,f,c
  1332   0006EA  A0D8               	btfss	status,0,c
  1333   0006EC  0635               	decf	(dtoa@w+1)^0,f,c
  1334   0006EE                     
  1335                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 470:   s = s ? '-
      +                          ' : '+';
  1336   0006EE  5040               	movf	dtoa@s^0,w,c
  1337   0006F0  A4D8               	btfss	status,2,c
  1338   0006F2  EF7D  F003         	goto	u991
  1339   0006F6  EF7F  F003         	goto	u990
  1340   0006FA                     u991:
  1341   0006FA  EF85  F003         	goto	l1644
  1342   0006FE                     u990:
  1343   0006FE  0E00               	movlw	0
  1344   000700  6E31               	movwf	(_dtoa$945+1)^0,c
  1345   000702  0E2B               	movlw	43
  1346   000704  6E30               	movwf	_dtoa$945^0,c
  1347   000706  EF89  F003         	goto	l1646
  1348   00070A                     l1644:
  1349   00070A  0E00               	movlw	0
  1350   00070C  6E31               	movwf	(_dtoa$945+1)^0,c
  1351   00070E  0E2D               	movlw	45
  1352   000710  6E30               	movwf	_dtoa$945^0,c
  1353   000712                     l1646:
  1354   000712  C030  F040         	movff	_dtoa$945,dtoa@s
  1355   000716                     l840:
  1356                           
  1357                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 480:     i = size
      +                          of(dbuf) - 1;
  1358   000716  0E00               	movlw	0
  1359   000718  6E3F               	movwf	(dtoa@i+1)^0,c
  1360   00071A  0E1F               	movlw	31
  1361   00071C  6E3E               	movwf	dtoa@i^0,c
  1362   00071E                     
  1363                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 481:     dbuf[i] 
      +                          = '\0';
  1364   00071E  0E00               	movlw	0
  1365   000720  0100               	movlb	0	; () banked
  1366   000722  6F9F               	movwf	(_dbuf+31)& (0+255),b
  1367                           
  1368                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  1369   000724  EF10  F004         	goto	l1660
  1370   000728                     l1650:
  1371                           
  1372                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 486:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 487:         --i;
  1373   000728  063E               	decf	dtoa@i^0,f,c
  1374   00072A  A0D8               	btfss	status,0,c
  1375   00072C  063F               	decf	(dtoa@i+1)^0,f,c
  1376   00072E                     
  1377                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 488:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1378   00072E  0E80               	movlw	low _dbuf
  1379   000730  243E               	addwf	dtoa@i^0,w,c
  1380   000732  6ED9               	movwf	fsr2l,c
  1381   000734  0E00               	movlw	high _dbuf
  1382   000736  203F               	addwfc	(dtoa@i+1)^0,w,c
  1383   000738  6EDA               	movwf	fsr2h,c
  1384   00073A  C036  F003         	movff	dtoa@n,___aomod@dividend
  1385   00073E  C037  F004         	movff	dtoa@n+1,___aomod@dividend+1
  1386   000742  C038  F005         	movff	dtoa@n+2,___aomod@dividend+2
  1387   000746  C039  F006         	movff	dtoa@n+3,___aomod@dividend+3
  1388   00074A  C03A  F007         	movff	dtoa@n+4,___aomod@dividend+4
  1389   00074E  C03B  F008         	movff	dtoa@n+5,___aomod@dividend+5
  1390   000752  C03C  F009         	movff	dtoa@n+6,___aomod@dividend+6
  1391   000756  C03D  F00A         	movff	dtoa@n+7,___aomod@dividend+7
  1392   00075A  0E0A               	movlw	10
  1393   00075C  6E0B               	movwf	___aomod@divisor^0,c
  1394   00075E  0E00               	movlw	0
  1395   000760  6E0C               	movwf	(___aomod@divisor+1)^0,c
  1396   000762  0E00               	movlw	0
  1397   000764  6E0D               	movwf	(___aomod@divisor+2)^0,c
  1398   000766  0E00               	movlw	0
  1399   000768  6E0E               	movwf	(___aomod@divisor+3)^0,c
  1400   00076A  0E00               	movlw	0
  1401   00076C  6E0F               	movwf	(___aomod@divisor+4)^0,c
  1402   00076E  0E00               	movlw	0
  1403   000770  6E10               	movwf	(___aomod@divisor+5)^0,c
  1404   000772  0E00               	movlw	0
  1405   000774  6E11               	movwf	(___aomod@divisor+6)^0,c
  1406   000776  0E00               	movlw	0
  1407   000778  6E12               	movwf	(___aomod@divisor+7)^0,c
  1408   00077A  EC82  F006         	call	___aomod	;wreg free
  1409   00077E  C003  F028         	movff	?___aomod,??_dtoa
  1410   000782  C004  F029         	movff	?___aomod+1,??_dtoa+1
  1411   000786  C005  F02A         	movff	?___aomod+2,??_dtoa+2
  1412   00078A  C006  F02B         	movff	?___aomod+3,??_dtoa+3
  1413   00078E  C007  F02C         	movff	?___aomod+4,??_dtoa+4
  1414   000792  C008  F02D         	movff	?___aomod+5,??_dtoa+5
  1415   000796  C009  F02E         	movff	?___aomod+6,??_dtoa+6
  1416   00079A  C00A  F02F         	movff	?___aomod+7,??_dtoa+7
  1417   00079E  C028  F015         	movff	??_dtoa,abs@a
  1418   0007A2  C029  F016         	movff	??_dtoa+1,abs@a+1
  1419   0007A6  EC0C  F00B         	call	_abs	;wreg free
  1420   0007AA  5015               	movf	?_abs^0,w,c
  1421   0007AC  0F30               	addlw	48
  1422   0007AE  6EDF               	movwf	indf2,c
  1423   0007B0                     
  1424                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 489:         --p;
  1425   0007B0  0632               	decf	dtoa@p^0,f,c
  1426   0007B2  A0D8               	btfss	status,0,c
  1427   0007B4  0633               	decf	(dtoa@p+1)^0,f,c
  1428   0007B6                     
  1429                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 490:         --w;
  1430   0007B6  0634               	decf	dtoa@w^0,f,c
  1431   0007B8  A0D8               	btfss	status,0,c
  1432   0007BA  0635               	decf	(dtoa@w+1)^0,f,c
  1433   0007BC                     
  1434                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 491:         n = 
      +                          n / 10;
  1435   0007BC  C036  F003         	movff	dtoa@n,___aodiv@dividend
  1436   0007C0  C037  F004         	movff	dtoa@n+1,___aodiv@dividend+1
  1437   0007C4  C038  F005         	movff	dtoa@n+2,___aodiv@dividend+2
  1438   0007C8  C039  F006         	movff	dtoa@n+3,___aodiv@dividend+3
  1439   0007CC  C03A  F007         	movff	dtoa@n+4,___aodiv@dividend+4
  1440   0007D0  C03B  F008         	movff	dtoa@n+5,___aodiv@dividend+5
  1441   0007D4  C03C  F009         	movff	dtoa@n+6,___aodiv@dividend+6
  1442   0007D8  C03D  F00A         	movff	dtoa@n+7,___aodiv@dividend+7
  1443   0007DC  0E0A               	movlw	10
  1444   0007DE  6E0B               	movwf	___aodiv@divisor^0,c
  1445   0007E0  0E00               	movlw	0
  1446   0007E2  6E0C               	movwf	(___aodiv@divisor+1)^0,c
  1447   0007E4  0E00               	movlw	0
  1448   0007E6  6E0D               	movwf	(___aodiv@divisor+2)^0,c
  1449   0007E8  0E00               	movlw	0
  1450   0007EA  6E0E               	movwf	(___aodiv@divisor+3)^0,c
  1451   0007EC  0E00               	movlw	0
  1452   0007EE  6E0F               	movwf	(___aodiv@divisor+4)^0,c
  1453   0007F0  0E00               	movlw	0
  1454   0007F2  6E10               	movwf	(___aodiv@divisor+5)^0,c
  1455   0007F4  0E00               	movlw	0
  1456   0007F6  6E11               	movwf	(___aodiv@divisor+6)^0,c
  1457   0007F8  0E00               	movlw	0
  1458   0007FA  6E12               	movwf	(___aodiv@divisor+7)^0,c
  1459   0007FC  ECBE  F005         	call	___aodiv	;wreg free
  1460   000800  C003  F036         	movff	?___aodiv,dtoa@n
  1461   000804  C004  F037         	movff	?___aodiv+1,dtoa@n+1
  1462   000808  C005  F038         	movff	?___aodiv+2,dtoa@n+2
  1463   00080C  C006  F039         	movff	?___aodiv+3,dtoa@n+3
  1464   000810  C007  F03A         	movff	?___aodiv+4,dtoa@n+4
  1465   000814  C008  F03B         	movff	?___aodiv+5,dtoa@n+5
  1466   000818  C009  F03C         	movff	?___aodiv+6,dtoa@n+6
  1467   00081C  C00A  F03D         	movff	?___aodiv+7,dtoa@n+7
  1468   000820                     l1660:
  1469                           
  1470                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 482:     while (!
      +                          (i < 1) && (n || (0 < p)
  1471   000820  BE3F               	btfsc	(dtoa@i+1)^0,7,c
  1472   000822  EF1B  F004         	goto	u1001
  1473   000826  503F               	movf	(dtoa@i+1)^0,w,c
  1474   000828  E108               	bnz	u1000
  1475   00082A  043E               	decf	dtoa@i^0,w,c
  1476   00082C  A0D8               	btfss	status,0,c
  1477   00082E  EF1B  F004         	goto	u1001
  1478   000832  EF1D  F004         	goto	u1000
  1479   000836                     u1001:
  1480   000836  EF4D  F004         	goto	l1670
  1481   00083A                     u1000:
  1482   00083A  5036               	movf	dtoa@n^0,w,c
  1483   00083C  1037               	iorwf	(dtoa@n+1)^0,w,c
  1484   00083E  1038               	iorwf	(dtoa@n+2)^0,w,c
  1485   000840  1039               	iorwf	(dtoa@n+3)^0,w,c
  1486   000842  103A               	iorwf	(dtoa@n+4)^0,w,c
  1487   000844  103B               	iorwf	(dtoa@n+5)^0,w,c
  1488   000846  103C               	iorwf	(dtoa@n+6)^0,w,c
  1489   000848  103D               	iorwf	(dtoa@n+7)^0,w,c
  1490   00084A  A4D8               	btfss	status,2,c
  1491   00084C  EF2A  F004         	goto	u1011
  1492   000850  EF2C  F004         	goto	u1010
  1493   000854                     u1011:
  1494   000854  EF94  F003         	goto	l1650
  1495   000858                     u1010:
  1496   000858  BE33               	btfsc	(dtoa@p+1)^0,7,c
  1497   00085A  EF39  F004         	goto	u1020
  1498   00085E  5033               	movf	(dtoa@p+1)^0,w,c
  1499   000860  E106               	bnz	u1021
  1500   000862  0432               	decf	dtoa@p^0,w,c
  1501   000864  B0D8               	btfsc	status,0,c
  1502   000866  EF37  F004         	goto	u1021
  1503   00086A  EF39  F004         	goto	u1020
  1504   00086E                     u1021:
  1505   00086E  EF94  F003         	goto	l1650
  1506   000872                     u1020:
  1507   000872  BE35               	btfsc	(dtoa@w+1)^0,7,c
  1508   000874  EF44  F004         	goto	u1031
  1509   000878  5035               	movf	(dtoa@w+1)^0,w,c
  1510   00087A  E108               	bnz	u1030
  1511   00087C  0434               	decf	dtoa@w^0,w,c
  1512   00087E  A0D8               	btfss	status,0,c
  1513   000880  EF44  F004         	goto	u1031
  1514   000884  EF46  F004         	goto	u1030
  1515   000888                     u1031:
  1516   000888  EF4D  F004         	goto	l1670
  1517   00088C                     u1030:
  1518   00088C  B279               	btfsc	_flags^0,1,c
  1519   00088E  EF4B  F004         	goto	u1041
  1520   000892  EF4D  F004         	goto	u1040
  1521   000896                     u1041:
  1522   000896  EF94  F003         	goto	l1650
  1523   00089A                     u1040:
  1524   00089A                     l1670:
  1525                           
  1526                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 495:     if (s !=
      +                           0) {
  1527   00089A  5040               	movf	dtoa@s^0,w,c
  1528   00089C  B4D8               	btfsc	status,2,c
  1529   00089E  EF53  F004         	goto	u1051
  1530   0008A2  EF55  F004         	goto	u1050
  1531   0008A6                     u1051:
  1532   0008A6  EF60  F004         	goto	l1676
  1533   0008AA                     u1050:
  1534   0008AA                     
  1535                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 496:         --i;
  1536   0008AA  063E               	decf	dtoa@i^0,f,c
  1537   0008AC  A0D8               	btfss	status,0,c
  1538   0008AE  063F               	decf	(dtoa@i+1)^0,f,c
  1539   0008B0                     
  1540                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 497:         dbuf
      +                          [i] = s;
  1541   0008B0  0E80               	movlw	low _dbuf
  1542   0008B2  243E               	addwf	dtoa@i^0,w,c
  1543   0008B4  6ED9               	movwf	fsr2l,c
  1544   0008B6  0E00               	movlw	high _dbuf
  1545   0008B8  203F               	addwfc	(dtoa@i+1)^0,w,c
  1546   0008BA  6EDA               	movwf	fsr2h,c
  1547   0008BC  C040  FFDF         	movff	dtoa@s,indf2
  1548   0008C0                     l1676:
  1549                           
  1550                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 501:     return (
      +                          void) pad(fp, &dbuf[i], w);
  1551   0008C0  C01E  F013         	movff	dtoa@fp,pad@fp
  1552   0008C4  C01F  F014         	movff	dtoa@fp+1,pad@fp+1
  1553   0008C8  0E80               	movlw	low _dbuf
  1554   0008CA  243E               	addwf	dtoa@i^0,w,c
  1555   0008CC  6E15               	movwf	pad@buf^0,c
  1556   0008CE  0E00               	movlw	high _dbuf
  1557   0008D0  203F               	addwfc	(dtoa@i+1)^0,w,c
  1558   0008D2  6E16               	movwf	(pad@buf+1)^0,c
  1559   0008D4  C034  F017         	movff	dtoa@w,pad@p
  1560   0008D8  C035  F018         	movff	dtoa@w+1,pad@p+1
  1561   0008DC  EC44  F009         	call	_pad	;wreg free
  1562   0008E0  0012               	return		;funcret
  1563   0008E2                     __end_of_dtoa:
  1564                           	callstack 0
  1565                           
  1566 ;; *************** function _pad *****************
  1567 ;; Defined at:
  1568 ;;		line 133 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c"
  1569 ;; Parameters:    Size  Location     Type
  1570 ;;  fp              2   18[COMRAM] PTR struct _IO_FILE
  1571 ;;		 -> sprintf@f(11), 
  1572 ;;  buf             2   20[COMRAM] PTR unsigned char 
  1573 ;;		 -> dbuf(32), 
  1574 ;;  p               2   22[COMRAM] int 
  1575 ;; Auto vars:     Size  Location     Type
  1576 ;;  w               2   27[COMRAM] int 
  1577 ;;  i               2   25[COMRAM] int 
  1578 ;; Return value:  Size  Location     Type
  1579 ;;                  1    wreg      void 
  1580 ;; Registers used:
  1581 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1582 ;; Tracked objects:
  1583 ;;		On entry : 0/0
  1584 ;;		On exit  : 0/0
  1585 ;;		Unchanged: 0/0
  1586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1587 ;;      Params:         6       0       0       0       0       0       0
  1588 ;;      Locals:         4       0       0       0       0       0       0
  1589 ;;      Temps:          1       0       0       0       0       0       0
  1590 ;;      Totals:        11       0       0       0       0       0       0
  1591 ;;Total ram usage:       11 bytes
  1592 ;; Hardware stack levels used: 1
  1593 ;; Hardware stack levels required when called: 4
  1594 ;; This function calls:
  1595 ;;		_fputc
  1596 ;;		_fputs
  1597 ;; This function is called by:
  1598 ;;		_dtoa
  1599 ;; This function uses a non-reentrant model
  1600 ;;
  1601                           
  1602                           	psect	text5
  1603   001288                     __ptext5:
  1604                           	callstack 0
  1605   001288                     _pad:
  1606                           	callstack 22
  1607   001288                     
  1608                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 133: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\com
      +                          mon\doprnt.c: 134: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.
      +                          c: 135:     int i, w;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt
      +                          .c: 139:     if (flags & (1 << 0)) {
  1609   001288  A079               	btfss	_flags^0,0,c
  1610   00128A  EF49  F009         	goto	u831
  1611   00128E  EF4B  F009         	goto	u830
  1612   001292                     u831:
  1613   001292  EF55  F009         	goto	l1574
  1614   001296                     u830:
  1615   001296                     
  1616                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 140:         fput
      +                          s((const char *)buf, fp);
  1617   001296  C015  F00C         	movff	pad@buf,fputs@s
  1618   00129A  C016  F00D         	movff	pad@buf+1,fputs@s+1
  1619   00129E  C013  F00E         	movff	pad@fp,fputs@fp
  1620   0012A2  C014  F00F         	movff	pad@fp+1,fputs@fp+1
  1621   0012A6  ECEA  F00A         	call	_fputs	;wreg free
  1622   0012AA                     l1574:
  1623                           
  1624                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 145:     w = (p <
      +                           0) ? 0 : p;
  1625   0012AA  BE18               	btfsc	(pad@p+1)^0,7,c
  1626   0012AC  EF5A  F009         	goto	u841
  1627   0012B0  EF5C  F009         	goto	u840
  1628   0012B4                     u841:
  1629   0012B4  EF62  F009         	goto	l1578
  1630   0012B8                     u840:
  1631   0012B8  C017  F01C         	movff	pad@p,pad@w
  1632   0012BC  C018  F01D         	movff	pad@p+1,pad@w+1
  1633   0012C0  EF66  F009         	goto	l826
  1634   0012C4                     l1578:
  1635   0012C4  0E00               	movlw	0
  1636   0012C6  6E1D               	movwf	(pad@w+1)^0,c
  1637   0012C8  0E00               	movlw	0
  1638   0012CA  6E1C               	movwf	pad@w^0,c
  1639   0012CC                     l826:
  1640                           
  1641                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 146:     i = 0;
  1642   0012CC  0E00               	movlw	0
  1643   0012CE  6E1B               	movwf	(pad@i+1)^0,c
  1644   0012D0  0E00               	movlw	0
  1645   0012D2  6E1A               	movwf	pad@i^0,c
  1646                           
  1647                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  1648   0012D4  EF78  F009         	goto	l1584
  1649   0012D8                     l1580:
  1650                           
  1651                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 148:         fput
      +                          c(' ', fp);
  1652   0012D8  0E00               	movlw	0
  1653   0012DA  6E04               	movwf	(fputc@c+1)^0,c
  1654   0012DC  0E20               	movlw	32
  1655   0012DE  6E03               	movwf	fputc@c^0,c
  1656   0012E0  C013  F005         	movff	pad@fp,fputc@fp
  1657   0012E4  C014  F006         	movff	pad@fp+1,fputc@fp+1
  1658   0012E8  ECDF  F008         	call	_fputc	;wreg free
  1659   0012EC                     
  1660                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 149:         ++i;
  1661   0012EC  4A1A               	infsnz	pad@i^0,f,c
  1662   0012EE  2A1B               	incf	(pad@i+1)^0,f,c
  1663   0012F0                     l1584:
  1664                           
  1665                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 147:     while (i
      +                           < w) {
  1666   0012F0  501C               	movf	pad@w^0,w,c
  1667   0012F2  5C1A               	subwf	pad@i^0,w,c
  1668   0012F4  501B               	movf	(pad@i+1)^0,w,c
  1669   0012F6  0A80               	xorlw	128
  1670   0012F8  6E19               	movwf	??_pad^0,c
  1671   0012FA  501D               	movf	(pad@w+1)^0,w,c
  1672   0012FC  0A80               	xorlw	128
  1673   0012FE  5819               	subwfb	??_pad^0,w,c
  1674   001300  A0D8               	btfss	status,0,c
  1675   001302  EF85  F009         	goto	u851
  1676   001306  EF87  F009         	goto	u850
  1677   00130A                     u851:
  1678   00130A  EF6C  F009         	goto	l1580
  1679   00130E                     u850:
  1680   00130E                     
  1681                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 154:     if (!(fl
      +                          ags & (1 << 0))) {
  1682   00130E  B079               	btfsc	_flags^0,0,c
  1683   001310  EF8C  F009         	goto	u861
  1684   001314  EF8E  F009         	goto	u860
  1685   001318                     u861:
  1686   001318  EF98  F009         	goto	l831
  1687   00131C                     u860:
  1688   00131C                     
  1689                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\doprnt.c: 156:         fput
      +                          s((const char *)buf, fp);
  1690   00131C  C015  F00C         	movff	pad@buf,fputs@s
  1691   001320  C016  F00D         	movff	pad@buf+1,fputs@s+1
  1692   001324  C013  F00E         	movff	pad@fp,fputs@fp
  1693   001328  C014  F00F         	movff	pad@fp+1,fputs@fp+1
  1694   00132C  ECEA  F00A         	call	_fputs	;wreg free
  1695   001330                     l831:
  1696   001330  0012               	return		;funcret
  1697   001332                     __end_of_pad:
  1698                           	callstack 0
  1699                           
  1700 ;; *************** function _fputs *****************
  1701 ;; Defined at:
  1702 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputs.c"
  1703 ;; Parameters:    Size  Location     Type
  1704 ;;  s               2   11[COMRAM] PTR const unsigned char 
  1705 ;;		 -> dbuf(32), 
  1706 ;;  fp              2   13[COMRAM] PTR struct _IO_FILE
  1707 ;;		 -> sprintf@f(11), 
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;  i               2   16[COMRAM] int 
  1710 ;;  c               1   15[COMRAM] unsigned char 
  1711 ;; Return value:  Size  Location     Type
  1712 ;;                  2   11[COMRAM] int 
  1713 ;; Registers used:
  1714 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1715 ;; Tracked objects:
  1716 ;;		On entry : 0/0
  1717 ;;		On exit  : 0/0
  1718 ;;		Unchanged: 0/0
  1719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1720 ;;      Params:         4       0       0       0       0       0       0
  1721 ;;      Locals:         3       0       0       0       0       0       0
  1722 ;;      Temps:          0       0       0       0       0       0       0
  1723 ;;      Totals:         7       0       0       0       0       0       0
  1724 ;;Total ram usage:        7 bytes
  1725 ;; Hardware stack levels used: 1
  1726 ;; Hardware stack levels required when called: 3
  1727 ;; This function calls:
  1728 ;;		_fputc
  1729 ;; This function is called by:
  1730 ;;		_pad
  1731 ;; This function uses a non-reentrant model
  1732 ;;
  1733                           
  1734                           	psect	text6
  1735   0015D4                     __ptext6:
  1736                           	callstack 0
  1737   0015D4                     _fputs:
  1738                           	callstack 22
  1739   0015D4  0E00               	movlw	0
  1740   0015D6  6E12               	movwf	(fputs@i+1)^0,c
  1741   0015D8  0E00               	movlw	0
  1742   0015DA  6E11               	movwf	fputs@i^0,c
  1743   0015DC  EFFB  F00A         	goto	l1482
  1744   0015E0                     l1478:
  1745   0015E0  C010  F003         	movff	fputs@c,fputc@c
  1746   0015E4  6A04               	clrf	(fputc@c+1)^0,c
  1747   0015E6  C00E  F005         	movff	fputs@fp,fputc@fp
  1748   0015EA  C00F  F006         	movff	fputs@fp+1,fputc@fp+1
  1749   0015EE  ECDF  F008         	call	_fputc	;wreg free
  1750   0015F2  4A11               	infsnz	fputs@i^0,f,c
  1751   0015F4  2A12               	incf	(fputs@i+1)^0,f,c
  1752   0015F6                     l1482:
  1753   0015F6  5011               	movf	fputs@i^0,w,c
  1754   0015F8  240C               	addwf	fputs@s^0,w,c
  1755   0015FA  6ED9               	movwf	fsr2l,c
  1756   0015FC  5012               	movf	(fputs@i+1)^0,w,c
  1757   0015FE  200D               	addwfc	(fputs@s+1)^0,w,c
  1758   001600  6EDA               	movwf	fsr2h,c
  1759   001602  50DF               	movf	indf2,w,c
  1760   001604  6E10               	movwf	fputs@c^0,c
  1761   001606  5010               	movf	fputs@c^0,w,c
  1762   001608  A4D8               	btfss	status,2,c
  1763   00160A  EF09  F00B         	goto	u691
  1764   00160E  EF0B  F00B         	goto	u690
  1765   001612                     u691:
  1766   001612  EFF0  F00A         	goto	l1478
  1767   001616                     u690:
  1768   001616  0012               	return		;funcret
  1769   001618                     __end_of_fputs:
  1770                           	callstack 0
  1771                           
  1772 ;; *************** function _fputc *****************
  1773 ;; Defined at:
  1774 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\nf_fputc.c"
  1775 ;; Parameters:    Size  Location     Type
  1776 ;;  c               2    2[COMRAM] int 
  1777 ;;  fp              2    4[COMRAM] PTR struct _IO_FILE
  1778 ;;		 -> sprintf@f(11), 
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;		None
  1781 ;; Return value:  Size  Location     Type
  1782 ;;                  2    2[COMRAM] int 
  1783 ;; Registers used:
  1784 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1790 ;;      Params:         4       0       0       0       0       0       0
  1791 ;;      Locals:         0       0       0       0       0       0       0
  1792 ;;      Temps:          5       0       0       0       0       0       0
  1793 ;;      Totals:         9       0       0       0       0       0       0
  1794 ;;Total ram usage:        9 bytes
  1795 ;; Hardware stack levels used: 1
  1796 ;; Hardware stack levels required when called: 2
  1797 ;; This function calls:
  1798 ;;		_putch
  1799 ;; This function is called by:
  1800 ;;		_pad
  1801 ;;		_vfpfcnvrt
  1802 ;;		_fputs
  1803 ;; This function uses a non-reentrant model
  1804 ;;
  1805                           
  1806                           	psect	text7
  1807   0011BE                     __ptext7:
  1808                           	callstack 0
  1809   0011BE                     _fputc:
  1810                           	callstack 25
  1811   0011BE  5005               	movf	fputc@fp^0,w,c
  1812   0011C0  1006               	iorwf	(fputc@fp+1)^0,w,c
  1813   0011C2  B4D8               	btfsc	status,2,c
  1814   0011C4  EFE6  F008         	goto	u651
  1815   0011C8  EFE8  F008         	goto	u650
  1816   0011CC                     u651:
  1817   0011CC  EFF1  F008         	goto	l1466
  1818   0011D0                     u650:
  1819   0011D0  5005               	movf	fputc@fp^0,w,c
  1820   0011D2  1006               	iorwf	(fputc@fp+1)^0,w,c
  1821   0011D4  A4D8               	btfss	status,2,c
  1822   0011D6  EFEF  F008         	goto	u661
  1823   0011DA  EFF1  F008         	goto	u660
  1824   0011DE                     u661:
  1825   0011DE  EFF6  F008         	goto	l1468
  1826   0011E2                     u660:
  1827   0011E2                     l1466:
  1828   0011E2  5003               	movf	fputc@c^0,w,c
  1829   0011E4  EC9D  F00B         	call	_putch
  1830   0011E8  EF43  F009         	goto	l939
  1831   0011EC                     l1468:
  1832   0011EC  EE20 F009          	lfsr	2,9
  1833   0011F0  5005               	movf	fputc@fp^0,w,c
  1834   0011F2  26D9               	addwf	fsr2l,f,c
  1835   0011F4  5006               	movf	(fputc@fp+1)^0,w,c
  1836   0011F6  22DA               	addwfc	fsr2h,f,c
  1837   0011F8  50DE               	movf	postinc2,w,c
  1838   0011FA  10DE               	iorwf	postinc2,w,c
  1839   0011FC  B4D8               	btfsc	status,2,c
  1840   0011FE  EF03  F009         	goto	u671
  1841   001202  EF05  F009         	goto	u670
  1842   001206                     u671:
  1843   001206  EF20  F009         	goto	l1472
  1844   00120A                     u670:
  1845   00120A  EE20 F009          	lfsr	2,9
  1846   00120E  5005               	movf	fputc@fp^0,w,c
  1847   001210  26D9               	addwf	fsr2l,f,c
  1848   001212  5006               	movf	(fputc@fp+1)^0,w,c
  1849   001214  22DA               	addwfc	fsr2h,f,c
  1850   001216  EE10 F003          	lfsr	1,3
  1851   00121A  5005               	movf	fputc@fp^0,w,c
  1852   00121C  26E1               	addwf	fsr1l,f,c
  1853   00121E  5006               	movf	(fputc@fp+1)^0,w,c
  1854   001220  22E2               	addwfc	fsr1h,f,c
  1855   001222  50DE               	movf	postinc2,w,c
  1856   001224  5CE6               	subwf	postinc1,w,c
  1857   001226  50E6               	movf	postinc1,w,c
  1858   001228  0A80               	xorlw	128
  1859   00122A  6E0B               	movwf	(??_fputc+4)^0,c
  1860   00122C  50DE               	movf	postinc2,w,c
  1861   00122E  0A80               	xorlw	128
  1862   001230  580B               	subwfb	(??_fputc+4)^0,w,c
  1863   001232  B0D8               	btfsc	status,0,c
  1864   001234  EF1E  F009         	goto	u681
  1865   001238  EF20  F009         	goto	u680
  1866   00123C                     u681:
  1867   00123C  EF43  F009         	goto	l939
  1868   001240                     u680:
  1869   001240                     l1472:
  1870   001240  EE20 F003          	lfsr	2,3
  1871   001244  5005               	movf	fputc@fp^0,w,c
  1872   001246  26D9               	addwf	fsr2l,f,c
  1873   001248  5006               	movf	(fputc@fp+1)^0,w,c
  1874   00124A  22DA               	addwfc	fsr2h,f,c
  1875   00124C  CFDE F007          	movff	postinc2,??_fputc
  1876   001250  CFDD F008          	movff	postdec2,??_fputc+1
  1877   001254  C005  FFD9         	movff	fputc@fp,fsr2l
  1878   001258  C006  FFDA         	movff	fputc@fp+1,fsr2h
  1879   00125C  CFDE F009          	movff	postinc2,??_fputc+2
  1880   001260  CFDD F00A          	movff	postdec2,??_fputc+3
  1881   001264  5007               	movf	??_fputc^0,w,c
  1882   001266  2409               	addwf	(??_fputc+2)^0,w,c
  1883   001268  6ED9               	movwf	fsr2l,c
  1884   00126A  5008               	movf	(??_fputc+1)^0,w,c
  1885   00126C  200A               	addwfc	(??_fputc+3)^0,w,c
  1886   00126E  6EDA               	movwf	fsr2h,c
  1887   001270  C003  FFDF         	movff	fputc@c,indf2
  1888   001274  EE20 F003          	lfsr	2,3
  1889   001278  5005               	movf	fputc@fp^0,w,c
  1890   00127A  26D9               	addwf	fsr2l,f,c
  1891   00127C  5006               	movf	(fputc@fp+1)^0,w,c
  1892   00127E  22DA               	addwfc	fsr2h,f,c
  1893   001280  2ADE               	incf	postinc2,f,c
  1894   001282  0E00               	movlw	0
  1895   001284  22DD               	addwfc	postdec2,f,c
  1896   001286                     l939:
  1897   001286  0012               	return		;funcret
  1898   001288                     __end_of_fputc:
  1899                           	callstack 0
  1900                           
  1901 ;; *************** function _putch *****************
  1902 ;; Defined at:
  1903 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\putch.c"
  1904 ;; Parameters:    Size  Location     Type
  1905 ;;  c               1    wreg     unsigned char 
  1906 ;; Auto vars:     Size  Location     Type
  1907 ;;  c               1    0[COMRAM] unsigned char 
  1908 ;; Return value:  Size  Location     Type
  1909 ;;                  1    wreg      void 
  1910 ;; Registers used:
  1911 ;;		wreg
  1912 ;; Tracked objects:
  1913 ;;		On entry : 0/0
  1914 ;;		On exit  : 0/0
  1915 ;;		Unchanged: 0/0
  1916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1917 ;;      Params:         0       0       0       0       0       0       0
  1918 ;;      Locals:         0       0       0       0       0       0       0
  1919 ;;      Temps:          0       0       0       0       0       0       0
  1920 ;;      Totals:         0       0       0       0       0       0       0
  1921 ;;Total ram usage:        0 bytes
  1922 ;; Hardware stack levels used: 1
  1923 ;; Hardware stack levels required when called: 1
  1924 ;; This function calls:
  1925 ;;		Nothing
  1926 ;; This function is called by:
  1927 ;;		_fputc
  1928 ;; This function uses a non-reentrant model
  1929 ;;
  1930                           
  1931                           	psect	text8
  1932   00173A                     __ptext8:
  1933                           	callstack 0
  1934   00173A                     _putch:
  1935                           	callstack 25
  1936   00173A  0012               	return		;funcret
  1937   00173C                     __end_of_putch:
  1938                           	callstack 0
  1939                           
  1940 ;; *************** function _abs *****************
  1941 ;; Defined at:
  1942 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\abs.c"
  1943 ;; Parameters:    Size  Location     Type
  1944 ;;  a               2   20[COMRAM] int 
  1945 ;; Auto vars:     Size  Location     Type
  1946 ;;		None
  1947 ;; Return value:  Size  Location     Type
  1948 ;;                  2   20[COMRAM] int 
  1949 ;; Registers used:
  1950 ;;		wreg, status,2, status,0
  1951 ;; Tracked objects:
  1952 ;;		On entry : 0/0
  1953 ;;		On exit  : 0/0
  1954 ;;		Unchanged: 0/0
  1955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1956 ;;      Params:         2       0       0       0       0       0       0
  1957 ;;      Locals:         0       0       0       0       0       0       0
  1958 ;;      Temps:          2       0       0       0       0       0       0
  1959 ;;      Totals:         4       0       0       0       0       0       0
  1960 ;;Total ram usage:        4 bytes
  1961 ;; Hardware stack levels used: 1
  1962 ;; Hardware stack levels required when called: 1
  1963 ;; This function calls:
  1964 ;;		Nothing
  1965 ;; This function is called by:
  1966 ;;		_dtoa
  1967 ;; This function uses a non-reentrant model
  1968 ;;
  1969                           
  1970                           	psect	text9
  1971   001618                     __ptext9:
  1972                           	callstack 0
  1973   001618                     _abs:
  1974                           	callstack 25
  1975   001618  BE16               	btfsc	(abs@a+1)^0,7,c
  1976   00161A  EF19  F00B         	goto	u870
  1977   00161E  5016               	movf	(abs@a+1)^0,w,c
  1978   001620  E106               	bnz	u871
  1979   001622  0415               	decf	abs@a^0,w,c
  1980   001624  B0D8               	btfsc	status,0,c
  1981   001626  EF17  F00B         	goto	u871
  1982   00162A  EF19  F00B         	goto	u870
  1983   00162E                     u871:
  1984   00162E  EF27  F00B         	goto	l885
  1985   001632                     u870:
  1986   001632  C015  F017         	movff	abs@a,??_abs
  1987   001636  C016  F018         	movff	abs@a+1,??_abs+1
  1988   00163A  1E17               	comf	??_abs^0,f,c
  1989   00163C  1E18               	comf	(??_abs+1)^0,f,c
  1990   00163E  4A17               	infsnz	??_abs^0,f,c
  1991   001640  2A18               	incf	(??_abs+1)^0,f,c
  1992   001642  C017  F015         	movff	??_abs,?_abs
  1993   001646  C018  F016         	movff	??_abs+1,?_abs+1
  1994   00164A  EF2B  F00B         	goto	l888
  1995   00164E                     l885:
  1996   00164E  C015  F015         	movff	abs@a,?_abs
  1997   001652  C016  F016         	movff	abs@a+1,?_abs+1
  1998   001656                     l888:
  1999   001656  0012               	return		;funcret
  2000   001658                     __end_of_abs:
  2001                           	callstack 0
  2002                           
  2003 ;; *************** function ___aomod *****************
  2004 ;; Defined at:
  2005 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aomod.c"
  2006 ;; Parameters:    Size  Location     Type
  2007 ;;  dividend        8    2[COMRAM] long long 
  2008 ;;  divisor         8   10[COMRAM] long long 
  2009 ;; Auto vars:     Size  Location     Type
  2010 ;;  sign            1   19[COMRAM] unsigned char 
  2011 ;;  counter         1   18[COMRAM] unsigned char 
  2012 ;; Return value:  Size  Location     Type
  2013 ;;                  8    2[COMRAM] long long 
  2014 ;; Registers used:
  2015 ;;		wreg, status,2, status,0
  2016 ;; Tracked objects:
  2017 ;;		On entry : 0/0
  2018 ;;		On exit  : 0/0
  2019 ;;		Unchanged: 0/0
  2020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2021 ;;      Params:        16       0       0       0       0       0       0
  2022 ;;      Locals:         2       0       0       0       0       0       0
  2023 ;;      Temps:          0       0       0       0       0       0       0
  2024 ;;      Totals:        18       0       0       0       0       0       0
  2025 ;;Total ram usage:       18 bytes
  2026 ;; Hardware stack levels used: 1
  2027 ;; Hardware stack levels required when called: 1
  2028 ;; This function calls:
  2029 ;;		Nothing
  2030 ;; This function is called by:
  2031 ;;		_dtoa
  2032 ;; This function uses a non-reentrant model
  2033 ;;
  2034                           
  2035                           	psect	text10
  2036   000D04                     __ptext10:
  2037                           	callstack 0
  2038   000D04                     ___aomod:
  2039                           	callstack 25
  2040   000D04  0E00               	movlw	0
  2041   000D06  6E14               	movwf	___aomod@sign^0,c
  2042   000D08  BE0A               	btfsc	(___aomod@dividend+7)^0,7,c
  2043   000D0A  EF8B  F006         	goto	u770
  2044   000D0E  EF89  F006         	goto	u771
  2045   000D12                     u771:
  2046   000D12  EF9D  F006         	goto	l1542
  2047   000D16                     u770:
  2048   000D16  1E0A               	comf	(___aomod@dividend+7)^0,f,c
  2049   000D18  1E09               	comf	(___aomod@dividend+6)^0,f,c
  2050   000D1A  1E08               	comf	(___aomod@dividend+5)^0,f,c
  2051   000D1C  1E07               	comf	(___aomod@dividend+4)^0,f,c
  2052   000D1E  1E06               	comf	(___aomod@dividend+3)^0,f,c
  2053   000D20  1E05               	comf	(___aomod@dividend+2)^0,f,c
  2054   000D22  1E04               	comf	(___aomod@dividend+1)^0,f,c
  2055   000D24  6C03               	negf	___aomod@dividend^0,c
  2056   000D26  0E00               	movlw	0
  2057   000D28  2204               	addwfc	(___aomod@dividend+1)^0,f,c
  2058   000D2A  2205               	addwfc	(___aomod@dividend+2)^0,f,c
  2059   000D2C  2206               	addwfc	(___aomod@dividend+3)^0,f,c
  2060   000D2E  2207               	addwfc	(___aomod@dividend+4)^0,f,c
  2061   000D30  2208               	addwfc	(___aomod@dividend+5)^0,f,c
  2062   000D32  2209               	addwfc	(___aomod@dividend+6)^0,f,c
  2063   000D34  220A               	addwfc	(___aomod@dividend+7)^0,f,c
  2064   000D36  0E01               	movlw	1
  2065   000D38  6E14               	movwf	___aomod@sign^0,c
  2066   000D3A                     l1542:
  2067   000D3A  BE12               	btfsc	(___aomod@divisor+7)^0,7,c
  2068   000D3C  EFA4  F006         	goto	u780
  2069   000D40  EFA2  F006         	goto	u781
  2070   000D44                     u781:
  2071   000D44  EFB4  F006         	goto	l1546
  2072   000D48                     u780:
  2073   000D48  1E12               	comf	(___aomod@divisor+7)^0,f,c
  2074   000D4A  1E11               	comf	(___aomod@divisor+6)^0,f,c
  2075   000D4C  1E10               	comf	(___aomod@divisor+5)^0,f,c
  2076   000D4E  1E0F               	comf	(___aomod@divisor+4)^0,f,c
  2077   000D50  1E0E               	comf	(___aomod@divisor+3)^0,f,c
  2078   000D52  1E0D               	comf	(___aomod@divisor+2)^0,f,c
  2079   000D54  1E0C               	comf	(___aomod@divisor+1)^0,f,c
  2080   000D56  6C0B               	negf	___aomod@divisor^0,c
  2081   000D58  0E00               	movlw	0
  2082   000D5A  220C               	addwfc	(___aomod@divisor+1)^0,f,c
  2083   000D5C  220D               	addwfc	(___aomod@divisor+2)^0,f,c
  2084   000D5E  220E               	addwfc	(___aomod@divisor+3)^0,f,c
  2085   000D60  220F               	addwfc	(___aomod@divisor+4)^0,f,c
  2086   000D62  2210               	addwfc	(___aomod@divisor+5)^0,f,c
  2087   000D64  2211               	addwfc	(___aomod@divisor+6)^0,f,c
  2088   000D66  2212               	addwfc	(___aomod@divisor+7)^0,f,c
  2089   000D68                     l1546:
  2090   000D68  500B               	movf	___aomod@divisor^0,w,c
  2091   000D6A  100C               	iorwf	(___aomod@divisor+1)^0,w,c
  2092   000D6C  100D               	iorwf	(___aomod@divisor+2)^0,w,c
  2093   000D6E  100E               	iorwf	(___aomod@divisor+3)^0,w,c
  2094   000D70  100F               	iorwf	(___aomod@divisor+4)^0,w,c
  2095   000D72  1010               	iorwf	(___aomod@divisor+5)^0,w,c
  2096   000D74  1011               	iorwf	(___aomod@divisor+6)^0,w,c
  2097   000D76  1012               	iorwf	(___aomod@divisor+7)^0,w,c
  2098   000D78  B4D8               	btfsc	status,2,c
  2099   000D7A  EFC1  F006         	goto	u791
  2100   000D7E  EFC3  F006         	goto	u790
  2101   000D82                     u791:
  2102   000D82  EF0B  F007         	goto	l1562
  2103   000D86                     u790:
  2104   000D86  0E01               	movlw	1
  2105   000D88  6E13               	movwf	___aomod@counter^0,c
  2106   000D8A  EFD1  F006         	goto	l1552
  2107   000D8E                     l1550:
  2108   000D8E  90D8               	bcf	status,0,c
  2109   000D90  360B               	rlcf	___aomod@divisor^0,f,c
  2110   000D92  360C               	rlcf	(___aomod@divisor+1)^0,f,c
  2111   000D94  360D               	rlcf	(___aomod@divisor+2)^0,f,c
  2112   000D96  360E               	rlcf	(___aomod@divisor+3)^0,f,c
  2113   000D98  360F               	rlcf	(___aomod@divisor+4)^0,f,c
  2114   000D9A  3610               	rlcf	(___aomod@divisor+5)^0,f,c
  2115   000D9C  3611               	rlcf	(___aomod@divisor+6)^0,f,c
  2116   000D9E  3612               	rlcf	(___aomod@divisor+7)^0,f,c
  2117   000DA0  2A13               	incf	___aomod@counter^0,f,c
  2118   000DA2                     l1552:
  2119   000DA2  AE12               	btfss	(___aomod@divisor+7)^0,7,c
  2120   000DA4  EFD6  F006         	goto	u801
  2121   000DA8  EFD8  F006         	goto	u800
  2122   000DAC                     u801:
  2123   000DAC  EFC7  F006         	goto	l1550
  2124   000DB0                     u800:
  2125   000DB0                     l1554:
  2126   000DB0  500B               	movf	___aomod@divisor^0,w,c
  2127   000DB2  5C03               	subwf	___aomod@dividend^0,w,c
  2128   000DB4  500C               	movf	(___aomod@divisor+1)^0,w,c
  2129   000DB6  5804               	subwfb	(___aomod@dividend+1)^0,w,c
  2130   000DB8  500D               	movf	(___aomod@divisor+2)^0,w,c
  2131   000DBA  5805               	subwfb	(___aomod@dividend+2)^0,w,c
  2132   000DBC  500E               	movf	(___aomod@divisor+3)^0,w,c
  2133   000DBE  5806               	subwfb	(___aomod@dividend+3)^0,w,c
  2134   000DC0  500F               	movf	(___aomod@divisor+4)^0,w,c
  2135   000DC2  5807               	subwfb	(___aomod@dividend+4)^0,w,c
  2136   000DC4  5010               	movf	(___aomod@divisor+5)^0,w,c
  2137   000DC6  5808               	subwfb	(___aomod@dividend+5)^0,w,c
  2138   000DC8  5011               	movf	(___aomod@divisor+6)^0,w,c
  2139   000DCA  5809               	subwfb	(___aomod@dividend+6)^0,w,c
  2140   000DCC  5012               	movf	(___aomod@divisor+7)^0,w,c
  2141   000DCE  580A               	subwfb	(___aomod@dividend+7)^0,w,c
  2142   000DD0  A0D8               	btfss	status,0,c
  2143   000DD2  EFED  F006         	goto	u811
  2144   000DD6  EFEF  F006         	goto	u810
  2145   000DDA                     u811:
  2146   000DDA  EFFF  F006         	goto	l1558
  2147   000DDE                     u810:
  2148   000DDE  500B               	movf	___aomod@divisor^0,w,c
  2149   000DE0  5E03               	subwf	___aomod@dividend^0,f,c
  2150   000DE2  500C               	movf	(___aomod@divisor+1)^0,w,c
  2151   000DE4  5A04               	subwfb	(___aomod@dividend+1)^0,f,c
  2152   000DE6  500D               	movf	(___aomod@divisor+2)^0,w,c
  2153   000DE8  5A05               	subwfb	(___aomod@dividend+2)^0,f,c
  2154   000DEA  500E               	movf	(___aomod@divisor+3)^0,w,c
  2155   000DEC  5A06               	subwfb	(___aomod@dividend+3)^0,f,c
  2156   000DEE  500F               	movf	(___aomod@divisor+4)^0,w,c
  2157   000DF0  5A07               	subwfb	(___aomod@dividend+4)^0,f,c
  2158   000DF2  5010               	movf	(___aomod@divisor+5)^0,w,c
  2159   000DF4  5A08               	subwfb	(___aomod@dividend+5)^0,f,c
  2160   000DF6  5011               	movf	(___aomod@divisor+6)^0,w,c
  2161   000DF8  5A09               	subwfb	(___aomod@dividend+6)^0,f,c
  2162   000DFA  5012               	movf	(___aomod@divisor+7)^0,w,c
  2163   000DFC  5A0A               	subwfb	(___aomod@dividend+7)^0,f,c
  2164   000DFE                     l1558:
  2165   000DFE  90D8               	bcf	status,0,c
  2166   000E00  3212               	rrcf	(___aomod@divisor+7)^0,f,c
  2167   000E02  3211               	rrcf	(___aomod@divisor+6)^0,f,c
  2168   000E04  3210               	rrcf	(___aomod@divisor+5)^0,f,c
  2169   000E06  320F               	rrcf	(___aomod@divisor+4)^0,f,c
  2170   000E08  320E               	rrcf	(___aomod@divisor+3)^0,f,c
  2171   000E0A  320D               	rrcf	(___aomod@divisor+2)^0,f,c
  2172   000E0C  320C               	rrcf	(___aomod@divisor+1)^0,f,c
  2173   000E0E  320B               	rrcf	___aomod@divisor^0,f,c
  2174   000E10  2E13               	decfsz	___aomod@counter^0,f,c
  2175   000E12  EFD8  F006         	goto	l1554
  2176   000E16                     l1562:
  2177   000E16  5014               	movf	___aomod@sign^0,w,c
  2178   000E18  B4D8               	btfsc	status,2,c
  2179   000E1A  EF11  F007         	goto	u821
  2180   000E1E  EF13  F007         	goto	u820
  2181   000E22                     u821:
  2182   000E22  EF23  F007         	goto	l1566
  2183   000E26                     u820:
  2184   000E26  1E0A               	comf	(___aomod@dividend+7)^0,f,c
  2185   000E28  1E09               	comf	(___aomod@dividend+6)^0,f,c
  2186   000E2A  1E08               	comf	(___aomod@dividend+5)^0,f,c
  2187   000E2C  1E07               	comf	(___aomod@dividend+4)^0,f,c
  2188   000E2E  1E06               	comf	(___aomod@dividend+3)^0,f,c
  2189   000E30  1E05               	comf	(___aomod@dividend+2)^0,f,c
  2190   000E32  1E04               	comf	(___aomod@dividend+1)^0,f,c
  2191   000E34  6C03               	negf	___aomod@dividend^0,c
  2192   000E36  0E00               	movlw	0
  2193   000E38  2204               	addwfc	(___aomod@dividend+1)^0,f,c
  2194   000E3A  2205               	addwfc	(___aomod@dividend+2)^0,f,c
  2195   000E3C  2206               	addwfc	(___aomod@dividend+3)^0,f,c
  2196   000E3E  2207               	addwfc	(___aomod@dividend+4)^0,f,c
  2197   000E40  2208               	addwfc	(___aomod@dividend+5)^0,f,c
  2198   000E42  2209               	addwfc	(___aomod@dividend+6)^0,f,c
  2199   000E44  220A               	addwfc	(___aomod@dividend+7)^0,f,c
  2200   000E46                     l1566:
  2201   000E46  C003  F003         	movff	___aomod@dividend,?___aomod
  2202   000E4A  C004  F004         	movff	___aomod@dividend+1,?___aomod+1
  2203   000E4E  C005  F005         	movff	___aomod@dividend+2,?___aomod+2
  2204   000E52  C006  F006         	movff	___aomod@dividend+3,?___aomod+3
  2205   000E56  C007  F007         	movff	___aomod@dividend+4,?___aomod+4
  2206   000E5A  C008  F008         	movff	___aomod@dividend+5,?___aomod+5
  2207   000E5E  C009  F009         	movff	___aomod@dividend+6,?___aomod+6
  2208   000E62  C00A  F00A         	movff	___aomod@dividend+7,?___aomod+7
  2209   000E66  0012               	return		;funcret
  2210   000E68                     __end_of___aomod:
  2211                           	callstack 0
  2212                           
  2213 ;; *************** function ___aodiv *****************
  2214 ;; Defined at:
  2215 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\aodiv.c"
  2216 ;; Parameters:    Size  Location     Type
  2217 ;;  dividend        8    2[COMRAM] long long 
  2218 ;;  divisor         8   10[COMRAM] long long 
  2219 ;; Auto vars:     Size  Location     Type
  2220 ;;  quotient        8   20[COMRAM] long long 
  2221 ;;  sign            1   19[COMRAM] unsigned char 
  2222 ;;  counter         1   18[COMRAM] unsigned char 
  2223 ;; Return value:  Size  Location     Type
  2224 ;;                  8    2[COMRAM] long long 
  2225 ;; Registers used:
  2226 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2227 ;; Tracked objects:
  2228 ;;		On entry : 0/0
  2229 ;;		On exit  : 0/0
  2230 ;;		Unchanged: 0/0
  2231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2232 ;;      Params:        16       0       0       0       0       0       0
  2233 ;;      Locals:        10       0       0       0       0       0       0
  2234 ;;      Temps:          0       0       0       0       0       0       0
  2235 ;;      Totals:        26       0       0       0       0       0       0
  2236 ;;Total ram usage:       26 bytes
  2237 ;; Hardware stack levels used: 1
  2238 ;; Hardware stack levels required when called: 1
  2239 ;; This function calls:
  2240 ;;		Nothing
  2241 ;; This function is called by:
  2242 ;;		_dtoa
  2243 ;; This function uses a non-reentrant model
  2244 ;;
  2245                           
  2246                           	psect	text11
  2247   000B7C                     __ptext11:
  2248                           	callstack 0
  2249   000B7C                     ___aodiv:
  2250                           	callstack 25
  2251   000B7C  0E00               	movlw	0
  2252   000B7E  6E14               	movwf	___aodiv@sign^0,c
  2253   000B80  BE12               	btfsc	(___aodiv@divisor+7)^0,7,c
  2254   000B82  EFC7  F005         	goto	u700
  2255   000B86  EFC5  F005         	goto	u701
  2256   000B8A                     u701:
  2257   000B8A  EFD9  F005         	goto	l1498
  2258   000B8E                     u700:
  2259   000B8E  1E12               	comf	(___aodiv@divisor+7)^0,f,c
  2260   000B90  1E11               	comf	(___aodiv@divisor+6)^0,f,c
  2261   000B92  1E10               	comf	(___aodiv@divisor+5)^0,f,c
  2262   000B94  1E0F               	comf	(___aodiv@divisor+4)^0,f,c
  2263   000B96  1E0E               	comf	(___aodiv@divisor+3)^0,f,c
  2264   000B98  1E0D               	comf	(___aodiv@divisor+2)^0,f,c
  2265   000B9A  1E0C               	comf	(___aodiv@divisor+1)^0,f,c
  2266   000B9C  6C0B               	negf	___aodiv@divisor^0,c
  2267   000B9E  0E00               	movlw	0
  2268   000BA0  220C               	addwfc	(___aodiv@divisor+1)^0,f,c
  2269   000BA2  220D               	addwfc	(___aodiv@divisor+2)^0,f,c
  2270   000BA4  220E               	addwfc	(___aodiv@divisor+3)^0,f,c
  2271   000BA6  220F               	addwfc	(___aodiv@divisor+4)^0,f,c
  2272   000BA8  2210               	addwfc	(___aodiv@divisor+5)^0,f,c
  2273   000BAA  2211               	addwfc	(___aodiv@divisor+6)^0,f,c
  2274   000BAC  2212               	addwfc	(___aodiv@divisor+7)^0,f,c
  2275   000BAE  0E01               	movlw	1
  2276   000BB0  6E14               	movwf	___aodiv@sign^0,c
  2277   000BB2                     l1498:
  2278   000BB2  BE0A               	btfsc	(___aodiv@dividend+7)^0,7,c
  2279   000BB4  EFE0  F005         	goto	u710
  2280   000BB8  EFDE  F005         	goto	u711
  2281   000BBC                     u711:
  2282   000BBC  EFF2  F005         	goto	l1504
  2283   000BC0                     u710:
  2284   000BC0  1E0A               	comf	(___aodiv@dividend+7)^0,f,c
  2285   000BC2  1E09               	comf	(___aodiv@dividend+6)^0,f,c
  2286   000BC4  1E08               	comf	(___aodiv@dividend+5)^0,f,c
  2287   000BC6  1E07               	comf	(___aodiv@dividend+4)^0,f,c
  2288   000BC8  1E06               	comf	(___aodiv@dividend+3)^0,f,c
  2289   000BCA  1E05               	comf	(___aodiv@dividend+2)^0,f,c
  2290   000BCC  1E04               	comf	(___aodiv@dividend+1)^0,f,c
  2291   000BCE  6C03               	negf	___aodiv@dividend^0,c
  2292   000BD0  0E00               	movlw	0
  2293   000BD2  2204               	addwfc	(___aodiv@dividend+1)^0,f,c
  2294   000BD4  2205               	addwfc	(___aodiv@dividend+2)^0,f,c
  2295   000BD6  2206               	addwfc	(___aodiv@dividend+3)^0,f,c
  2296   000BD8  2207               	addwfc	(___aodiv@dividend+4)^0,f,c
  2297   000BDA  2208               	addwfc	(___aodiv@dividend+5)^0,f,c
  2298   000BDC  2209               	addwfc	(___aodiv@dividend+6)^0,f,c
  2299   000BDE  220A               	addwfc	(___aodiv@dividend+7)^0,f,c
  2300   000BE0  0E01               	movlw	1
  2301   000BE2  1A14               	xorwf	___aodiv@sign^0,f,c
  2302   000BE4                     l1504:
  2303   000BE4  EE20  F015         	lfsr	2,___aodiv@quotient
  2304   000BE8  0E07               	movlw	7
  2305   000BEA                     u721:
  2306   000BEA  6ADE               	clrf	postinc2,c
  2307   000BEC  06E8               	decf	wreg,f,c
  2308   000BEE  E2FD               	bc	u721
  2309   000BF0  500B               	movf	___aodiv@divisor^0,w,c
  2310   000BF2  100C               	iorwf	(___aodiv@divisor+1)^0,w,c
  2311   000BF4  100D               	iorwf	(___aodiv@divisor+2)^0,w,c
  2312   000BF6  100E               	iorwf	(___aodiv@divisor+3)^0,w,c
  2313   000BF8  100F               	iorwf	(___aodiv@divisor+4)^0,w,c
  2314   000BFA  1010               	iorwf	(___aodiv@divisor+5)^0,w,c
  2315   000BFC  1011               	iorwf	(___aodiv@divisor+6)^0,w,c
  2316   000BFE  1012               	iorwf	(___aodiv@divisor+7)^0,w,c
  2317   000C00  B4D8               	btfsc	status,2,c
  2318   000C02  EF05  F006         	goto	u731
  2319   000C06  EF07  F006         	goto	u730
  2320   000C0A                     u731:
  2321   000C0A  EF59  F006         	goto	l1526
  2322   000C0E                     u730:
  2323   000C0E  0E01               	movlw	1
  2324   000C10  6E13               	movwf	___aodiv@counter^0,c
  2325   000C12  EF15  F006         	goto	l1512
  2326   000C16                     l1510:
  2327   000C16  90D8               	bcf	status,0,c
  2328   000C18  360B               	rlcf	___aodiv@divisor^0,f,c
  2329   000C1A  360C               	rlcf	(___aodiv@divisor+1)^0,f,c
  2330   000C1C  360D               	rlcf	(___aodiv@divisor+2)^0,f,c
  2331   000C1E  360E               	rlcf	(___aodiv@divisor+3)^0,f,c
  2332   000C20  360F               	rlcf	(___aodiv@divisor+4)^0,f,c
  2333   000C22  3610               	rlcf	(___aodiv@divisor+5)^0,f,c
  2334   000C24  3611               	rlcf	(___aodiv@divisor+6)^0,f,c
  2335   000C26  3612               	rlcf	(___aodiv@divisor+7)^0,f,c
  2336   000C28  2A13               	incf	___aodiv@counter^0,f,c
  2337   000C2A                     l1512:
  2338   000C2A  AE12               	btfss	(___aodiv@divisor+7)^0,7,c
  2339   000C2C  EF1A  F006         	goto	u741
  2340   000C30  EF1C  F006         	goto	u740
  2341   000C34                     u741:
  2342   000C34  EF0B  F006         	goto	l1510
  2343   000C38                     u740:
  2344   000C38                     l1514:
  2345   000C38  90D8               	bcf	status,0,c
  2346   000C3A  3615               	rlcf	___aodiv@quotient^0,f,c
  2347   000C3C  3616               	rlcf	(___aodiv@quotient+1)^0,f,c
  2348   000C3E  3617               	rlcf	(___aodiv@quotient+2)^0,f,c
  2349   000C40  3618               	rlcf	(___aodiv@quotient+3)^0,f,c
  2350   000C42  3619               	rlcf	(___aodiv@quotient+4)^0,f,c
  2351   000C44  361A               	rlcf	(___aodiv@quotient+5)^0,f,c
  2352   000C46  361B               	rlcf	(___aodiv@quotient+6)^0,f,c
  2353   000C48  361C               	rlcf	(___aodiv@quotient+7)^0,f,c
  2354   000C4A  500B               	movf	___aodiv@divisor^0,w,c
  2355   000C4C  5C03               	subwf	___aodiv@dividend^0,w,c
  2356   000C4E  500C               	movf	(___aodiv@divisor+1)^0,w,c
  2357   000C50  5804               	subwfb	(___aodiv@dividend+1)^0,w,c
  2358   000C52  500D               	movf	(___aodiv@divisor+2)^0,w,c
  2359   000C54  5805               	subwfb	(___aodiv@dividend+2)^0,w,c
  2360   000C56  500E               	movf	(___aodiv@divisor+3)^0,w,c
  2361   000C58  5806               	subwfb	(___aodiv@dividend+3)^0,w,c
  2362   000C5A  500F               	movf	(___aodiv@divisor+4)^0,w,c
  2363   000C5C  5807               	subwfb	(___aodiv@dividend+4)^0,w,c
  2364   000C5E  5010               	movf	(___aodiv@divisor+5)^0,w,c
  2365   000C60  5808               	subwfb	(___aodiv@dividend+5)^0,w,c
  2366   000C62  5011               	movf	(___aodiv@divisor+6)^0,w,c
  2367   000C64  5809               	subwfb	(___aodiv@dividend+6)^0,w,c
  2368   000C66  5012               	movf	(___aodiv@divisor+7)^0,w,c
  2369   000C68  580A               	subwfb	(___aodiv@dividend+7)^0,w,c
  2370   000C6A  A0D8               	btfss	status,0,c
  2371   000C6C  EF3A  F006         	goto	u751
  2372   000C70  EF3C  F006         	goto	u750
  2373   000C74                     u751:
  2374   000C74  EF4D  F006         	goto	l1522
  2375   000C78                     u750:
  2376   000C78  500B               	movf	___aodiv@divisor^0,w,c
  2377   000C7A  5E03               	subwf	___aodiv@dividend^0,f,c
  2378   000C7C  500C               	movf	(___aodiv@divisor+1)^0,w,c
  2379   000C7E  5A04               	subwfb	(___aodiv@dividend+1)^0,f,c
  2380   000C80  500D               	movf	(___aodiv@divisor+2)^0,w,c
  2381   000C82  5A05               	subwfb	(___aodiv@dividend+2)^0,f,c
  2382   000C84  500E               	movf	(___aodiv@divisor+3)^0,w,c
  2383   000C86  5A06               	subwfb	(___aodiv@dividend+3)^0,f,c
  2384   000C88  500F               	movf	(___aodiv@divisor+4)^0,w,c
  2385   000C8A  5A07               	subwfb	(___aodiv@dividend+4)^0,f,c
  2386   000C8C  5010               	movf	(___aodiv@divisor+5)^0,w,c
  2387   000C8E  5A08               	subwfb	(___aodiv@dividend+5)^0,f,c
  2388   000C90  5011               	movf	(___aodiv@divisor+6)^0,w,c
  2389   000C92  5A09               	subwfb	(___aodiv@dividend+6)^0,f,c
  2390   000C94  5012               	movf	(___aodiv@divisor+7)^0,w,c
  2391   000C96  5A0A               	subwfb	(___aodiv@dividend+7)^0,f,c
  2392   000C98  8015               	bsf	___aodiv@quotient^0,0,c
  2393   000C9A                     l1522:
  2394   000C9A  90D8               	bcf	status,0,c
  2395   000C9C  3212               	rrcf	(___aodiv@divisor+7)^0,f,c
  2396   000C9E  3211               	rrcf	(___aodiv@divisor+6)^0,f,c
  2397   000CA0  3210               	rrcf	(___aodiv@divisor+5)^0,f,c
  2398   000CA2  320F               	rrcf	(___aodiv@divisor+4)^0,f,c
  2399   000CA4  320E               	rrcf	(___aodiv@divisor+3)^0,f,c
  2400   000CA6  320D               	rrcf	(___aodiv@divisor+2)^0,f,c
  2401   000CA8  320C               	rrcf	(___aodiv@divisor+1)^0,f,c
  2402   000CAA  320B               	rrcf	___aodiv@divisor^0,f,c
  2403   000CAC  2E13               	decfsz	___aodiv@counter^0,f,c
  2404   000CAE  EF1C  F006         	goto	l1514
  2405   000CB2                     l1526:
  2406   000CB2  5014               	movf	___aodiv@sign^0,w,c
  2407   000CB4  B4D8               	btfsc	status,2,c
  2408   000CB6  EF5F  F006         	goto	u761
  2409   000CBA  EF61  F006         	goto	u760
  2410   000CBE                     u761:
  2411   000CBE  EF71  F006         	goto	l1530
  2412   000CC2                     u760:
  2413   000CC2  1E1C               	comf	(___aodiv@quotient+7)^0,f,c
  2414   000CC4  1E1B               	comf	(___aodiv@quotient+6)^0,f,c
  2415   000CC6  1E1A               	comf	(___aodiv@quotient+5)^0,f,c
  2416   000CC8  1E19               	comf	(___aodiv@quotient+4)^0,f,c
  2417   000CCA  1E18               	comf	(___aodiv@quotient+3)^0,f,c
  2418   000CCC  1E17               	comf	(___aodiv@quotient+2)^0,f,c
  2419   000CCE  1E16               	comf	(___aodiv@quotient+1)^0,f,c
  2420   000CD0  6C15               	negf	___aodiv@quotient^0,c
  2421   000CD2  0E00               	movlw	0
  2422   000CD4  2216               	addwfc	(___aodiv@quotient+1)^0,f,c
  2423   000CD6  2217               	addwfc	(___aodiv@quotient+2)^0,f,c
  2424   000CD8  2218               	addwfc	(___aodiv@quotient+3)^0,f,c
  2425   000CDA  2219               	addwfc	(___aodiv@quotient+4)^0,f,c
  2426   000CDC  221A               	addwfc	(___aodiv@quotient+5)^0,f,c
  2427   000CDE  221B               	addwfc	(___aodiv@quotient+6)^0,f,c
  2428   000CE0  221C               	addwfc	(___aodiv@quotient+7)^0,f,c
  2429   000CE2                     l1530:
  2430   000CE2  C015  F003         	movff	___aodiv@quotient,?___aodiv
  2431   000CE6  C016  F004         	movff	___aodiv@quotient+1,?___aodiv+1
  2432   000CEA  C017  F005         	movff	___aodiv@quotient+2,?___aodiv+2
  2433   000CEE  C018  F006         	movff	___aodiv@quotient+3,?___aodiv+3
  2434   000CF2  C019  F007         	movff	___aodiv@quotient+4,?___aodiv+4
  2435   000CF6  C01A  F008         	movff	___aodiv@quotient+5,?___aodiv+5
  2436   000CFA  C01B  F009         	movff	___aodiv@quotient+6,?___aodiv+6
  2437   000CFE  C01C  F00A         	movff	___aodiv@quotient+7,?___aodiv+7
  2438   000D02  0012               	return		;funcret
  2439   000D04                     __end_of___aodiv:
  2440                           	callstack 0
  2441                           
  2442 ;; *************** function _atoi *****************
  2443 ;; Defined at:
  2444 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\atoi.c"
  2445 ;; Parameters:    Size  Location     Type
  2446 ;;  s               2    8[COMRAM] PTR const unsigned char 
  2447 ;;		 -> STR_3(6), 
  2448 ;; Auto vars:     Size  Location     Type
  2449 ;;  n               2   15[COMRAM] int 
  2450 ;;  neg             2   13[COMRAM] int 
  2451 ;; Return value:  Size  Location     Type
  2452 ;;                  2    8[COMRAM] int 
  2453 ;; Registers used:
  2454 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2455 ;; Tracked objects:
  2456 ;;		On entry : 0/0
  2457 ;;		On exit  : 0/0
  2458 ;;		Unchanged: 0/0
  2459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2460 ;;      Params:         2       0       0       0       0       0       0
  2461 ;;      Locals:         4       0       0       0       0       0       0
  2462 ;;      Temps:          3       0       0       0       0       0       0
  2463 ;;      Totals:         9       0       0       0       0       0       0
  2464 ;;Total ram usage:        9 bytes
  2465 ;; Hardware stack levels used: 1
  2466 ;; Hardware stack levels required when called: 2
  2467 ;; This function calls:
  2468 ;;		___wmul
  2469 ;;		_isdigit
  2470 ;;		_isspace
  2471 ;; This function is called by:
  2472 ;;		_vfpfcnvrt
  2473 ;; This function uses a non-reentrant model
  2474 ;;
  2475                           
  2476                           	psect	text12
  2477   000E68                     __ptext12:
  2478                           	callstack 0
  2479   000E68                     _atoi:
  2480                           	callstack 25
  2481   000E68  0E00               	movlw	0
  2482   000E6A  6E11               	movwf	(atoi@n+1)^0,c
  2483   000E6C  0E00               	movlw	0
  2484   000E6E  6E10               	movwf	atoi@n^0,c
  2485   000E70  0E00               	movlw	0
  2486   000E72  6E0F               	movwf	(atoi@neg+1)^0,c
  2487   000E74  0E00               	movlw	0
  2488   000E76  6E0E               	movwf	atoi@neg^0,c
  2489   000E78  EF40  F007         	goto	l1686
  2490   000E7C                     l1682:
  2491   000E7C  4A09               	infsnz	atoi@s^0,f,c
  2492   000E7E  2A0A               	incf	(atoi@s+1)^0,f,c
  2493   000E80                     l1686:
  2494   000E80  C009  FFF6         	movff	atoi@s,tblptrl
  2495   000E84  C00A  FFF7         	movff	atoi@s+1,tblptrh
  2496   000E88                     	if	0	;tblptru may be non-zero
  2497   000E88                     	endif
  2498   000E88                     	if	0	;tblptru may be non-zero
  2499   000E88                     	endif
  2500   000E88  0008               	tblrd		*
  2501   000E8A  50F5               	movf	tablat,w,c
  2502   000E8C  0A20               	xorlw	32
  2503   000E8E  B4D8               	btfsc	status,2,c
  2504   000E90  EF4C  F007         	goto	u1061
  2505   000E94  EF4E  F007         	goto	u1060
  2506   000E98                     u1061:
  2507   000E98  EF3E  F007         	goto	l1682
  2508   000E9C                     u1060:
  2509   000E9C  C009  FFF6         	movff	atoi@s,tblptrl
  2510   000EA0  C00A  FFF7         	movff	atoi@s+1,tblptrh
  2511   000EA4                     	if	0	;tblptru may be non-zero
  2512   000EA4                     	endif
  2513   000EA4                     	if	0	;tblptru may be non-zero
  2514   000EA4                     	endif
  2515   000EA4  0008               	tblrd		*
  2516   000EA6  CFF5 F00B          	movff	tablat,??_atoi
  2517   000EAA  0EF7               	movlw	247
  2518   000EAC  240B               	addwf	??_atoi^0,w,c
  2519   000EAE  6E0C               	movwf	(??_atoi+1)^0,c
  2520   000EB0  6A0D               	clrf	(??_atoi+2)^0,c
  2521   000EB2  0EFF               	movlw	255
  2522   000EB4  220D               	addwfc	(??_atoi+2)^0,f,c
  2523   000EB6  500D               	movf	(??_atoi+2)^0,w,c
  2524   000EB8  E109               	bnz	u1070
  2525   000EBA  0E05               	movlw	5
  2526   000EBC  5C0C               	subwf	(??_atoi+1)^0,w,c
  2527   000EBE  A0D8               	btfss	status,0,c
  2528   000EC0  EF64  F007         	goto	u1071
  2529   000EC4  EF66  F007         	goto	u1070
  2530   000EC8                     u1071:
  2531   000EC8  EF3E  F007         	goto	l1682
  2532   000ECC                     u1070:
  2533   000ECC  EF70  F007         	goto	l1694
  2534   000ED0                     l1690:
  2535   000ED0  0E00               	movlw	0
  2536   000ED2  6E0F               	movwf	(atoi@neg+1)^0,c
  2537   000ED4  0E01               	movlw	1
  2538   000ED6  6E0E               	movwf	atoi@neg^0,c
  2539   000ED8                     l1692:
  2540   000ED8  4A09               	infsnz	atoi@s^0,f,c
  2541   000EDA  2A0A               	incf	(atoi@s+1)^0,f,c
  2542   000EDC  EFA5  F007         	goto	l1702
  2543   000EE0                     l1694:
  2544   000EE0  C009  FFF6         	movff	atoi@s,tblptrl
  2545   000EE4  C00A  FFF7         	movff	atoi@s+1,tblptrh
  2546   000EE8                     	if	0	;tblptru may be non-zero
  2547   000EE8                     	endif
  2548   000EE8                     	if	0	;tblptru may be non-zero
  2549   000EE8                     	endif
  2550   000EE8  0008               	tblrd		*
  2551   000EEA  50F5               	movf	tablat,w,c
  2552   000EEC  6E0B               	movwf	??_atoi^0,c
  2553   000EEE  6A0C               	clrf	(??_atoi+1)^0,c
  2554                           
  2555                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2556                           ; Switch size 1, requested type "simple"
  2557                           ; Number of cases is 1, Range of values is 0 to 0
  2558                           ; switch strategies available:
  2559                           ; Name         Instructions Cycles
  2560                           ; simple_byte            4     3 (average)
  2561                           ;	Chosen strategy is simple_byte
  2562   000EF0  500C               	movf	(??_atoi+1)^0,w,c
  2563   000EF2  0A00               	xorlw	0	; case 0
  2564   000EF4  B4D8               	btfsc	status,2,c
  2565   000EF6  EF7F  F007         	goto	l1992
  2566   000EFA  EFA5  F007         	goto	l1702
  2567   000EFE                     l1992:
  2568                           
  2569                           ; Switch size 1, requested type "simple"
  2570                           ; Number of cases is 2, Range of values is 43 to 45
  2571                           ; switch strategies available:
  2572                           ; Name         Instructions Cycles
  2573                           ; simple_byte            7     4 (average)
  2574                           ;	Chosen strategy is simple_byte
  2575   000EFE  500B               	movf	??_atoi^0,w,c
  2576   000F00  0A2B               	xorlw	43	; case 43
  2577   000F02  B4D8               	btfsc	status,2,c
  2578   000F04  EF6C  F007         	goto	l1692
  2579   000F08  0A06               	xorlw	6	; case 45
  2580   000F0A  B4D8               	btfsc	status,2,c
  2581   000F0C  EF68  F007         	goto	l1690
  2582   000F10  EFA5  F007         	goto	l1702
  2583   000F14                     l1696:
  2584   000F14  C010  F003         	movff	atoi@n,___wmul@multiplier
  2585   000F18  C011  F004         	movff	atoi@n+1,___wmul@multiplier+1
  2586   000F1C  0E00               	movlw	0
  2587   000F1E  6E06               	movwf	(___wmul@multiplicand+1)^0,c
  2588   000F20  0E0A               	movlw	10
  2589   000F22  6E05               	movwf	___wmul@multiplicand^0,c
  2590   000F24  EC55  F00B         	call	___wmul	;wreg free
  2591   000F28  C009  FFF6         	movff	atoi@s,tblptrl
  2592   000F2C  C00A  FFF7         	movff	atoi@s+1,tblptrh
  2593   000F30                     	if	0	;tblptru may be non-zero
  2594   000F30                     	endif
  2595   000F30                     	if	0	;tblptru may be non-zero
  2596   000F30                     	endif
  2597   000F30  0008               	tblrd		*
  2598   000F32  50F5               	movf	tablat,w,c
  2599   000F34  5E03               	subwf	?___wmul^0,f,c
  2600   000F36  0E00               	movlw	0
  2601   000F38  5A04               	subwfb	(?___wmul+1)^0,f,c
  2602   000F3A  0E30               	movlw	48
  2603   000F3C  2403               	addwf	?___wmul^0,w,c
  2604   000F3E  6E10               	movwf	atoi@n^0,c
  2605   000F40  0E00               	movlw	0
  2606   000F42  2004               	addwfc	(?___wmul+1)^0,w,c
  2607   000F44  6E11               	movwf	(atoi@n+1)^0,c
  2608   000F46  EF6C  F007         	goto	l1692
  2609   000F4A                     l1702:
  2610   000F4A  C009  FFF6         	movff	atoi@s,tblptrl
  2611   000F4E  C00A  FFF7         	movff	atoi@s+1,tblptrh
  2612   000F52                     	if	0	;tblptru may be non-zero
  2613   000F52                     	endif
  2614   000F52                     	if	0	;tblptru may be non-zero
  2615   000F52                     	endif
  2616   000F52  0008               	tblrd		*
  2617   000F54  CFF5 F00B          	movff	tablat,??_atoi
  2618   000F58  0ED0               	movlw	208
  2619   000F5A  240B               	addwf	??_atoi^0,w,c
  2620   000F5C  6E0C               	movwf	(??_atoi+1)^0,c
  2621   000F5E  6A0D               	clrf	(??_atoi+2)^0,c
  2622   000F60  0EFF               	movlw	255
  2623   000F62  220D               	addwfc	(??_atoi+2)^0,f,c
  2624   000F64  500D               	movf	(??_atoi+2)^0,w,c
  2625   000F66  E109               	bnz	u1080
  2626   000F68  0E0A               	movlw	10
  2627   000F6A  5C0C               	subwf	(??_atoi+1)^0,w,c
  2628   000F6C  A0D8               	btfss	status,0,c
  2629   000F6E  EFBB  F007         	goto	u1081
  2630   000F72  EFBD  F007         	goto	u1080
  2631   000F76                     u1081:
  2632   000F76  EF8A  F007         	goto	l1696
  2633   000F7A                     u1080:
  2634   000F7A  500E               	movf	atoi@neg^0,w,c
  2635   000F7C  100F               	iorwf	(atoi@neg+1)^0,w,c
  2636   000F7E  A4D8               	btfss	status,2,c
  2637   000F80  EFC4  F007         	goto	u1091
  2638   000F84  EFC6  F007         	goto	u1090
  2639   000F88                     u1091:
  2640   000F88  EFD4  F007         	goto	l910
  2641   000F8C                     u1090:
  2642   000F8C  C010  F00B         	movff	atoi@n,??_atoi
  2643   000F90  C011  F00C         	movff	atoi@n+1,??_atoi+1
  2644   000F94  1E0B               	comf	??_atoi^0,f,c
  2645   000F96  1E0C               	comf	(??_atoi+1)^0,f,c
  2646   000F98  4A0B               	infsnz	??_atoi^0,f,c
  2647   000F9A  2A0C               	incf	(??_atoi+1)^0,f,c
  2648   000F9C  C00B  F009         	movff	??_atoi,?_atoi
  2649   000FA0  C00C  F00A         	movff	??_atoi+1,?_atoi+1
  2650   000FA4  EFD8  F007         	goto	l913
  2651   000FA8                     l910:
  2652   000FA8  C010  F009         	movff	atoi@n,?_atoi
  2653   000FAC  C011  F00A         	movff	atoi@n+1,?_atoi+1
  2654   000FB0                     l913:
  2655   000FB0  0012               	return		;funcret
  2656   000FB2                     __end_of_atoi:
  2657                           	callstack 0
  2658                           
  2659 ;; *************** function _isspace *****************
  2660 ;; Defined at:
  2661 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\isspace.c"
  2662 ;; Parameters:    Size  Location     Type
  2663 ;;  c               2    2[COMRAM] int 
  2664 ;; Auto vars:     Size  Location     Type
  2665 ;;		None
  2666 ;; Return value:  Size  Location     Type
  2667 ;;                  2    2[COMRAM] int 
  2668 ;; Registers used:
  2669 ;;		wreg, status,2, status,0
  2670 ;; Tracked objects:
  2671 ;;		On entry : 0/0
  2672 ;;		On exit  : 0/0
  2673 ;;		Unchanged: 0/0
  2674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2675 ;;      Params:         2       0       0       0       0       0       0
  2676 ;;      Locals:         1       0       0       0       0       0       0
  2677 ;;      Temps:          2       0       0       0       0       0       0
  2678 ;;      Totals:         5       0       0       0       0       0       0
  2679 ;;Total ram usage:        5 bytes
  2680 ;; Hardware stack levels used: 1
  2681 ;; Hardware stack levels required when called: 1
  2682 ;; This function calls:
  2683 ;;		Nothing
  2684 ;; This function is called by:
  2685 ;;		_atoi
  2686 ;; This function uses a non-reentrant model
  2687 ;;
  2688                           
  2689                           	psect	text13
  2690   00158E                     __ptext13:
  2691                           	callstack 0
  2692   00158E                     _isspace:
  2693                           	callstack 25
  2694   00158E  0E01               	movlw	1
  2695   001590  6E07               	movwf	_isspace$994^0,c
  2696   001592  0E20               	movlw	32
  2697   001594  1803               	xorwf	isspace@c^0,w,c
  2698   001596  1004               	iorwf	(isspace@c+1)^0,w,c
  2699   001598  B4D8               	btfsc	status,2,c
  2700   00159A  EFD1  F00A         	goto	u901
  2701   00159E  EFD3  F00A         	goto	u900
  2702   0015A2                     u901:
  2703   0015A2  EFE6  F00A         	goto	l1604
  2704   0015A6                     u900:
  2705   0015A6  0EF7               	movlw	247
  2706   0015A8  2403               	addwf	isspace@c^0,w,c
  2707   0015AA  6E05               	movwf	??_isspace^0,c
  2708   0015AC  0EFF               	movlw	255
  2709   0015AE  2004               	addwfc	(isspace@c+1)^0,w,c
  2710   0015B0  6E06               	movwf	(??_isspace+1)^0,c
  2711   0015B2  5006               	movf	(??_isspace+1)^0,w,c
  2712   0015B4  E109               	bnz	u910
  2713   0015B6  0E05               	movlw	5
  2714   0015B8  5C05               	subwf	??_isspace^0,w,c
  2715   0015BA  A0D8               	btfss	status,0,c
  2716   0015BC  EFE2  F00A         	goto	u911
  2717   0015C0  EFE4  F00A         	goto	u910
  2718   0015C4                     u911:
  2719   0015C4  EFE6  F00A         	goto	l1604
  2720   0015C8                     u910:
  2721   0015C8  0E00               	movlw	0
  2722   0015CA  6E07               	movwf	_isspace$994^0,c
  2723   0015CC                     l1604:
  2724   0015CC  C007  F003         	movff	_isspace$994,?_isspace
  2725   0015D0  6A04               	clrf	(?_isspace+1)^0,c
  2726   0015D2  0012               	return		;funcret
  2727   0015D4                     __end_of_isspace:
  2728                           	callstack 0
  2729                           
  2730 ;; *************** function _isdigit *****************
  2731 ;; Defined at:
  2732 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\isdigit.c"
  2733 ;; Parameters:    Size  Location     Type
  2734 ;;  c               2    2[COMRAM] int 
  2735 ;; Auto vars:     Size  Location     Type
  2736 ;;		None
  2737 ;; Return value:  Size  Location     Type
  2738 ;;                  2    2[COMRAM] int 
  2739 ;; Registers used:
  2740 ;;		wreg, status,2, status,0
  2741 ;; Tracked objects:
  2742 ;;		On entry : 0/0
  2743 ;;		On exit  : 0/0
  2744 ;;		Unchanged: 0/0
  2745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2746 ;;      Params:         2       0       0       0       0       0       0
  2747 ;;      Locals:         0       0       0       0       0       0       0
  2748 ;;      Temps:          2       0       0       0       0       0       0
  2749 ;;      Totals:         4       0       0       0       0       0       0
  2750 ;;Total ram usage:        4 bytes
  2751 ;; Hardware stack levels used: 1
  2752 ;; Hardware stack levels required when called: 1
  2753 ;; This function calls:
  2754 ;;		Nothing
  2755 ;; This function is called by:
  2756 ;;		_vfpfcnvrt
  2757 ;;		_atoi
  2758 ;; This function uses a non-reentrant model
  2759 ;;
  2760                           
  2761                           	psect	text14
  2762   001658                     __ptext14:
  2763                           	callstack 0
  2764   001658                     _isdigit:
  2765                           	callstack 26
  2766   001658  0ED0               	movlw	208
  2767   00165A  2403               	addwf	isdigit@c^0,w,c
  2768   00165C  6E05               	movwf	??_isdigit^0,c
  2769   00165E  0EFF               	movlw	255
  2770   001660  2004               	addwfc	(isdigit@c+1)^0,w,c
  2771   001662  6E06               	movwf	(??_isdigit+1)^0,c
  2772   001664  5006               	movf	(??_isdigit+1)^0,w,c
  2773   001666  E10A               	bnz	u880
  2774   001668  0E0A               	movlw	10
  2775   00166A  5C05               	subwf	??_isdigit^0,w,c
  2776   00166C  A0D8               	btfss	status,0,c
  2777   00166E  EF3B  F00B         	goto	u881
  2778   001672  EF3E  F00B         	goto	u880
  2779   001676                     u881:
  2780   001676  0E01               	movlw	1
  2781   001678  EF3F  F00B         	goto	u890
  2782   00167C                     u880:
  2783   00167C  0E00               	movlw	0
  2784   00167E                     u890:
  2785   00167E  6E03               	movwf	?_isdigit^0,c
  2786   001680  6A04               	clrf	(?_isdigit+1)^0,c
  2787   001682  0012               	return		;funcret
  2788   001684                     __end_of_isdigit:
  2789                           	callstack 0
  2790                           
  2791 ;; *************** function ___wmul *****************
  2792 ;; Defined at:
  2793 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  2794 ;; Parameters:    Size  Location     Type
  2795 ;;  multiplier      2    2[COMRAM] unsigned int 
  2796 ;;  multiplicand    2    4[COMRAM] unsigned int 
  2797 ;; Auto vars:     Size  Location     Type
  2798 ;;  product         2    6[COMRAM] unsigned int 
  2799 ;; Return value:  Size  Location     Type
  2800 ;;                  2    2[COMRAM] unsigned int 
  2801 ;; Registers used:
  2802 ;;		wreg, status,2, status,0, prodl, prodh
  2803 ;; Tracked objects:
  2804 ;;		On entry : 0/0
  2805 ;;		On exit  : 0/0
  2806 ;;		Unchanged: 0/0
  2807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2808 ;;      Params:         4       0       0       0       0       0       0
  2809 ;;      Locals:         2       0       0       0       0       0       0
  2810 ;;      Temps:          0       0       0       0       0       0       0
  2811 ;;      Totals:         6       0       0       0       0       0       0
  2812 ;;Total ram usage:        6 bytes
  2813 ;; Hardware stack levels used: 1
  2814 ;; Hardware stack levels required when called: 1
  2815 ;; This function calls:
  2816 ;;		Nothing
  2817 ;; This function is called by:
  2818 ;;		_atoi
  2819 ;; This function uses a non-reentrant model
  2820 ;;
  2821                           
  2822                           	psect	text15
  2823   0016AA                     __ptext15:
  2824                           	callstack 0
  2825   0016AA                     ___wmul:
  2826                           	callstack 25
  2827   0016AA  5003               	movf	___wmul@multiplier^0,w,c
  2828   0016AC  0205               	mulwf	___wmul@multiplicand^0,c
  2829   0016AE  CFF3 F007          	movff	prodl,___wmul@product
  2830   0016B2  CFF4 F008          	movff	prodh,___wmul@product+1
  2831   0016B6  5003               	movf	___wmul@multiplier^0,w,c
  2832   0016B8  0206               	mulwf	(___wmul@multiplicand+1)^0,c
  2833   0016BA  50F3               	movf	243,w,c
  2834   0016BC  2608               	addwf	(___wmul@product+1)^0,f,c
  2835   0016BE  5004               	movf	(___wmul@multiplier+1)^0,w,c
  2836   0016C0  0205               	mulwf	___wmul@multiplicand^0,c
  2837   0016C2  50F3               	movf	243,w,c
  2838   0016C4  2608               	addwf	(___wmul@product+1)^0,f,c
  2839   0016C6  C007  F003         	movff	___wmul@product,?___wmul
  2840   0016CA  C008  F004         	movff	___wmul@product+1,?___wmul+1
  2841   0016CE  0012               	return		;funcret
  2842   0016D0                     __end_of___wmul:
  2843                           	callstack 0
  2844                           
  2845 ;; *************** function _lcd_write *****************
  2846 ;; Defined at:
  2847 ;;		line 77 in file "LCD4b_EXSTO.c"
  2848 ;; Parameters:    Size  Location     Type
  2849 ;;  lin             1    wreg     unsigned char 
  2850 ;;  col             1    8[COMRAM] unsigned char 
  2851 ;;  str             2    9[COMRAM] PTR unsigned char 
  2852 ;;		 -> STR_5(16), STR_4(16), BufferLCD(16), STR_2(9), 
  2853 ;;		 -> STR_1(12), 
  2854 ;; Auto vars:     Size  Location     Type
  2855 ;;  lin             1   12[COMRAM] unsigned char 
  2856 ;;  end             1   11[COMRAM] unsigned char 
  2857 ;; Return value:  Size  Location     Type
  2858 ;;                  1    wreg      void 
  2859 ;; Registers used:
  2860 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2861 ;; Tracked objects:
  2862 ;;		On entry : 0/0
  2863 ;;		On exit  : 0/0
  2864 ;;		Unchanged: 0/0
  2865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2866 ;;      Params:         3       0       0       0       0       0       0
  2867 ;;      Locals:         2       0       0       0       0       0       0
  2868 ;;      Temps:          0       0       0       0       0       0       0
  2869 ;;      Totals:         5       0       0       0       0       0       0
  2870 ;;Total ram usage:        5 bytes
  2871 ;; Hardware stack levels used: 1
  2872 ;; Hardware stack levels required when called: 4
  2873 ;; This function calls:
  2874 ;;		_lcd_send_byte
  2875 ;; This function is called by:
  2876 ;;		_main
  2877 ;;		_lcd_clear
  2878 ;; This function uses a non-reentrant model
  2879 ;;
  2880                           
  2881                           	psect	text16
  2882   001332                     __ptext16:
  2883                           	callstack 0
  2884   001332                     _lcd_write:
  2885                           	callstack 26
  2886                           
  2887                           ;incstack = 0
  2888                           ;lcd_write@lin stored from wreg
  2889   001332  6E0D               	movwf	lcd_write@lin^0,c
  2890   001334                     
  2891                           ;LCD4b_EXSTO.c: 77: void lcd_write(char lin, char col, char *str);LCD4b_EXSTO.c: 78: {;L
      +                          CD4b_EXSTO.c: 79:     char end;;LCD4b_EXSTO.c: 81:     if(lin == 1)
  2892   001334  040D               	decf	lcd_write@lin^0,w,c
  2893   001336  A4D8               	btfss	status,2,c
  2894   001338  EFA0  F009         	goto	u1201
  2895   00133C  EFA2  F009         	goto	u1200
  2896   001340                     u1201:
  2897   001340  EFA7  F009         	goto	l1870
  2898   001344                     u1200:
  2899   001344                     
  2900                           ;LCD4b_EXSTO.c: 82:     {;LCD4b_EXSTO.c: 83:         end = col + 0X80 - 1;
  2901   001344  5009               	movf	lcd_write@col^0,w,c
  2902   001346  0F7F               	addlw	127
  2903   001348  6E0C               	movwf	lcd_write@end^0,c
  2904                           
  2905                           ;LCD4b_EXSTO.c: 84:     }
  2906   00134A  EFB3  F009         	goto	l1874
  2907   00134E                     l1870:
  2908   00134E  0E02               	movlw	2
  2909   001350  180D               	xorwf	lcd_write@lin^0,w,c
  2910   001352  A4D8               	btfss	status,2,c
  2911   001354  EFAE  F009         	goto	u1211
  2912   001358  EFB0  F009         	goto	u1210
  2913   00135C                     u1211:
  2914   00135C  EFB3  F009         	goto	l1874
  2915   001360                     u1210:
  2916   001360                     
  2917                           ;LCD4b_EXSTO.c: 86:     {;LCD4b_EXSTO.c: 87:         end = col + 0xC0 - 1;
  2918   001360  5009               	movf	lcd_write@col^0,w,c
  2919   001362  0FBF               	addlw	191
  2920   001364  6E0C               	movwf	lcd_write@end^0,c
  2921   001366                     l1874:
  2922                           
  2923                           ;LCD4b_EXSTO.c: 89:     lcd_send_byte(0,end);
  2924   001366  C00C  F007         	movff	lcd_write@end,lcd_send_byte@data
  2925   00136A  0E00               	movlw	0
  2926   00136C  EC78  F00B         	call	_lcd_send_byte
  2927                           
  2928                           ;LCD4b_EXSTO.c: 91:     while(*str)
  2929   001370  EFD0  F009         	goto	l1880
  2930   001374                     l1876:
  2931                           
  2932                           ;LCD4b_EXSTO.c: 92:     {;LCD4b_EXSTO.c: 93:         lcd_send_byte(1,*str);
  2933   001374  C00A  FFF6         	movff	lcd_write@str,tblptrl
  2934   001378  C00B  FFF7         	movff	lcd_write@str+1,tblptrh
  2935   00137C  6AF8               	clrf	tblptru,c
  2936   00137E  0E05               	movlw	(high __ramtop+-1)
  2937   001380  64F7               	cpfsgt	tblptrh,c
  2938   001382  D003               	bra	u1227
  2939   001384  0008               	tblrd		*
  2940   001386  50F5               	movf	tablat,w,c
  2941   001388  D005               	bra	u1220
  2942   00138A                     u1227:
  2943   00138A  CFF6 FFE1          	movff	tblptrl,fsr1l
  2944   00138E  CFF7 FFE2          	movff	tblptrh,fsr1h
  2945   001392  50E7               	movf	indf1,w,c
  2946   001394                     u1220:
  2947   001394  6E07               	movwf	lcd_send_byte@data^0,c
  2948   001396  0E01               	movlw	1
  2949   001398  EC78  F00B         	call	_lcd_send_byte
  2950   00139C                     
  2951                           ;LCD4b_EXSTO.c: 94:         str++;
  2952   00139C  4A0A               	infsnz	lcd_write@str^0,f,c
  2953   00139E  2A0B               	incf	(lcd_write@str+1)^0,f,c
  2954   0013A0                     l1880:
  2955                           
  2956                           ;LCD4b_EXSTO.c: 91:     while(*str)
  2957   0013A0  C00A  FFF6         	movff	lcd_write@str,tblptrl
  2958   0013A4  C00B  FFF7         	movff	lcd_write@str+1,tblptrh
  2959   0013A8  6AF8               	clrf	tblptru,c
  2960   0013AA  0E05               	movlw	(high __ramtop+-1)
  2961   0013AC  64F7               	cpfsgt	tblptrh,c
  2962   0013AE  D003               	bra	u1237
  2963   0013B0  0008               	tblrd		*
  2964   0013B2  50F5               	movf	tablat,w,c
  2965   0013B4  D005               	bra	u1230
  2966   0013B6                     u1237:
  2967   0013B6  CFF6 FFE1          	movff	tblptrl,fsr1l
  2968   0013BA  CFF7 FFE2          	movff	tblptrh,fsr1h
  2969   0013BE  50E7               	movf	indf1,w,c
  2970   0013C0                     u1230:
  2971   0013C0  0900               	iorlw	0
  2972   0013C2  A4D8               	btfss	status,2,c
  2973   0013C4  EFE6  F009         	goto	u1241
  2974   0013C8  EFE8  F009         	goto	u1240
  2975   0013CC                     u1241:
  2976   0013CC  EFBA  F009         	goto	l1876
  2977   0013D0                     u1240:
  2978   0013D0  0012               	return		;funcret
  2979   0013D2                     __end_of_lcd_write:
  2980                           	callstack 0
  2981                           
  2982 ;; *************** function _lcd_send_byte *****************
  2983 ;; Defined at:
  2984 ;;		line 63 in file "LCD4b_EXSTO.c"
  2985 ;; Parameters:    Size  Location     Type
  2986 ;;  level           1    wreg     unsigned char 
  2987 ;;  data            1    6[COMRAM] unsigned char 
  2988 ;; Auto vars:     Size  Location     Type
  2989 ;;  level           1    7[COMRAM] unsigned char 
  2990 ;; Return value:  Size  Location     Type
  2991 ;;                  1    wreg      void 
  2992 ;; Registers used:
  2993 ;;		wreg, status,2, status,0, cstack
  2994 ;; Tracked objects:
  2995 ;;		On entry : 0/0
  2996 ;;		On exit  : 0/0
  2997 ;;		Unchanged: 0/0
  2998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2999 ;;      Params:         1       0       0       0       0       0       0
  3000 ;;      Locals:         1       0       0       0       0       0       0
  3001 ;;      Temps:          0       0       0       0       0       0       0
  3002 ;;      Totals:         2       0       0       0       0       0       0
  3003 ;;Total ram usage:        2 bytes
  3004 ;; Hardware stack levels used: 1
  3005 ;; Hardware stack levels required when called: 3
  3006 ;; This function calls:
  3007 ;;		_lcd_cmd
  3008 ;; This function is called by:
  3009 ;;		_lcd_write
  3010 ;; This function uses a non-reentrant model
  3011 ;;
  3012                           
  3013                           	psect	text17
  3014   0016F0                     __ptext17:
  3015                           	callstack 0
  3016   0016F0                     _lcd_send_byte:
  3017                           	callstack 26
  3018                           
  3019                           ;incstack = 0
  3020                           ;lcd_send_byte@level stored from wreg
  3021   0016F0  6E08               	movwf	lcd_send_byte@level^0,c
  3022   0016F2                     
  3023                           ;LCD4b_EXSTO.c: 63: void lcd_send_byte(char level, char data);LCD4b_EXSTO.c: 64: {;LCD4b
      +                          _EXSTO.c: 65:     PORTEbits.RE0 = level;
  3024   0016F2  B008               	btfsc	lcd_send_byte@level^0,0,c
  3025   0016F4  D002               	bra	u1175
  3026   0016F6  9084               	bcf	132,0,c	;volatile
  3027   0016F8  D001               	bra	u1176
  3028   0016FA                     u1175:
  3029   0016FA  8084               	bsf	132,0,c	;volatile
  3030   0016FC                     u1176:
  3031   0016FC                     
  3032                           ;LCD4b_EXSTO.c: 66:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3033   0016FC  0E42               	movlw	66
  3034   0016FE                     u1267:
  3035   0016FE  2EE8               	decfsz	wreg,f,c
  3036   001700  D7FE               	bra	u1267
  3037   001702  D000               	nop2	
  3038   001704                     
  3039                           ;LCD4b_EXSTO.c: 67:     PORTEbits.RE2 = 0;
  3040   001704  9484               	bcf	132,2,c	;volatile
  3041   001706                     
  3042                           ;LCD4b_EXSTO.c: 68:     lcd_cmd(data);
  3043   001706  5007               	movf	lcd_send_byte@data^0,w,c
  3044   001708  EC6D  F008         	call	_lcd_cmd
  3045   00170C  0012               	return		;funcret
  3046   00170E                     __end_of_lcd_send_byte:
  3047                           	callstack 0
  3048                           
  3049 ;; *************** function _lcd_init *****************
  3050 ;; Defined at:
  3051 ;;		line 3 in file "LCD4b_EXSTO.c"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;		None
  3054 ;; Auto vars:     Size  Location     Type
  3055 ;;  i               1    7[COMRAM] unsigned char 
  3056 ;; Return value:  Size  Location     Type
  3057 ;;                  1    wreg      void 
  3058 ;; Registers used:
  3059 ;;		wreg, status,2, status,0, cstack
  3060 ;; Tracked objects:
  3061 ;;		On entry : 0/0
  3062 ;;		On exit  : 0/0
  3063 ;;		Unchanged: 0/0
  3064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3065 ;;      Params:         0       0       0       0       0       0       0
  3066 ;;      Locals:         1       0       0       0       0       0       0
  3067 ;;      Temps:          1       0       0       0       0       0       0
  3068 ;;      Totals:         2       0       0       0       0       0       0
  3069 ;;Total ram usage:        2 bytes
  3070 ;; Hardware stack levels used: 1
  3071 ;; Hardware stack levels required when called: 3
  3072 ;; This function calls:
  3073 ;;		_lcd_cmd
  3074 ;; This function is called by:
  3075 ;;		_main
  3076 ;; This function uses a non-reentrant model
  3077 ;;
  3078                           
  3079                           	psect	text18
  3080   0013D2                     __ptext18:
  3081                           	callstack 0
  3082   0013D2                     _lcd_init:
  3083                           	callstack 27
  3084   0013D2                     
  3085                           ;LCD4b_EXSTO.c: 5:     char i;;LCD4b_EXSTO.c: 7:     TRISD = 0b00000000;
  3086   0013D2  0E00               	movlw	0
  3087   0013D4  6E95               	movwf	149,c	;volatile
  3088   0013D6                     
  3089                           ;LCD4b_EXSTO.c: 8:     TRISEbits.TRISE2 = 0;
  3090   0013D6  9496               	bcf	150,2,c	;volatile
  3091   0013D8                     
  3092                           ;LCD4b_EXSTO.c: 9:     TRISEbits.TRISE1 = 0;
  3093   0013D8  9296               	bcf	150,1,c	;volatile
  3094   0013DA                     
  3095                           ;LCD4b_EXSTO.c: 10:     TRISEbits.TRISE0 = 0;
  3096   0013DA  9096               	bcf	150,0,c	;volatile
  3097                           
  3098                           ;LCD4b_EXSTO.c: 11:     PORTD = 0b00000000;
  3099   0013DC  0E00               	movlw	0
  3100   0013DE  6E83               	movwf	131,c	;volatile
  3101   0013E0                     
  3102                           ;LCD4b_EXSTO.c: 12:     PORTEbits.RE0 = 0;
  3103   0013E0  9084               	bcf	132,0,c	;volatile
  3104   0013E2                     
  3105                           ;LCD4b_EXSTO.c: 13:     PORTEbits.RE1 = 0;
  3106   0013E2  9284               	bcf	132,1,c	;volatile
  3107   0013E4                     
  3108                           ;LCD4b_EXSTO.c: 14:     PORTEbits.RE2 = 0;
  3109   0013E4  9484               	bcf	132,2,c	;volatile
  3110   0013E6                     
  3111                           ;LCD4b_EXSTO.c: 16:     _delay((unsigned long)((15)*(8000000/4000.0)));
  3112   0013E6  0E27               	movlw	39
  3113   0013E8  6E07               	movwf	??_lcd_init^0,c
  3114   0013EA  0EF5               	movlw	245
  3115   0013EC                     u1277:
  3116   0013EC  2EE8               	decfsz	wreg,f,c
  3117   0013EE  D7FE               	bra	u1277
  3118   0013F0  2E07               	decfsz	??_lcd_init^0,f,c
  3119   0013F2  D7FC               	bra	u1277
  3120   0013F4  F000               	nop	
  3121   0013F6                     
  3122                           ;LCD4b_EXSTO.c: 18:     for(i=0;i<=2;i++)
  3123   0013F6  0E00               	movlw	0
  3124   0013F8  6E08               	movwf	lcd_init@i^0,c
  3125   0013FA                     l1844:
  3126                           
  3127                           ;LCD4b_EXSTO.c: 19:     {;LCD4b_EXSTO.c: 20:         lcd_cmd(0x30);
  3128   0013FA  0E30               	movlw	48
  3129   0013FC  EC6D  F008         	call	_lcd_cmd
  3130   001400                     
  3131                           ;LCD4b_EXSTO.c: 21:         _delay((unsigned long)((5)*(8000000/4000.0)));
  3132   001400  0E0D               	movlw	13
  3133   001402  6E07               	movwf	??_lcd_init^0,c
  3134   001404  0EFC               	movlw	252
  3135   001406                     u1287:
  3136   001406  2EE8               	decfsz	wreg,f,c
  3137   001408  D7FE               	bra	u1287
  3138   00140A  2E07               	decfsz	??_lcd_init^0,f,c
  3139   00140C  D7FC               	bra	u1287
  3140   00140E                     
  3141                           ;LCD4b_EXSTO.c: 22:     }
  3142   00140E  2A08               	incf	lcd_init@i^0,f,c
  3143   001410  0E02               	movlw	2
  3144   001412  6408               	cpfsgt	lcd_init@i^0,c
  3145   001414  EF0E  F00A         	goto	u1191
  3146   001418  EF10  F00A         	goto	u1190
  3147   00141C                     u1191:
  3148   00141C  EFFD  F009         	goto	l1844
  3149   001420                     u1190:
  3150   001420                     
  3151                           ;LCD4b_EXSTO.c: 24:     lcd_cmd(0x02);
  3152   001420  0E02               	movlw	2
  3153   001422  EC6D  F008         	call	_lcd_cmd
  3154   001426                     
  3155                           ;LCD4b_EXSTO.c: 25:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3156   001426  0E1A               	movlw	26
  3157   001428                     u1297:
  3158   001428  2EE8               	decfsz	wreg,f,c
  3159   00142A  D7FE               	bra	u1297
  3160   00142C  D000               	nop2	
  3161   00142E                     
  3162                           ;LCD4b_EXSTO.c: 26:     lcd_cmd(0x28);
  3163   00142E  0E28               	movlw	40
  3164   001430  EC6D  F008         	call	_lcd_cmd
  3165                           
  3166                           ;LCD4b_EXSTO.c: 27:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3167   001434  0E1A               	movlw	26
  3168   001436                     u1307:
  3169   001436  2EE8               	decfsz	wreg,f,c
  3170   001438  D7FE               	bra	u1307
  3171   00143A  D000               	nop2	
  3172   00143C                     
  3173                           ;LCD4b_EXSTO.c: 28:     lcd_cmd(0x01);
  3174   00143C  0E01               	movlw	1
  3175   00143E  EC6D  F008         	call	_lcd_cmd
  3176   001442                     
  3177                           ;LCD4b_EXSTO.c: 29:     _delay((unsigned long)((2)*(8000000/4000.0)));
  3178   001442  0E06               	movlw	6
  3179   001444  6E07               	movwf	??_lcd_init^0,c
  3180   001446  0E30               	movlw	48
  3181   001448                     u1317:
  3182   001448  2EE8               	decfsz	wreg,f,c
  3183   00144A  D7FE               	bra	u1317
  3184   00144C  2E07               	decfsz	??_lcd_init^0,f,c
  3185   00144E  D7FC               	bra	u1317
  3186   001450  D000               	nop2	
  3187                           
  3188                           ;LCD4b_EXSTO.c: 30:     lcd_cmd(0x0C);
  3189   001452  0E0C               	movlw	12
  3190   001454  EC6D  F008         	call	_lcd_cmd
  3191   001458                     
  3192                           ;LCD4b_EXSTO.c: 31:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3193   001458  0E1A               	movlw	26
  3194   00145A                     u1327:
  3195   00145A  2EE8               	decfsz	wreg,f,c
  3196   00145C  D7FE               	bra	u1327
  3197   00145E  D000               	nop2	
  3198   001460                     
  3199                           ;LCD4b_EXSTO.c: 32:     lcd_cmd(0x06);
  3200   001460  0E06               	movlw	6
  3201   001462  EC6D  F008         	call	_lcd_cmd
  3202                           
  3203                           ;LCD4b_EXSTO.c: 33:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3204   001466  0E1A               	movlw	26
  3205   001468                     u1337:
  3206   001468  2EE8               	decfsz	wreg,f,c
  3207   00146A  D7FE               	bra	u1337
  3208   00146C  D000               	nop2	
  3209   00146E  0012               	return		;funcret
  3210   001470                     __end_of_lcd_init:
  3211                           	callstack 0
  3212                           
  3213 ;; *************** function _lcd_cmd *****************
  3214 ;; Defined at:
  3215 ;;		line 42 in file "LCD4b_EXSTO.c"
  3216 ;; Parameters:    Size  Location     Type
  3217 ;;  cmd             1    wreg     unsigned char 
  3218 ;; Auto vars:     Size  Location     Type
  3219 ;;  cmd             1    5[COMRAM] unsigned char 
  3220 ;; Return value:  Size  Location     Type
  3221 ;;                  1    wreg      void 
  3222 ;; Registers used:
  3223 ;;		wreg, status,2, status,0, cstack
  3224 ;; Tracked objects:
  3225 ;;		On entry : 0/0
  3226 ;;		On exit  : 0/0
  3227 ;;		Unchanged: 0/0
  3228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3229 ;;      Params:         0       0       0       0       0       0       0
  3230 ;;      Locals:         1       0       0       0       0       0       0
  3231 ;;      Temps:          1       0       0       0       0       0       0
  3232 ;;      Totals:         2       0       0       0       0       0       0
  3233 ;;Total ram usage:        2 bytes
  3234 ;; Hardware stack levels used: 1
  3235 ;; Hardware stack levels required when called: 2
  3236 ;; This function calls:
  3237 ;;		_set_bit
  3238 ;; This function is called by:
  3239 ;;		_lcd_init
  3240 ;;		_lcd_send_byte
  3241 ;; This function uses a non-reentrant model
  3242 ;;
  3243                           
  3244                           	psect	text19
  3245   0010DA                     __ptext19:
  3246                           	callstack 0
  3247   0010DA                     _lcd_cmd:
  3248                           	callstack 26
  3249                           
  3250                           ;incstack = 0
  3251                           ;lcd_cmd@cmd stored from wreg
  3252   0010DA  6E06               	movwf	lcd_cmd@cmd^0,c
  3253   0010DC                     
  3254                           ;LCD4b_EXSTO.c: 42: void lcd_cmd(char cmd);LCD4b_EXSTO.c: 43: {;LCD4b_EXSTO.c: 44:     P
      +                          ORTDbits.RD4 = set_bit(cmd, 0b00010000);
  3255   0010DC  0E10               	movlw	16
  3256   0010DE  6E03               	movwf	set_bit@comp^0,c
  3257   0010E0  5006               	movf	lcd_cmd@cmd^0,w,c
  3258   0010E2  EC68  F00B         	call	_set_bit
  3259   0010E6  6E05               	movwf	??_lcd_cmd^0,c
  3260   0010E8  3A05               	swapf	??_lcd_cmd^0,f,c
  3261   0010EA  5083               	movf	131,w,c	;volatile
  3262   0010EC  1805               	xorwf	??_lcd_cmd^0,w,c
  3263   0010EE  0BEF               	andlw	-17
  3264   0010F0  1805               	xorwf	??_lcd_cmd^0,w,c
  3265   0010F2  6E83               	movwf	131,c	;volatile
  3266                           
  3267                           ;LCD4b_EXSTO.c: 45:     PORTDbits.RD5 = set_bit(cmd, 0b00100000);
  3268   0010F4  0E20               	movlw	32
  3269   0010F6  6E03               	movwf	set_bit@comp^0,c
  3270   0010F8  5006               	movf	lcd_cmd@cmd^0,w,c
  3271   0010FA  EC68  F00B         	call	_set_bit
  3272   0010FE  6E05               	movwf	??_lcd_cmd^0,c
  3273   001100  3A05               	swapf	??_lcd_cmd^0,f,c
  3274   001102  4605               	rlncf	??_lcd_cmd^0,f,c
  3275   001104  5083               	movf	131,w,c	;volatile
  3276   001106  1805               	xorwf	??_lcd_cmd^0,w,c
  3277   001108  0BDF               	andlw	-33
  3278   00110A  1805               	xorwf	??_lcd_cmd^0,w,c
  3279   00110C  6E83               	movwf	131,c	;volatile
  3280                           
  3281                           ;LCD4b_EXSTO.c: 46:     PORTDbits.RD6 = set_bit(cmd, 0b01000000);
  3282   00110E  0E40               	movlw	64
  3283   001110  6E03               	movwf	set_bit@comp^0,c
  3284   001112  5006               	movf	lcd_cmd@cmd^0,w,c
  3285   001114  EC68  F00B         	call	_set_bit
  3286   001118  6E05               	movwf	??_lcd_cmd^0,c
  3287   00111A  3A05               	swapf	??_lcd_cmd^0,f,c
  3288   00111C  4605               	rlncf	??_lcd_cmd^0,f,c
  3289   00111E  4605               	rlncf	??_lcd_cmd^0,f,c
  3290   001120  5083               	movf	131,w,c	;volatile
  3291   001122  1805               	xorwf	??_lcd_cmd^0,w,c
  3292   001124  0BBF               	andlw	-65
  3293   001126  1805               	xorwf	??_lcd_cmd^0,w,c
  3294   001128  6E83               	movwf	131,c	;volatile
  3295                           
  3296                           ;LCD4b_EXSTO.c: 47:     PORTDbits.RD7 = set_bit(cmd, 0b10000000);
  3297   00112A  0E80               	movlw	128
  3298   00112C  6E03               	movwf	set_bit@comp^0,c
  3299   00112E  5006               	movf	lcd_cmd@cmd^0,w,c
  3300   001130  EC68  F00B         	call	_set_bit
  3301   001134  6E05               	movwf	??_lcd_cmd^0,c
  3302   001136  3205               	rrcf	??_lcd_cmd^0,f,c
  3303   001138  3205               	rrcf	??_lcd_cmd^0,f,c
  3304   00113A  5083               	movf	131,w,c	;volatile
  3305   00113C  1805               	xorwf	??_lcd_cmd^0,w,c
  3306   00113E  0B7F               	andlw	-129
  3307   001140  1805               	xorwf	??_lcd_cmd^0,w,c
  3308   001142  6E83               	movwf	131,c	;volatile
  3309   001144                     
  3310                           ;LCD4b_EXSTO.c: 49:     PORTEbits.RE2 = 1;
  3311   001144  8484               	bsf	132,2,c	;volatile
  3312   001146                     
  3313                           ;LCD4b_EXSTO.c: 50:     PORTEbits.RE2 = 0;
  3314   001146  9484               	bcf	132,2,c	;volatile
  3315   001148                     
  3316                           ;LCD4b_EXSTO.c: 52:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3317   001148  0E42               	movlw	66
  3318   00114A                     u1347:
  3319   00114A  2EE8               	decfsz	wreg,f,c
  3320   00114C  D7FE               	bra	u1347
  3321   00114E  D000               	nop2	
  3322   001150                     
  3323                           ;LCD4b_EXSTO.c: 54:     PORTDbits.RD4 = set_bit(cmd, 0b00000001);
  3324   001150  0E01               	movlw	1
  3325   001152  6E03               	movwf	set_bit@comp^0,c
  3326   001154  5006               	movf	lcd_cmd@cmd^0,w,c
  3327   001156  EC68  F00B         	call	_set_bit
  3328   00115A  6E05               	movwf	??_lcd_cmd^0,c
  3329   00115C  3A05               	swapf	??_lcd_cmd^0,f,c
  3330   00115E  5083               	movf	131,w,c	;volatile
  3331   001160  1805               	xorwf	??_lcd_cmd^0,w,c
  3332   001162  0BEF               	andlw	-17
  3333   001164  1805               	xorwf	??_lcd_cmd^0,w,c
  3334   001166  6E83               	movwf	131,c	;volatile
  3335   001168                     
  3336                           ;LCD4b_EXSTO.c: 55:     PORTDbits.RD5 = set_bit(cmd, 0b00000010);
  3337   001168  0E02               	movlw	2
  3338   00116A  6E03               	movwf	set_bit@comp^0,c
  3339   00116C  5006               	movf	lcd_cmd@cmd^0,w,c
  3340   00116E  EC68  F00B         	call	_set_bit
  3341   001172  6E05               	movwf	??_lcd_cmd^0,c
  3342   001174  3A05               	swapf	??_lcd_cmd^0,f,c
  3343   001176  4605               	rlncf	??_lcd_cmd^0,f,c
  3344   001178  5083               	movf	131,w,c	;volatile
  3345   00117A  1805               	xorwf	??_lcd_cmd^0,w,c
  3346   00117C  0BDF               	andlw	-33
  3347   00117E  1805               	xorwf	??_lcd_cmd^0,w,c
  3348   001180  6E83               	movwf	131,c	;volatile
  3349   001182                     
  3350                           ;LCD4b_EXSTO.c: 56:     PORTDbits.RD6 = set_bit(cmd, 0b00000100);
  3351   001182  0E04               	movlw	4
  3352   001184  6E03               	movwf	set_bit@comp^0,c
  3353   001186  5006               	movf	lcd_cmd@cmd^0,w,c
  3354   001188  EC68  F00B         	call	_set_bit
  3355   00118C  6E05               	movwf	??_lcd_cmd^0,c
  3356   00118E  3A05               	swapf	??_lcd_cmd^0,f,c
  3357   001190  4605               	rlncf	??_lcd_cmd^0,f,c
  3358   001192  4605               	rlncf	??_lcd_cmd^0,f,c
  3359   001194  5083               	movf	131,w,c	;volatile
  3360   001196  1805               	xorwf	??_lcd_cmd^0,w,c
  3361   001198  0BBF               	andlw	-65
  3362   00119A  1805               	xorwf	??_lcd_cmd^0,w,c
  3363   00119C  6E83               	movwf	131,c	;volatile
  3364   00119E                     
  3365                           ;LCD4b_EXSTO.c: 57:     PORTDbits.RD7 = set_bit(cmd, 0b00001000);
  3366   00119E  0E08               	movlw	8
  3367   0011A0  6E03               	movwf	set_bit@comp^0,c
  3368   0011A2  5006               	movf	lcd_cmd@cmd^0,w,c
  3369   0011A4  EC68  F00B         	call	_set_bit
  3370   0011A8  6E05               	movwf	??_lcd_cmd^0,c
  3371   0011AA  3205               	rrcf	??_lcd_cmd^0,f,c
  3372   0011AC  3205               	rrcf	??_lcd_cmd^0,f,c
  3373   0011AE  5083               	movf	131,w,c	;volatile
  3374   0011B0  1805               	xorwf	??_lcd_cmd^0,w,c
  3375   0011B2  0B7F               	andlw	-129
  3376   0011B4  1805               	xorwf	??_lcd_cmd^0,w,c
  3377   0011B6  6E83               	movwf	131,c	;volatile
  3378   0011B8                     
  3379                           ;LCD4b_EXSTO.c: 59:     PORTEbits.RE2 = 1;
  3380   0011B8  8484               	bsf	132,2,c	;volatile
  3381   0011BA                     
  3382                           ;LCD4b_EXSTO.c: 60:     PORTEbits.RE2 = 0;
  3383   0011BA  9484               	bcf	132,2,c	;volatile
  3384   0011BC  0012               	return		;funcret
  3385   0011BE                     __end_of_lcd_cmd:
  3386                           	callstack 0
  3387                           
  3388 ;; *************** function _set_bit *****************
  3389 ;; Defined at:
  3390 ;;		line 36 in file "LCD4b_EXSTO.c"
  3391 ;; Parameters:    Size  Location     Type
  3392 ;;  cmd             1    wreg     unsigned char 
  3393 ;;  comp            1    2[COMRAM] unsigned char 
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;  cmd             1    3[COMRAM] unsigned char 
  3396 ;; Return value:  Size  Location     Type
  3397 ;;                  1    wreg      unsigned char 
  3398 ;; Registers used:
  3399 ;;		wreg, status,2, status,0
  3400 ;; Tracked objects:
  3401 ;;		On entry : 0/0
  3402 ;;		On exit  : 0/0
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3405 ;;      Params:         1       0       0       0       0       0       0
  3406 ;;      Locals:         1       0       0       0       0       0       0
  3407 ;;      Temps:          0       0       0       0       0       0       0
  3408 ;;      Totals:         2       0       0       0       0       0       0
  3409 ;;Total ram usage:        2 bytes
  3410 ;; Hardware stack levels used: 1
  3411 ;; Hardware stack levels required when called: 1
  3412 ;; This function calls:
  3413 ;;		Nothing
  3414 ;; This function is called by:
  3415 ;;		_lcd_cmd
  3416 ;; This function uses a non-reentrant model
  3417 ;;
  3418                           
  3419                           	psect	text20
  3420   0016D0                     __ptext20:
  3421                           	callstack 0
  3422   0016D0                     _set_bit:
  3423                           	callstack 26
  3424                           
  3425                           ;incstack = 0
  3426                           ;set_bit@cmd stored from wreg
  3427   0016D0  6E04               	movwf	set_bit@cmd^0,c
  3428   0016D2                     
  3429                           ;LCD4b_EXSTO.c: 36: char set_bit(char cmd, char comp);LCD4b_EXSTO.c: 37: {;LCD4b_EXSTO.c
      +                          : 38:     if((cmd & comp) >= 1) return 1;
  3430   0016D2  5004               	movf	set_bit@cmd^0,w,c
  3431   0016D4  1403               	andwf	set_bit@comp^0,w,c
  3432   0016D6  0900               	iorlw	0
  3433   0016D8  B4D8               	btfsc	status,2,c
  3434   0016DA  EF71  F00B         	goto	u921
  3435   0016DE  EF73  F00B         	goto	u920
  3436   0016E2                     u921:
  3437   0016E2  EF76  F00B         	goto	l1616
  3438   0016E6                     u920:
  3439   0016E6  0E01               	movlw	1
  3440   0016E8  EF77  F00B         	goto	l99
  3441   0016EC                     l1616:
  3442   0016EC  0E00               	movlw	0
  3443   0016EE                     l99:
  3444   0016EE  0012               	return		;funcret
  3445   0016F0                     __end_of_set_bit:
  3446                           	callstack 0
  3447                           
  3448 ;; *************** function _config_IO *****************
  3449 ;; Defined at:
  3450 ;;		line 80 in file "Program_Interrupt_LEDs.c"
  3451 ;; Parameters:    Size  Location     Type
  3452 ;;		None
  3453 ;; Auto vars:     Size  Location     Type
  3454 ;;		None
  3455 ;; Return value:  Size  Location     Type
  3456 ;;                  1    wreg      void 
  3457 ;; Registers used:
  3458 ;;		wreg, status,2
  3459 ;; Tracked objects:
  3460 ;;		On entry : 0/0
  3461 ;;		On exit  : 0/0
  3462 ;;		Unchanged: 0/0
  3463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3464 ;;      Params:         0       0       0       0       0       0       0
  3465 ;;      Locals:         0       0       0       0       0       0       0
  3466 ;;      Temps:          0       0       0       0       0       0       0
  3467 ;;      Totals:         0       0       0       0       0       0       0
  3468 ;;Total ram usage:        0 bytes
  3469 ;; Hardware stack levels used: 1
  3470 ;; Hardware stack levels required when called: 1
  3471 ;; This function calls:
  3472 ;;		Nothing
  3473 ;; This function is called by:
  3474 ;;		_main
  3475 ;; This function uses a non-reentrant model
  3476 ;;
  3477                           
  3478                           	psect	text21
  3479   00170E                     __ptext21:
  3480                           	callstack 0
  3481   00170E                     _config_IO:
  3482                           	callstack 29
  3483   00170E                     
  3484                           ;Program_Interrupt_LEDs.c: 82:     TRISB = 0X03;
  3485   00170E  0E03               	movlw	3
  3486   001710  6E93               	movwf	147,c	;volatile
  3487                           
  3488                           ;Program_Interrupt_LEDs.c: 83:     TRISC = 0X00;
  3489   001712  0E00               	movlw	0
  3490   001714  6E94               	movwf	148,c	;volatile
  3491                           
  3492                           ;Program_Interrupt_LEDs.c: 84:     PORTB = 0X00;
  3493   001716  0E00               	movlw	0
  3494   001718  6E81               	movwf	129,c	;volatile
  3495   00171A                     
  3496                           ;Program_Interrupt_LEDs.c: 85:     PORTC = 0XFF;
  3497   00171A  6882               	setf	130,c	;volatile
  3498                           
  3499                           ;Program_Interrupt_LEDs.c: 86:     ADCON1 = 0X0F;
  3500   00171C  0E0F               	movlw	15
  3501   00171E  6EC1               	movwf	193,c	;volatile
  3502   001720  0012               	return		;funcret
  3503   001722                     __end_of_config_IO:
  3504                           	callstack 0
  3505                           
  3506 ;; *************** function _config_FOSC *****************
  3507 ;; Defined at:
  3508 ;;		line 74 in file "Program_Interrupt_LEDs.c"
  3509 ;; Parameters:    Size  Location     Type
  3510 ;;		None
  3511 ;; Auto vars:     Size  Location     Type
  3512 ;;		None
  3513 ;; Return value:  Size  Location     Type
  3514 ;;                  1    wreg      void 
  3515 ;; Registers used:
  3516 ;;		wreg, status,2
  3517 ;; Tracked objects:
  3518 ;;		On entry : 0/0
  3519 ;;		On exit  : 0/0
  3520 ;;		Unchanged: 0/0
  3521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3522 ;;      Params:         0       0       0       0       0       0       0
  3523 ;;      Locals:         0       0       0       0       0       0       0
  3524 ;;      Temps:          0       0       0       0       0       0       0
  3525 ;;      Totals:         0       0       0       0       0       0       0
  3526 ;;Total ram usage:        0 bytes
  3527 ;; Hardware stack levels used: 1
  3528 ;; Hardware stack levels required when called: 1
  3529 ;; This function calls:
  3530 ;;		Nothing
  3531 ;; This function is called by:
  3532 ;;		_main
  3533 ;; This function uses a non-reentrant model
  3534 ;;
  3535                           
  3536                           	psect	text22
  3537   001730                     __ptext22:
  3538                           	callstack 0
  3539   001730                     _config_FOSC:
  3540                           	callstack 29
  3541   001730                     
  3542                           ;Program_Interrupt_LEDs.c: 76:     OSCCON = 0X00;
  3543   001730  0E00               	movlw	0
  3544   001732  6ED3               	movwf	211,c	;volatile
  3545                           
  3546                           ;Program_Interrupt_LEDs.c: 77:     OSCTUNE = 0X00;
  3547   001734  0E00               	movlw	0
  3548   001736  6E9B               	movwf	155,c	;volatile
  3549   001738  0012               	return		;funcret
  3550   00173A                     __end_of_config_FOSC:
  3551                           	callstack 0
  3552                           
  3553 ;; *************** function _config_EXT_INT *****************
  3554 ;; Defined at:
  3555 ;;		line 89 in file "Program_Interrupt_LEDs.c"
  3556 ;; Parameters:    Size  Location     Type
  3557 ;;		None
  3558 ;; Auto vars:     Size  Location     Type
  3559 ;;		None
  3560 ;; Return value:  Size  Location     Type
  3561 ;;                  1    wreg      void 
  3562 ;; Registers used:
  3563 ;;		wreg, status,2
  3564 ;; Tracked objects:
  3565 ;;		On entry : 0/0
  3566 ;;		On exit  : 0/0
  3567 ;;		Unchanged: 0/0
  3568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3569 ;;      Params:         0       0       0       0       0       0       0
  3570 ;;      Locals:         0       0       0       0       0       0       0
  3571 ;;      Temps:          0       0       0       0       0       0       0
  3572 ;;      Totals:         0       0       0       0       0       0       0
  3573 ;;Total ram usage:        0 bytes
  3574 ;; Hardware stack levels used: 1
  3575 ;; Hardware stack levels required when called: 1
  3576 ;; This function calls:
  3577 ;;		Nothing
  3578 ;; This function is called by:
  3579 ;;		_main
  3580 ;; This function uses a non-reentrant model
  3581 ;;
  3582                           
  3583                           	psect	text23
  3584   001722                     __ptext23:
  3585                           	callstack 0
  3586   001722                     _config_EXT_INT:
  3587                           	callstack 29
  3588   001722                     
  3589                           ;Program_Interrupt_LEDs.c: 91:     INTCON = 0X90;
  3590   001722  0E90               	movlw	144
  3591   001724  6EF2               	movwf	242,c	;volatile
  3592                           
  3593                           ;Program_Interrupt_LEDs.c: 92:     INTCON2 = 0XD0;
  3594   001726  0ED0               	movlw	208
  3595   001728  6EF1               	movwf	241,c	;volatile
  3596                           
  3597                           ;Program_Interrupt_LEDs.c: 93:     INTCON3 = 0X08;
  3598   00172A  0E08               	movlw	8
  3599   00172C  6EF0               	movwf	240,c	;volatile
  3600   00172E  0012               	return		;funcret
  3601   001730                     __end_of_config_EXT_INT:
  3602                           	callstack 0
  3603                           
  3604 ;; *************** function _Ext_Counter *****************
  3605 ;; Defined at:
  3606 ;;		line 96 in file "Program_Interrupt_LEDs.c"
  3607 ;; Parameters:    Size  Location     Type
  3608 ;;		None
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;		None
  3611 ;; Return value:  Size  Location     Type
  3612 ;;                  1    wreg      void 
  3613 ;; Registers used:
  3614 ;;		wreg, status,2, status,0
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3620 ;;      Params:         0       0       0       0       0       0       0
  3621 ;;      Locals:         0       0       0       0       0       0       0
  3622 ;;      Temps:          2       0       0       0       0       0       0
  3623 ;;      Totals:         2       0       0       0       0       0       0
  3624 ;;Total ram usage:        2 bytes
  3625 ;; Hardware stack levels used: 1
  3626 ;; This function calls:
  3627 ;;		Nothing
  3628 ;; This function is called by:
  3629 ;;		Interrupt level 2
  3630 ;; This function uses a non-reentrant model
  3631 ;;
  3632                           
  3633                           	psect	intcode
  3634   000008                     __pintcode:
  3635                           	callstack 0
  3636   000008                     _Ext_Counter:
  3637                           	callstack 22
  3638                           
  3639                           ;incstack = 0
  3640   000008  827A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3641   00000A  EDD9  F007         	call	int_func,f	;refresh shadow registers
  3642                           
  3643                           	psect	intcode_body
  3644   000FB2                     __pintcode_body:
  3645                           	callstack 22
  3646   000FB2                     int_func:
  3647                           	callstack 22
  3648   000FB2  0006               	pop		; remove dummy address from shadow register refresh
  3649   000FB4                     
  3650                           ;Program_Interrupt_LEDs.c: 98:     if(INTCONbits.INT0IF == 1)
  3651   000FB4  A2F2               	btfss	242,1,c	;volatile
  3652   000FB6  EFDF  F007         	goto	i2u61_41
  3653   000FBA  EFE1  F007         	goto	i2u61_40
  3654   000FBE                     i2u61_41:
  3655   000FBE  EF22  F008         	goto	i2l50
  3656   000FC2                     i2u61_40:
  3657   000FC2                     
  3658                           ;Program_Interrupt_LEDs.c: 99:     {;Program_Interrupt_LEDs.c: 100:         counter++;
  3659   000FC2  4A77               	infsnz	_counter^0,f,c
  3660   000FC4  2A78               	incf	(_counter+1)^0,f,c
  3661   000FC6                     
  3662                           ;Program_Interrupt_LEDs.c: 101:         if(counter <= 4)
  3663   000FC6  BE78               	btfsc	(_counter+1)^0,7,c
  3664   000FC8  EFF1  F007         	goto	i2u62_40
  3665   000FCC  5078               	movf	(_counter+1)^0,w,c
  3666   000FCE  E107               	bnz	i2u62_41
  3667   000FD0  0E05               	movlw	5
  3668   000FD2  5C77               	subwf	_counter^0,w,c
  3669   000FD4  B0D8               	btfsc	status,0,c
  3670   000FD6  EFEF  F007         	goto	i2u62_41
  3671   000FDA  EFF1  F007         	goto	i2u62_40
  3672   000FDE                     i2u62_41:
  3673   000FDE  EF21  F008         	goto	i2l51
  3674   000FE2                     i2u62_40:
  3675   000FE2  EF03  F008         	goto	i2l1402
  3676   000FE6                     i2l1392:
  3677   000FE6  0E0E               	movlw	14
  3678   000FE8  6E82               	movwf	130,c	;volatile
  3679                           
  3680                           ;Program_Interrupt_LEDs.c: 106:                 break;
  3681   000FEA  EF21  F008         	goto	i2l51
  3682   000FEE                     i2l1394:
  3683   000FEE  0E0C               	movlw	12
  3684   000FF0  6E82               	movwf	130,c	;volatile
  3685                           
  3686                           ;Program_Interrupt_LEDs.c: 108:                 break;
  3687   000FF2  EF21  F008         	goto	i2l51
  3688   000FF6                     i2l1396:
  3689   000FF6  0E08               	movlw	8
  3690   000FF8  6E82               	movwf	130,c	;volatile
  3691                           
  3692                           ;Program_Interrupt_LEDs.c: 110:                 break;
  3693   000FFA  EF21  F008         	goto	i2l51
  3694   000FFE                     i2l1398:
  3695   000FFE  0E00               	movlw	0
  3696   001000  6E82               	movwf	130,c	;volatile
  3697                           
  3698                           ;Program_Interrupt_LEDs.c: 112:                 break;
  3699   001002  EF21  F008         	goto	i2l51
  3700   001006                     i2l1402:
  3701   001006  C077  F001         	movff	_counter,??_Ext_Counter
  3702   00100A  C078  F002         	movff	_counter+1,??_Ext_Counter+1
  3703                           
  3704                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3705                           ; Switch size 1, requested type "simple"
  3706                           ; Number of cases is 1, Range of values is 0 to 0
  3707                           ; switch strategies available:
  3708                           ; Name         Instructions Cycles
  3709                           ; simple_byte            4     3 (average)
  3710                           ;	Chosen strategy is simple_byte
  3711   00100E  5002               	movf	(??_Ext_Counter+1)^0,w,c
  3712   001010  0A00               	xorlw	0	; case 0
  3713   001012  B4D8               	btfsc	status,2,c
  3714   001014  EF0E  F008         	goto	i2l1994
  3715   001018  EF21  F008         	goto	i2l51
  3716   00101C                     i2l1994:
  3717                           
  3718                           ; Switch size 1, requested type "simple"
  3719                           ; Number of cases is 4, Range of values is 1 to 4
  3720                           ; switch strategies available:
  3721                           ; Name         Instructions Cycles
  3722                           ; simple_byte           13     7 (average)
  3723                           ;	Chosen strategy is simple_byte
  3724   00101C  5001               	movf	??_Ext_Counter^0,w,c
  3725   00101E  0A01               	xorlw	1	; case 1
  3726   001020  B4D8               	btfsc	status,2,c
  3727   001022  EFF3  F007         	goto	i2l1392
  3728   001026  0A03               	xorlw	3	; case 2
  3729   001028  B4D8               	btfsc	status,2,c
  3730   00102A  EFF7  F007         	goto	i2l1394
  3731   00102E  0A01               	xorlw	1	; case 3
  3732   001030  B4D8               	btfsc	status,2,c
  3733   001032  EFFB  F007         	goto	i2l1396
  3734   001036  0A07               	xorlw	7	; case 4
  3735   001038  B4D8               	btfsc	status,2,c
  3736   00103A  EFFF  F007         	goto	i2l1398
  3737   00103E  EF21  F008         	goto	i2l51
  3738   001042                     i2l51:
  3739                           
  3740                           ;Program_Interrupt_LEDs.c: 115:         INTCONbits.INT0IF = 0;
  3741   001042  92F2               	bcf	242,1,c	;volatile
  3742   001044                     i2l50:
  3743                           
  3744                           ;Program_Interrupt_LEDs.c: 118:     if(INTCON3bits.INT1IF == 1)
  3745   001044  A0F0               	btfss	240,0,c	;volatile
  3746   001046  EF27  F008         	goto	i2u63_41
  3747   00104A  EF29  F008         	goto	i2u63_40
  3748   00104E                     i2u63_41:
  3749   00104E  EF6B  F008         	goto	i2l66
  3750   001052                     i2u63_40:
  3751   001052                     
  3752                           ;Program_Interrupt_LEDs.c: 119:     {;Program_Interrupt_LEDs.c: 120:         counter--;
  3753   001052  0677               	decf	_counter^0,f,c
  3754   001054  A0D8               	btfss	status,0,c
  3755   001056  0678               	decf	(_counter+1)^0,f,c
  3756   001058                     
  3757                           ;Program_Interrupt_LEDs.c: 121:         if(counter <= 4)
  3758   001058  BE78               	btfsc	(_counter+1)^0,7,c
  3759   00105A  EF3A  F008         	goto	i2u64_40
  3760   00105E  5078               	movf	(_counter+1)^0,w,c
  3761   001060  E107               	bnz	i2u64_41
  3762   001062  0E05               	movlw	5
  3763   001064  5C77               	subwf	_counter^0,w,c
  3764   001066  B0D8               	btfsc	status,0,c
  3765   001068  EF38  F008         	goto	i2u64_41
  3766   00106C  EF3A  F008         	goto	i2u64_40
  3767   001070                     i2u64_41:
  3768   001070  EF6A  F008         	goto	i2l59
  3769   001074                     i2u64_40:
  3770   001074  EF4C  F008         	goto	i2l1420
  3771   001078                     i2l1410:
  3772   001078  0E0E               	movlw	14
  3773   00107A  6E82               	movwf	130,c	;volatile
  3774                           
  3775                           ;Program_Interrupt_LEDs.c: 126:                 break;
  3776   00107C  EF6A  F008         	goto	i2l59
  3777   001080                     i2l1412:
  3778   001080  0E0C               	movlw	12
  3779   001082  6E82               	movwf	130,c	;volatile
  3780                           
  3781                           ;Program_Interrupt_LEDs.c: 128:                 break;
  3782   001084  EF6A  F008         	goto	i2l59
  3783   001088                     i2l1414:
  3784   001088  0E08               	movlw	8
  3785   00108A  6E82               	movwf	130,c	;volatile
  3786                           
  3787                           ;Program_Interrupt_LEDs.c: 130:                 break;
  3788   00108C  EF6A  F008         	goto	i2l59
  3789   001090                     i2l1416:
  3790   001090  0E00               	movlw	0
  3791   001092  6E82               	movwf	130,c	;volatile
  3792                           
  3793                           ;Program_Interrupt_LEDs.c: 132:                 break;
  3794   001094  EF6A  F008         	goto	i2l59
  3795   001098                     i2l1420:
  3796   001098  C077  F001         	movff	_counter,??_Ext_Counter
  3797   00109C  C078  F002         	movff	_counter+1,??_Ext_Counter+1
  3798                           
  3799                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3800                           ; Switch size 1, requested type "simple"
  3801                           ; Number of cases is 1, Range of values is 0 to 0
  3802                           ; switch strategies available:
  3803                           ; Name         Instructions Cycles
  3804                           ; simple_byte            4     3 (average)
  3805                           ;	Chosen strategy is simple_byte
  3806   0010A0  5002               	movf	(??_Ext_Counter+1)^0,w,c
  3807   0010A2  0A00               	xorlw	0	; case 0
  3808   0010A4  B4D8               	btfsc	status,2,c
  3809   0010A6  EF57  F008         	goto	i2l1996
  3810   0010AA  EF6A  F008         	goto	i2l59
  3811   0010AE                     i2l1996:
  3812                           
  3813                           ; Switch size 1, requested type "simple"
  3814                           ; Number of cases is 4, Range of values is 1 to 4
  3815                           ; switch strategies available:
  3816                           ; Name         Instructions Cycles
  3817                           ; simple_byte           13     7 (average)
  3818                           ;	Chosen strategy is simple_byte
  3819   0010AE  5001               	movf	??_Ext_Counter^0,w,c
  3820   0010B0  0A01               	xorlw	1	; case 1
  3821   0010B2  B4D8               	btfsc	status,2,c
  3822   0010B4  EF3C  F008         	goto	i2l1410
  3823   0010B8  0A03               	xorlw	3	; case 2
  3824   0010BA  B4D8               	btfsc	status,2,c
  3825   0010BC  EF40  F008         	goto	i2l1412
  3826   0010C0  0A01               	xorlw	1	; case 3
  3827   0010C2  B4D8               	btfsc	status,2,c
  3828   0010C4  EF44  F008         	goto	i2l1414
  3829   0010C8  0A07               	xorlw	7	; case 4
  3830   0010CA  B4D8               	btfsc	status,2,c
  3831   0010CC  EF48  F008         	goto	i2l1416
  3832   0010D0  EF6A  F008         	goto	i2l59
  3833   0010D4                     i2l59:
  3834                           
  3835                           ;Program_Interrupt_LEDs.c: 135:         INTCON3bits.INT1IF = 0;
  3836   0010D4  90F0               	bcf	240,0,c	;volatile
  3837   0010D6                     i2l66:
  3838   0010D6  927A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3839   0010D8  0011               	retfie		f
  3840   0010DA                     __end_of_Ext_Counter:
  3841                           	callstack 0
  3842                           
  3843                           	psect	rparam
  3844   000000                     
  3845                           	psect	temp
  3846   00007A                     btemp:
  3847                           	callstack 0
  3848   00007A                     	ds	1
  3849   000000                     int$flags	set	btemp
  3850   000000                     wtemp8	set	btemp+1
  3851   000000                     ttemp5	set	btemp+1
  3852   000000                     ttemp6	set	btemp+4
  3853   000000                     ttemp7	set	btemp+8
  3854                           
  3855                           	psect	idloc
  3856                           
  3857                           ;Config register IDLOC0 @ 0x200000
  3858                           ;	unspecified, using default values
  3859   200000                     	org	2097152
  3860   200000  FF                 	db	255
  3861                           
  3862                           ;Config register IDLOC1 @ 0x200001
  3863                           ;	unspecified, using default values
  3864   200001                     	org	2097153
  3865   200001  FF                 	db	255
  3866                           
  3867                           ;Config register IDLOC2 @ 0x200002
  3868                           ;	unspecified, using default values
  3869   200002                     	org	2097154
  3870   200002  FF                 	db	255
  3871                           
  3872                           ;Config register IDLOC3 @ 0x200003
  3873                           ;	unspecified, using default values
  3874   200003                     	org	2097155
  3875   200003  FF                 	db	255
  3876                           
  3877                           ;Config register IDLOC4 @ 0x200004
  3878                           ;	unspecified, using default values
  3879   200004                     	org	2097156
  3880   200004  FF                 	db	255
  3881                           
  3882                           ;Config register IDLOC5 @ 0x200005
  3883                           ;	unspecified, using default values
  3884   200005                     	org	2097157
  3885   200005  FF                 	db	255
  3886                           
  3887                           ;Config register IDLOC6 @ 0x200006
  3888                           ;	unspecified, using default values
  3889   200006                     	org	2097158
  3890   200006  FF                 	db	255
  3891                           
  3892                           ;Config register IDLOC7 @ 0x200007
  3893                           ;	unspecified, using default values
  3894   200007                     	org	2097159
  3895   200007  FF                 	db	255
  3896                           
  3897                           	psect	config
  3898                           
  3899                           ; Padding undefined space
  3900   300000                     	org	3145728
  3901   300000  FF                 	db	255
  3902                           
  3903                           ;Config register CONFIG1H @ 0x300001
  3904                           ;	Oscillator Selection bits
  3905                           ;	OSC = HS, HS oscillator
  3906                           ;	Fail-Safe Clock Monitor Enable bit
  3907                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3908                           ;	Internal/External Oscillator Switchover bit
  3909                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3910   300001                     	org	3145729
  3911   300001  02                 	db	2
  3912                           
  3913                           ;Config register CONFIG2L @ 0x300002
  3914                           ;	Power-up Timer Enable bit
  3915                           ;	PWRT = OFF, PWRT disabled
  3916                           ;	Brown-out Reset Enable bits
  3917                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  3918                           ;	Brown Out Reset Voltage bits
  3919                           ;	BORV = 3, Minimum setting
  3920   300002                     	org	3145730
  3921   300002  1F                 	db	31
  3922                           
  3923                           ;Config register CONFIG2H @ 0x300003
  3924                           ;	Watchdog Timer Enable bit
  3925                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3926                           ;	Watchdog Timer Postscale Select bits
  3927                           ;	WDTPS = 32768, 1:32768
  3928   300003                     	org	3145731
  3929   300003  1E                 	db	30
  3930                           
  3931                           ; Padding undefined space
  3932   300004                     	org	3145732
  3933   300004  FF                 	db	255
  3934                           
  3935                           ;Config register CONFIG3H @ 0x300005
  3936                           ;	CCP2 MUX bit
  3937                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  3938                           ;	PORTB A/D Enable bit
  3939                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3940                           ;	Low-Power Timer1 Oscillator Enable bit
  3941                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3942                           ;	MCLR Pin Enable bit
  3943                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  3944   300005                     	org	3145733
  3945   300005  81                 	db	129
  3946                           
  3947                           ;Config register CONFIG4L @ 0x300006
  3948                           ;	Stack Full/Underflow Reset Enable bit
  3949                           ;	STVREN = ON, Stack full/underflow will cause Reset
  3950                           ;	Single-Supply ICSP Enable bit
  3951                           ;	LVP = OFF, Single-Supply ICSP disabled
  3952                           ;	Extended Instruction Set Enable bit
  3953                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3954                           ;	Background Debugger Enable bit
  3955                           ;	DEBUG = 0x1, unprogrammed default
  3956   300006                     	org	3145734
  3957   300006  81                 	db	129
  3958                           
  3959                           ; Padding undefined space
  3960   300007                     	org	3145735
  3961   300007  FF                 	db	255
  3962                           
  3963                           ;Config register CONFIG5L @ 0x300008
  3964                           ;	Code Protection bit
  3965                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  3966                           ;	Code Protection bit
  3967                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  3968                           ;	Code Protection bit
  3969                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  3970                           ;	Code Protection bit
  3971                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  3972   300008                     	org	3145736
  3973   300008  0F                 	db	15
  3974                           
  3975                           ;Config register CONFIG5H @ 0x300009
  3976                           ;	Boot Block Code Protection bit
  3977                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  3978                           ;	Data EEPROM Code Protection bit
  3979                           ;	CPD = OFF, Data EEPROM not code-protected
  3980   300009                     	org	3145737
  3981   300009  C0                 	db	192
  3982                           
  3983                           ;Config register CONFIG6L @ 0x30000A
  3984                           ;	Write Protection bit
  3985                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  3986                           ;	Write Protection bit
  3987                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  3988                           ;	Write Protection bit
  3989                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  3990                           ;	Write Protection bit
  3991                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  3992   30000A                     	org	3145738
  3993   30000A  0F                 	db	15
  3994                           
  3995                           ;Config register CONFIG6H @ 0x30000B
  3996                           ;	Configuration Register Write Protection bit
  3997                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3998                           ;	Boot Block Write Protection bit
  3999                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  4000                           ;	Data EEPROM Write Protection bit
  4001                           ;	WRTD = OFF, Data EEPROM not write-protected
  4002   30000B                     	org	3145739
  4003   30000B  E0                 	db	224
  4004                           
  4005                           ;Config register CONFIG7L @ 0x30000C
  4006                           ;	Table Read Protection bit
  4007                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  4008                           ;	Table Read Protection bit
  4009                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  4010                           ;	Table Read Protection bit
  4011                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  4012                           ;	Table Read Protection bit
  4013                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  4014   30000C                     	org	3145740
  4015   30000C  0F                 	db	15
  4016                           
  4017                           ;Config register CONFIG7H @ 0x30000D
  4018                           ;	Boot Block Table Read Protection bit
  4019                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  4020   30000D                     	org	3145741
  4021   30000D  40                 	db	64
  4022                           tosu	equ	0xFFF
  4023                           tosh	equ	0xFFE
  4024                           tosl	equ	0xFFD
  4025                           stkptr	equ	0xFFC
  4026                           pclatu	equ	0xFFB
  4027                           pclath	equ	0xFFA
  4028                           pcl	equ	0xFF9
  4029                           tblptru	equ	0xFF8
  4030                           tblptrh	equ	0xFF7
  4031                           tblptrl	equ	0xFF6
  4032                           tablat	equ	0xFF5
  4033                           prodh	equ	0xFF4
  4034                           prodl	equ	0xFF3
  4035                           indf0	equ	0xFEF
  4036                           postinc0	equ	0xFEE
  4037                           postdec0	equ	0xFED
  4038                           preinc0	equ	0xFEC
  4039                           plusw0	equ	0xFEB
  4040                           fsr0h	equ	0xFEA
  4041                           fsr0l	equ	0xFE9
  4042                           wreg	equ	0xFE8
  4043                           indf1	equ	0xFE7
  4044                           postinc1	equ	0xFE6
  4045                           postdec1	equ	0xFE5
  4046                           preinc1	equ	0xFE4
  4047                           plusw1	equ	0xFE3
  4048                           fsr1h	equ	0xFE2
  4049                           fsr1l	equ	0xFE1
  4050                           bsr	equ	0xFE0
  4051                           indf2	equ	0xFDF
  4052                           postinc2	equ	0xFDE
  4053                           postdec2	equ	0xFDD
  4054                           preinc2	equ	0xFDC
  4055                           plusw2	equ	0xFDB
  4056                           fsr2h	equ	0xFDA
  4057                           fsr2l	equ	0xFD9
  4058                           status	equ	0xFD8

Data Sizes:
    Strings     43
    Constant    0
    Data        0
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    114     121
    BANK0           128      0      48
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_3(CODE[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_3(CODE[6]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 6
		 -> STR_3(CODE[6]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 6
		 -> STR_3(CODE[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S907$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_3(CODE[6]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> BufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S854$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S854$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    lcd_write@str	PTR unsigned char  size(2) Largest target is 16
		 -> STR_5(CODE[16]), STR_4(CODE[16]), BufferLCD(BANK0[16]), STR_2(CODE[9]), 
		 -> STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->___wmul
    _lcd_write->_lcd_send_byte
    _lcd_send_byte->_lcd_cmd
    _lcd_init->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _Ext_Counter in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _Ext_Counter in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Ext_Counter in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Ext_Counter in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Ext_Counter in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Ext_Counter in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Ext_Counter in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10155
                                            112 COMRAM     2     2      0
                     _config_EXT_INT
                        _config_FOSC
                          _config_IO
                           _lcd_init
                          _lcd_write
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    15      6    7340
                                             93 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    6987
                                             85 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           24    18      6    6626
                                             64 COMRAM    21    15      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                35    25     10    3867
                                             29 COMRAM    35    25     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2195
                                             18 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1083
                                             11 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              2 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             20 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              2 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              2 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                 9     7      2    1080
                                              8 COMRAM     9     7      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              5     3      2     207
                                              2 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              4     2      2     237
                                              2 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     311
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_write                                            5     2      3    1941
                                              8 COMRAM     5     2      3
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_send_byte                                        2     1      1    1024
                                              6 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     874
                                              6 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              2     2      0     828
                                              4 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (4) _set_bit                                              2     1      1     652
                                              2 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _config_IO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_FOSC                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_EXT_INT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Ext_Counter                                          2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _config_EXT_INT
   _config_FOSC
   _config_IO
   _lcd_init
     _lcd_cmd
       _set_bit
   _lcd_write
     _lcd_send_byte
       _lcd_cmd
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc
         _isdigit

 _Ext_Counter (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      24        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      30       5       37.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     72      79       1       96.0%
BITBIGSFRlhl        25      0       0      19        0.0%
BITBIGSFRhl         1C      0       0      17        0.0%
BITBIGSFRlhh        11      0       0      18        0.0%
BITBIGSFRlllh        E      0       0      21        0.0%
BITBIGSFRhh          D      0       0      16        0.0%
BITBIGSFRllh         4      0       0      20        0.0%
BITBIGSFRllll        1      0       0      22        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A9      23        0.0%
DATA                 0      0      A9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Thu Aug 03 15:01:19 2023

                     l42 1720                       l45 172E                       l39 1738  
                     l95 146E                       l99 16EE           ?_lcd_send_byte 0007  
    ___wmul@multiplicand 0005                      l103 11BC                      l121 16CE  
                    l106 170C                      l118 13D0                      l235 0D02  
                    l248 0E66                      l910 0FA8                      l831 1330  
                    l840 0716                      l913 0FB0                      l826 12CC  
                    l916 1682                      l924 15D2                      l829 130E  
                    l853 08E0                      l837 06C8                      l950 173A  
                    l839 06D0                      l881 158C                      l939 1286  
                    l947 1616                      l875 0B7A                      l885 164E  
                    l799 153E                      l888 1656                      u700 0B8E  
                    u701 0B8A                      u710 0BC0                      u711 0BBC  
                    u800 0DB0                      u721 0BEA                      u801 0DAC  
                    u730 0C0E                      u810 0DDE                      u650 11D0  
                    u731 0C0A                      u811 0DDA                      u651 11CC  
                    u900 15A6                      u740 0C38                      u820 0E26  
                    u660 11E2                      u901 15A2                      u741 0C34  
                    u821 0E22                      u661 11DE                      u910 15C8  
                    u750 0C78                      u670 120A                      u830 1296  
                    u911 15C4                      u751 0C74                      u671 1206  
                    u831 1292                      u920 16E6                      u760 0CC2  
                    u680 1240                      u840 12B8                      u921 16E2  
                    u761 0CBE                      u681 123C                      u841 12B4  
                    u770 0D16                      u690 1616                      u850 130E  
                    u930 065E                      u771 0D12                      u691 1612  
                    u851 130A                      u931 0658                      u780 0D48  
                    u860 131C                      u940 0660                      u781 0D44  
                    u861 1318                      u790 0D86                      u870 1632  
                    u950 0672                      u791 0D82                      u871 162E  
                    u951 066E                      u880 167C                      u960 06A0  
                    u881 1676                      u961 069C                      u890 167E  
                    u970 06BC                      u971 06B8                      u980 06E8  
                    u981 06E4                      u990 06FE                      u991 06FA  
                    _abs 1618                      _pad 1288                      wreg 000FE8  
                   ?_abs 0015                     l1500 0BC0                     l1510 0C16  
                   l1502 0BE0                     l1600 15A6                     l1520 0C98  
                   l1512 0C2A                     l1504 0BE4                     l1610 16E6  
                   l1602 15C8                     l1530 0CE2                     l1522 0C9A  
                   l1514 0C38                     l1506 0BF0                     l1604 15CC  
                   l1524 0CAC                     l1516 0C4A                     l1508 0C0E  
                   l1540 0D36                     l1620 062E                     l1702 0F4A  
                   l1518 0C78                     l1526 0CB2                     l1550 0D8E  
                   l1542 0D3A                     l1534 0D04                     l1470 120A  
                   l1462 11BE                     l1630 06A0                     l1622 064E  
                   l1616 16EC                     l1608 16D2                     l1720 1150  
                   l1712 10DC                     l1800 1704                     l1704 0F7A  
                   l1528 0CC2                     l1560 0E10                     l1552 0DA2  
                   l1544 0D48                     l1536 0D08                     l1472 1240  
                   l1464 11D0                     l1480 15F2                     l1640 06EE  
                   l1632 06A2                     l1624 0662                     l1730 11BA  
                   l1722 1168                     l1714 1144                     l1802 1706  
                   l1706 0F8C                     l1490 0B7C                     l1554 0DB0  
                   l1562 0E16                     l1546 0D68                     l1538 0D16  
                   l1466 11E2                     l1482 15F6                     l1570 1288  
                   l1650 0728                     l1642 06FE                     l1634 06BC  
                   l1626 0672                     l1810 1584                     l1820 1722  
                   l1724 1182                     l1716 1146                     l1484 16AA  
                   l1492 0B80                     l1564 0E26                     l1556 0DDE  
                   l1548 0D86                     l1468 11EC                     l1476 15D4  
                   l1580 12D8                     l1572 1296                     l1652 072E  
                   l1660 0820                     l1644 070A                     l1636 06D8  
                   l1628 0692                     l1740 0924                     l1732 08E2  
                   l1804 1540                     l1900 1492                     l1814 1730  
                   l1726 119E                     l1718 1148                     l1830 13E0  
                   l1822 13D2                     l1486 16C6                     l1494 0B8E  
                   l1566 0E46                     l1558 0DFE                     l1590 1632  
                   l1478 15E0                     l1582 12EC                     l1574 12AA  
                   l1662 083A                     l1670 089A                     l1654 07B0  
                   l1646 0712                     l1638 06E8                     l1750 0950  
                   l1742 0930                     l1734 0906                     l1806 154C  
                   l1902 14A4                     l1816 170E                     l1728 11B8  
                   l1832 13E2                     l1824 13D6                     l1592 1658  
                   l1680 0E68                     l1496 0BAE                     l1584 12F0  
                   l1576 12B8                     l1672 08AA                     l1664 0858  
                   l1656 07B6                     l1648 071E                     l1760 09FE  
                   l1744 0932                     l1752 0984                     l1736 0914  
                   l1808 1568                     l1904 14BC                     l1818 171A  
                   l1850 1410                     l1834 13E4                     l1826 13D8  
                   l1690 0ED0                     l1682 0E7C                     l1498 0BB2  
                   l1586 131C                     l1578 12C4                     l1674 08B0  
                   l1666 0872                     l1658 07BC                     l1770 0A72  
                   l1762 0A0C                     l1754 0996                     l1746 0944  
                   l1738 0920                     l1906 14D8                     l1860 1442  
                   l1852 1420                     l1844 13FA                     l1836 13E6  
                   l1828 13DA                     l1596 158E                     l1692 0ED8  
                   l1588 1618                     l1676 08C0                     l1668 088C  
                   l1772 0A82                     l1764 0A2C                     l1756 09BA  
                   l1862 1458                     l1854 1426                     l1846 1400  
                   l1838 13F6                     l1870 134E                     l1598 1592  
                   l1694 0EE0                     l1686 0E80                     l1782 0B40  
                   l1774 0A9E                     l1758 09F0                     l1864 1460  
                   l1856 142E                     l1848 140E                     l1880 13A0  
                   l1872 1360                     l1696 0F14                     l1688 0E9C  
                   l1776 0ABA                     l1768 0A3A                     l1858 143C  
                   l1874 1366                     l1866 1334                     l1778 0B10  
                   l1786 0B52                     l1890 152E                     l1882 14F2  
                   l1796 16F2                     l1876 1374                     l1868 1344  
                   l1884 1502                     l1798 16FC                     l1878 139C  
                   l1990 0976                     l1886 150A                     l1894 1470  
                   ?_pad 0013                     l1992 0EFE                     l1888 1512  
                   l1896 147C                     l1898 1480                     STR_1 0611  
                   STR_2 061D                     STR_3 0626                     STR_4 0601  
                   u1000 083A                     u1001 0836                     u1010 0858  
                   u1011 0854                     u1020 0872                     u1100 0906  
                   u1021 086E                     u1101 0902                     u1030 088C  
                   u1110 0996                     u1031 0888                     u1111 0992  
                   u1200 1344                     u1040 089A                     u1120 09BA  
                   u1201 1340                     u1041 0896                     u1121 09B6  
                   u1210 1360                     u1050 08AA                     u1130 09FE  
                   u1211 135C                     u1051 08A6                     u1131 09FA  
                   u1220 1394                     u1060 0E9C                     u1140 0A72  
                   u1061 0E98                     u1141 0A6E                     u1230 13C0  
                   u1070 0ECC                     u1150 0A9E                     u1071 0EC8  
                   u1151 0A9A                     u1240 13D0                     u1080 0F7A  
                   u1160 0ABA                     u1241 13CC                     u1081 0F76  
                   u1161 0AB6                     u1090 0F8C                     u1307 1436  
                   u1227 138A                     u1091 0F88                     u1180 1584  
                   u1317 1448                     u1237 13B6                     u1181 1580  
                   u1190 1420                     u1327 145A                     u1191 141C  
                   u1175 16FA                     u1176 16FC                     u1337 1468  
                   u1257 14AE                     u1347 114A                     u1267 16FE  
                   u1277 13EC                     u1287 1406                     u1297 1428  
                   i2l50 1044                     i2l51 1042                     i2l66 10D6  
                   i2l59 10D4                     abs@a 0015                     _dbuf 0080  
                   _atoi 0E68                     _main 1470                     _dtoa 062E  
                   _prec 0075                     pad@i 001A                     pad@p 0017  
                   fsr1h 000FE2                     fsr2h 000FDA                     indf1 000FE7  
                   indf2 000FDF                     fsr1l 000FE1                     pad@w 001C  
                   fsr2l 000FD9                     btemp 007A                     prodh 000FF4  
                   prodl 000FF3                     start 000E             ___param_bank 000000  
                  ??_abs 0017                    ??_pad 0019            ??_Ext_Counter 0001  
        __end_of___aodiv 0D04                    ?_atoi 0009                    ?_main 0001  
                  ?_dtoa 001E          __end_of___aomod 0E68             vfpfcnvrt@fmt 0043  
                  _PORTB 000F81                    _PORTC 000F82                    _PORTD 000F83  
                  _TRISB 000F93                    _TRISC 000F94                    _TRISD 000F95  
        __end_of_lcd_cmd 11BE                    _flags 0079                    _fputc 11BE  
                  _fputs 15D4          __end_of_isdigit 1684                    atoi@n 0010  
                  pad@fp 0013                    atoi@s 0009                    _width 0073  
                  _putch 173A                    dtoa@d 0020                    dtoa@i 003E  
                  dtoa@n 0036                    dtoa@p 0032                    dtoa@s 0040  
                  dtoa@w 0034          __end_of_isspace 15D4          __end_of_set_bit 16F0  
                  tablat 000FF5                    ttemp5 007B                    ttemp6 007E  
                  ttemp7 0082                    status 000FD8                    wtemp8 007B  
        __end_of_sprintf 1540             lcd_write@end 000C             lcd_write@col 0009  
           lcd_write@lin 000D             lcd_write@str 000A          __initialization 1684  
           __end_of_atoi 0FB2             __end_of_main 14F2             __end_of_dtoa 08E2  
        ??_lcd_send_byte 0008                   ??_atoi 000B                   ??_main 0071  
                 ??_dtoa 0028            __activetblptr 000002      __end_of_Ext_Counter 10DA  
       ??_config_EXT_INT 0003                   _ADCON1 000FC1                   ?_fputc 0003  
                 ?_fputs 000C                   ?_putch 0001                   i2l1410 1078  
                 i2l1402 1006                   i2l1412 1080                   i2l1420 1098  
                 i2l1404 1052                   i2l1414 1088                   i2l1406 1058  
                 i2l1416 1090                   i2l1392 0FE6                   i2l1384 0FB4  
                 i2l1394 0FEE                   i2l1386 0FC2                   i2l1396 0FF6  
                 i2l1388 0FC6                   i2l1398 0FFE                   i2l1994 101C  
                 i2l1996 10AE                   _INTCON 000FF2                   _OSCCON 000FD3  
          vfpfcnvrt@done 0052             vfprintf@cfmt 005C         __end_of_lcd_init 1470  
              ??___aodiv 0013                ??___aomod 0013                   ___wmul 16AA  
                 clear_0 168A                   clear_1 1696                   isa$std 000001  
                 pad@buf 0015                ??_lcd_cmd 0005                   dtoa@fp 001E  
                 fputc@c 0003                   fputs@c 0010                   fputs@i 0011  
                 fputs@s 000C                ??_isdigit 0005             __mediumconst 0000  
              ??_isspace 0005                ??_set_bit 0004                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                   putch@c 0001  
       __end_of_vfprintf 158E                ??_sprintf 0064               __accesstop 0080  
__end_of__initialization 169C            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_fputc 1288            __end_of_fputs 1618            __end_of_putch 173C  
            _Ext_Counter 0008                  ??_fputc 0007                  ??_fputs 0010  
                ??_putch 0003               __pbssBANK0 0080                  ?___wmul 0003  
                _INTCON2 000FF1                  _INTCON3 000FF0       lcd_send_byte@level 0008  
                i2u61_40 0FC2                  i2u61_41 0FBE                  i2u62_40 0FE2  
                i2u62_41 0FDE                  _OSCTUNE 000F9B                  i2u63_40 1052  
                i2u63_41 104E                  i2u64_40 1074                  i2u64_41 1070  
              ?_lcd_init 0001                  __Hparam 0000                  __Lparam 0000  
      __end_of_config_IO 1722                  ___aodiv 0B7C                  ___aomod 0D04  
      __end_of_lcd_write 13D2                ?_vfprintf 0056              set_bit@comp 0003  
           __psmallconst 0600                  __pcinit 1684                  __ramtop 0600  
                __ptext0 1470                  __ptext1 14F2                  __ptext2 1540  
                __ptext3 08E2                  __ptext4 062E                  __ptext5 1288  
                __ptext6 15D4                  __ptext7 11BE                  __ptext8 173A  
                __ptext9 1618                  _lcd_cmd 10DA                  _counter 0077  
                _isdigit 1658                  _isspace 158E                  _set_bit 16D0  
                atoi@neg 000E                  _sprintf 14F2               ??_lcd_init 0007  
         __pintcode_body 0FB2     end_of_initialization 169C                  fputc@fp 0005  
          __Lmediumconst 0000                  int_func 0FB2                  fputs@fp 000E  
      __end_of_vfpfcnvrt 0B7C                  postdec2 000FDD                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE         vfpfcnvrt@convarg 004A  
             ??_vfprintf 005C    __end_of_lcd_send_byte 170E                _PORTDbits 000F83  
              _PORTEbits 000F84                _TRISEbits 000F96               lcd_cmd@cmd 0006  
          ??_config_FOSC 0003                _BufferLCD 00A0              vfpfcnvrt@ap 0045  
            vfpfcnvrt@cp 0054              vfpfcnvrt@fp 0041           __end_of___wmul 16D0  
           ?_Ext_Counter 0001      start_initialization 1684              __end_of_abs 1658  
            __end_of_pad 1332              vfprintf@fmt 0058      __end_of_config_FOSC 173A  
               ??___wmul 0007              __pbssCOMRAM 0073         ___aodiv@dividend 0003  
              __pintcode 0008                 ?___aodiv 0003                 ?___aomod 0003  
       ___aodiv@quotient 0015                _config_IO 170E        lcd_send_byte@data 0007  
               ?_lcd_cmd 0001                _lcd_write 1332              __smallconst 0600  
               ?_isdigit 0003                 ?_isspace 0003                 ?_set_bit 0003  
             set_bit@cmd 0004                 ?_sprintf 005E           ___wmul@product 0007  
            _config_FOSC 1730                _vfpfcnvrt 08E2               ?_config_IO 0001  
             ?_lcd_write 0009        ___wmul@multiplier 0003                lcd_init@i 0008  
            _INTCON3bits 000FF0           _config_EXT_INT 1722                 __Hrparam 0000  
             vfprintf@ap 005A                 __Lrparam 0000               vfprintf@fp 0056  
             ?_vfpfcnvrt 0041          ___aodiv@divisor 000B          ___aodiv@counter 0013  
             sprintf@fmt 0060                 _dtoa$945 0030                 __ptext10 0D04  
               __ptext11 0B7C                 __ptext20 16D0                 __ptext12 0E68  
               __ptext21 170E                 __ptext13 158E                 __ptext22 1730  
               __ptext14 1658                 __ptext23 1722                 __ptext15 16AA  
               __ptext16 1332                 __ptext17 16F0                 __ptext18 13D2  
               __ptext19 10DA                 _lcd_init 13D2   __end_of_config_EXT_INT 1730  
               isa$xinst 000000                 int$flags 007A                 _vfprintf 1540  
            ??_config_IO 0003              _isspace$994 0007              ??_lcd_write 000C  
       ___aomod@dividend 0003               _INTCONbits 000FF2                 isdigit@c 0003  
               intlevel2 0000                sprintf@ap 0064                 isspace@c 0003  
        ?_config_EXT_INT 0001          ___aomod@divisor 000B              ??_vfpfcnvrt 0047  
        ___aomod@counter 0013            _lcd_send_byte 16F0                 sprintf@f 0066  
               sprintf@s 005E             ___aodiv@sign 0014             ?_config_FOSC 0001  
           ___aomod@sign 0014  
