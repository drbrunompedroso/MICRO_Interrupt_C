

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Wed Aug 10 14:36:09 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=3
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=3
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    41                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    42  0000                     
    43                           ; Version 2.40
    44                           ; Generated 17/11/2021 GMT
    45                           ; 
    46                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    47                           ; All rights reserved.
    48                           ; 
    49                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    50                           ; 
    51                           ; Redistribution and use in source and binary forms, with or without modification, are
    52                           ; permitted provided that the following conditions are met:
    53                           ; 
    54                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    55                           ;        conditions and the following disclaimer.
    56                           ; 
    57                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    58                           ;        of conditions and the following disclaimer in the documentation and/or other
    59                           ;        materials provided with the distribution. Publication is not required when
    60                           ;        this file is used in an embedded application.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F4520 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     _PORTDbits	set	3971
    79  0000                     _INTCONbits	set	4082
    80  0000                     _PORTB	set	3969
    81  0000                     _TRISB	set	3987
    82  0000                     _OSCTUNE	set	3995
    83  0000                     _OSCCON	set	4051
    84  0000                     _INTCON2	set	4081
    85  0000                     _INTCON	set	4082
    86  0000                     _ADCON1	set	4033
    87  0000                     _TRISEbits	set	3990
    88  0000                     _TRISD	set	3989
    89  0000                     _TRISC	set	3988
    90  0000                     _PORTEbits	set	3972
    91  0000                     _PORTD	set	3971
    92  0000                     _PORTC	set	3970
    93                           
    94                           	psect	smallconst
    95  000600                     __psmallconst:
    96                           	callstack 0
    97  000600  00                 	db	0
    98  000601                     STR_4:
    99  000601  20                 	db	32
   100  000602  20                 	db	32
   101  000603  20                 	db	32
   102  000604  20                 	db	32
   103  000605  20                 	db	32
   104  000606  20                 	db	32
   105  000607  20                 	db	32
   106  000608  20                 	db	32
   107  000609  20                 	db	32
   108  00060A  20                 	db	32
   109  00060B  20                 	db	32
   110  00060C  20                 	db	32
   111  00060D  20                 	db	32
   112  00060E  20                 	db	32
   113  00060F  20                 	db	32
   114  000610  00                 	db	0
   115  000611                     STR_1:
   116  000611  49                 	db	73	;'I'
   117  000612  4E                 	db	78	;'N'
   118  000613  54                 	db	84	;'T'
   119  000614  20                 	db	32
   120  000615  45                 	db	69	;'E'
   121  000616  58                 	db	88	;'X'
   122  000617  54                 	db	84	;'T'
   123  000618  45                 	db	69	;'E'
   124  000619  52                 	db	82	;'R'
   125  00061A  4E                 	db	78	;'N'
   126  00061B  41                 	db	65	;'A'
   127  00061C  00                 	db	0
   128  00061D                     STR_2:
   129  00061D  43                 	db	67	;'C'
   130  00061E  6F                 	db	111	;'o'
   131  00061F  75                 	db	117	;'u'
   132  000620  6E                 	db	110	;'n'
   133  000621  74                 	db	116	;'t'
   134  000622  65                 	db	101	;'e'
   135  000623  72                 	db	114	;'r'
   136  000624  3A                 	db	58	;':'
   137  000625  00                 	db	0
   138  000626                     STR_3:
   139  000626  25                 	db	37
   140  000627  30                 	db	48	;'0'
   141  000628  31                 	db	49	;'1'
   142  000629  64                 	db	100	;'d'
   143  00062A  00                 	db	0
   144  00062B  00                 	db	0	; dummy byte at the end
   145  0000                     
   146                           ; #config settings
   147                           
   148                           	psect	cinit
   149  001768                     __pcinit:
   150                           	callstack 0
   151  001768                     start_initialization:
   152                           	callstack 0
   153  001768                     __initialization:
   154                           	callstack 0
   155                           
   156                           ; Clear objects allocated to BANK0 (48 bytes)
   157  001768  EE00  F080         	lfsr	0,__pbssBANK0
   158  00176C  0E30               	movlw	48
   159  00176E                     clear_0:
   160  00176E  6AEE               	clrf	postinc0,c
   161  001770  06E8               	decf	wreg,f,c
   162  001772  E1FD               	bnz	clear_0
   163                           
   164                           ; Clear objects allocated to COMRAM (10 bytes)
   165  001774  EE00  F073         	lfsr	0,__pbssCOMRAM
   166  001778  0E0A               	movlw	10
   167  00177A                     clear_1:
   168  00177A  6AEE               	clrf	postinc0,c
   169  00177C  06E8               	decf	wreg,f,c
   170  00177E  E1FD               	bnz	clear_1
   171  001780                     end_of_initialization:
   172                           	callstack 0
   173  001780                     __end_of__initialization:
   174                           	callstack 0
   175  001780  907D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   176  001782  927D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   177  001784  0E00               	movlw	low (__Lmediumconst shr (0+16))
   178  001786  6EF8               	movwf	tblptru,c
   179  001788  0100               	movlb	0
   180  00178A  EF7B  F00A         	goto	_main	;jump to C main() function
   181                           
   182                           	psect	bssCOMRAM
   183  000073                     __pbssCOMRAM:
   184                           	callstack 0
   185  000073                     _nout:
   186                           	callstack 0
   187  000073                     	ds	2
   188  000075                     _width:
   189                           	callstack 0
   190  000075                     	ds	2
   191  000077                     _prec:
   192                           	callstack 0
   193  000077                     	ds	2
   194  000079                     _flags:
   195                           	callstack 0
   196  000079                     	ds	2
   197  00007B                     _counter:
   198                           	callstack 0
   199  00007B                     	ds	2
   200                           
   201                           	psect	bssBANK0
   202  000080                     __pbssBANK0:
   203                           	callstack 0
   204  000080                     _dbuf:
   205                           	callstack 0
   206  000080                     	ds	32
   207  0000A0                     _BufferLCD:
   208                           	callstack 0
   209  0000A0                     	ds	16
   210                           
   211                           	psect	cstackCOMRAM
   212  000001                     __pcstackCOMRAM:
   213                           	callstack 0
   214  000001                     ??_int_EXT:
   215  000001                     
   216                           ; 1 bytes @ 0x0
   217  000001                     	ds	2
   218  000003                     ?_strlen:
   219                           	callstack 0
   220  000003                     ?_isdigit:
   221                           	callstack 0
   222  000003                     ?_isspace:
   223                           	callstack 0
   224  000003                     ?___wmul:
   225                           	callstack 0
   226  000003                     ?___aodiv:
   227                           	callstack 0
   228  000003                     ?___aomod:
   229                           	callstack 0
   230  000003                     set_bit@comp:
   231                           	callstack 0
   232  000003                     ___wmul@multiplier:
   233                           	callstack 0
   234  000003                     isdigit@c:
   235                           	callstack 0
   236  000003                     isspace@c:
   237                           	callstack 0
   238  000003                     fputc@c:
   239                           	callstack 0
   240  000003                     strlen@s:
   241                           	callstack 0
   242  000003                     ___aodiv@dividend:
   243                           	callstack 0
   244  000003                     ___aomod@dividend:
   245                           	callstack 0
   246                           
   247                           ; 8 bytes @ 0x2
   248  000003                     	ds	1
   249  000004                     set_bit@cmd:
   250                           	callstack 0
   251                           
   252                           ; 1 bytes @ 0x3
   253  000004                     	ds	1
   254  000005                     ??_lcd_cmd:
   255  000005                     ??_isdigit:
   256  000005                     ??_isspace:
   257  000005                     ___wmul@multiplicand:
   258                           	callstack 0
   259  000005                     fputc@fp:
   260                           	callstack 0
   261  000005                     strlen@a:
   262                           	callstack 0
   263                           
   264                           ; 2 bytes @ 0x4
   265  000005                     	ds	1
   266  000006                     lcd_cmd@cmd:
   267                           	callstack 0
   268                           
   269                           ; 1 bytes @ 0x5
   270  000006                     	ds	1
   271  000007                     ??_lcd_init:
   272  000007                     ??_fputc:
   273  000007                     lcd_send_byte@data:
   274                           	callstack 0
   275  000007                     ___wmul@product:
   276                           	callstack 0
   277                           
   278                           ; 2 bytes @ 0x6
   279  000007                     	ds	1
   280  000008                     lcd_init@i:
   281                           	callstack 0
   282  000008                     lcd_send_byte@level:
   283                           	callstack 0
   284                           
   285                           ; 1 bytes @ 0x7
   286  000008                     	ds	1
   287  000009                     lcd_write@col:
   288                           	callstack 0
   289  000009                     _isspace$946:
   290                           	callstack 0
   291                           
   292                           ; 1 bytes @ 0x8
   293  000009                     	ds	1
   294  00000A                     ?_atoi:
   295                           	callstack 0
   296  00000A                     lcd_write@str:
   297                           	callstack 0
   298  00000A                     atoi@s:
   299                           	callstack 0
   300                           
   301                           ; 2 bytes @ 0x9
   302  00000A                     	ds	1
   303  00000B                     ___aodiv@divisor:
   304                           	callstack 0
   305  00000B                     ___aomod@divisor:
   306                           	callstack 0
   307                           
   308                           ; 8 bytes @ 0xA
   309  00000B                     	ds	1
   310  00000C                     ??_atoi:
   311  00000C                     lcd_write@end:
   312                           	callstack 0
   313  00000C                     fputs@s:
   314                           	callstack 0
   315                           
   316                           ; 2 bytes @ 0xB
   317  00000C                     	ds	1
   318  00000D                     lcd_write@lin:
   319                           	callstack 0
   320                           
   321                           ; 1 bytes @ 0xC
   322  00000D                     	ds	1
   323  00000E                     fputs@fp:
   324                           	callstack 0
   325                           
   326                           ; 2 bytes @ 0xD
   327  00000E                     	ds	2
   328  000010                     fputs@c:
   329                           	callstack 0
   330  000010                     atoi@neg:
   331                           	callstack 0
   332                           
   333                           ; 2 bytes @ 0xF
   334  000010                     	ds	1
   335  000011                     fputs@i:
   336                           	callstack 0
   337                           
   338                           ; 2 bytes @ 0x10
   339  000011                     	ds	1
   340  000012                     atoi@n:
   341                           	callstack 0
   342                           
   343                           ; 2 bytes @ 0x11
   344  000012                     	ds	1
   345  000013                     ?_pad:
   346                           	callstack 0
   347  000013                     ___aodiv@counter:
   348                           	callstack 0
   349  000013                     ___aomod@counter:
   350                           	callstack 0
   351  000013                     pad@fp:
   352                           	callstack 0
   353                           
   354                           ; 2 bytes @ 0x12
   355  000013                     	ds	1
   356  000014                     ___aodiv@sign:
   357                           	callstack 0
   358  000014                     ___aomod@sign:
   359                           	callstack 0
   360                           
   361                           ; 1 bytes @ 0x13
   362  000014                     	ds	1
   363  000015                     ?_abs:
   364                           	callstack 0
   365  000015                     pad@buf:
   366                           	callstack 0
   367  000015                     abs@a:
   368                           	callstack 0
   369  000015                     ___aodiv@quotient:
   370                           	callstack 0
   371                           
   372                           ; 8 bytes @ 0x14
   373  000015                     	ds	2
   374  000017                     ??_abs:
   375  000017                     pad@p:
   376                           	callstack 0
   377                           
   378                           ; 2 bytes @ 0x16
   379  000017                     	ds	2
   380  000019                     ??_pad:
   381                           
   382                           ; 1 bytes @ 0x18
   383  000019                     	ds	1
   384  00001A                     pad@i:
   385                           	callstack 0
   386                           
   387                           ; 2 bytes @ 0x19
   388  00001A                     	ds	2
   389  00001C                     pad@w:
   390                           	callstack 0
   391                           
   392                           ; 2 bytes @ 0x1B
   393  00001C                     	ds	2
   394  00001E                     ?_dtoa:
   395                           	callstack 0
   396  00001E                     dtoa@fp:
   397                           	callstack 0
   398                           
   399                           ; 2 bytes @ 0x1D
   400  00001E                     	ds	2
   401  000020                     dtoa@d:
   402                           	callstack 0
   403                           
   404                           ; 8 bytes @ 0x1F
   405  000020                     	ds	8
   406  000028                     ??_dtoa:
   407                           
   408                           ; 1 bytes @ 0x27
   409  000028                     	ds	8
   410  000030                     _dtoa$897:
   411                           	callstack 0
   412                           
   413                           ; 2 bytes @ 0x2F
   414  000030                     	ds	2
   415  000032                     dtoa@p:
   416                           	callstack 0
   417                           
   418                           ; 2 bytes @ 0x31
   419  000032                     	ds	2
   420  000034                     dtoa@w:
   421                           	callstack 0
   422                           
   423                           ; 2 bytes @ 0x33
   424  000034                     	ds	2
   425  000036                     dtoa@s:
   426                           	callstack 0
   427                           
   428                           ; 2 bytes @ 0x35
   429  000036                     	ds	2
   430  000038                     dtoa@n:
   431                           	callstack 0
   432                           
   433                           ; 8 bytes @ 0x37
   434  000038                     	ds	8
   435  000040                     dtoa@i:
   436                           	callstack 0
   437                           
   438                           ; 2 bytes @ 0x3F
   439  000040                     	ds	2
   440  000042                     ?_vfpfcnvrt:
   441                           	callstack 0
   442  000042                     vfpfcnvrt@fp:
   443                           	callstack 0
   444                           
   445                           ; 2 bytes @ 0x41
   446  000042                     	ds	2
   447  000044                     vfpfcnvrt@fmt:
   448                           	callstack 0
   449                           
   450                           ; 2 bytes @ 0x43
   451  000044                     	ds	2
   452  000046                     vfpfcnvrt@ap:
   453                           	callstack 0
   454                           
   455                           ; 2 bytes @ 0x45
   456  000046                     	ds	2
   457  000048                     ??_vfpfcnvrt:
   458                           
   459                           ; 1 bytes @ 0x47
   460  000048                     	ds	4
   461  00004C                     vfpfcnvrt@ll:
   462                           	callstack 0
   463                           
   464                           ; 8 bytes @ 0x4B
   465  00004C                     	ds	8
   466  000054                     vfpfcnvrt@done:
   467                           	callstack 0
   468                           
   469                           ; 2 bytes @ 0x53
   470  000054                     	ds	2
   471  000056                     ?_vfprintf:
   472                           	callstack 0
   473  000056                     vfprintf@fp:
   474                           	callstack 0
   475                           
   476                           ; 2 bytes @ 0x55
   477  000056                     	ds	2
   478  000058                     vfprintf@fmt:
   479                           	callstack 0
   480                           
   481                           ; 2 bytes @ 0x57
   482  000058                     	ds	2
   483  00005A                     vfprintf@ap:
   484                           	callstack 0
   485                           
   486                           ; 2 bytes @ 0x59
   487  00005A                     	ds	2
   488  00005C                     vfprintf@cfmt:
   489                           	callstack 0
   490                           
   491                           ; 2 bytes @ 0x5B
   492  00005C                     	ds	2
   493  00005E                     ?_sprintf:
   494                           	callstack 0
   495  00005E                     sprintf@s:
   496                           	callstack 0
   497                           
   498                           ; 2 bytes @ 0x5D
   499  00005E                     	ds	2
   500  000060                     sprintf@fmt:
   501                           	callstack 0
   502                           
   503                           ; 2 bytes @ 0x5F
   504  000060                     	ds	4
   505  000064                     sprintf@ap:
   506                           	callstack 0
   507                           
   508                           ; 2 bytes @ 0x63
   509  000064                     	ds	2
   510  000066                     sprintf@f:
   511                           	callstack 0
   512                           
   513                           ; 11 bytes @ 0x65
   514  000066                     	ds	11
   515  000071                     ??_main:
   516                           
   517                           ; 1 bytes @ 0x70
   518  000071                     	ds	2
   519                           
   520 ;;
   521 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   522 ;;
   523 ;; *************** function _main *****************
   524 ;; Defined at:
   525 ;;		line 121 in file "Program_Interrupt_LEDs.c"
   526 ;; Parameters:    Size  Location     Type
   527 ;;		None
   528 ;; Auto vars:     Size  Location     Type
   529 ;;		None
   530 ;; Return value:  Size  Location     Type
   531 ;;                  1    wreg      void 
   532 ;; Registers used:
   533 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   534 ;; Tracked objects:
   535 ;;		On entry : 0/0
   536 ;;		On exit  : 0/0
   537 ;;		Unchanged: 0/0
   538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   539 ;;      Params:         0       0       0       0       0       0       0
   540 ;;      Locals:         0       0       0       0       0       0       0
   541 ;;      Temps:          2       0       0       0       0       0       0
   542 ;;      Totals:         2       0       0       0       0       0       0
   543 ;;Total ram usage:        2 bytes
   544 ;; Hardware stack levels required when called: 9
   545 ;; This function calls:
   546 ;;		_config_EXT_INT
   547 ;;		_config_FOSC
   548 ;;		_config_IO
   549 ;;		_lcd_init
   550 ;;		_lcd_write
   551 ;;		_sprintf
   552 ;; This function is called by:
   553 ;;		Startup code after reset
   554 ;; This function uses a non-reentrant model
   555 ;;
   556                           
   557                           	psect	text0
   558  0014F6                     __ptext0:
   559                           	callstack 0
   560  0014F6                     _main:
   561                           	callstack 22
   562  0014F6                     
   563                           ;Program_Interrupt_LEDs.c: 123:     config_FOSC();
   564  0014F6  EC03  F00C         	call	_config_FOSC	;wreg free
   565                           
   566                           ;Program_Interrupt_LEDs.c: 124:     config_IO();
   567  0014FA  ECF9  F00B         	call	_config_IO	;wreg free
   568                           
   569                           ;Program_Interrupt_LEDs.c: 125:     config_EXT_INT();
   570  0014FE  EC08  F00C         	call	_config_EXT_INT	;wreg free
   571  001502                     
   572                           ;Program_Interrupt_LEDs.c: 127:     lcd_init();
   573  001502  EC2C  F00A         	call	_lcd_init	;wreg free
   574  001506                     
   575                           ;Program_Interrupt_LEDs.c: 128:     lcd_write(1,2,"INT EXTERNA");
   576  001506  0E02               	movlw	2
   577  001508  6E09               	movwf	lcd_write@col^0,c
   578  00150A  0E11               	movlw	low STR_1
   579  00150C  6E0A               	movwf	lcd_write@str^0,c
   580  00150E  0E06               	movlw	high STR_1
   581  001510  6E0B               	movwf	(lcd_write@str+1)^0,c
   582  001512  0E01               	movlw	1
   583  001514  ECDC  F009         	call	_lcd_write
   584  001518                     
   585                           ;Program_Interrupt_LEDs.c: 129:     lcd_write(2,2,"Counter:");
   586  001518  0E02               	movlw	2
   587  00151A  6E09               	movwf	lcd_write@col^0,c
   588  00151C  0E1D               	movlw	low STR_2
   589  00151E  6E0A               	movwf	lcd_write@str^0,c
   590  001520  0E06               	movlw	high STR_2
   591  001522  6E0B               	movwf	(lcd_write@str+1)^0,c
   592  001524  0E02               	movlw	2
   593  001526  ECDC  F009         	call	_lcd_write
   594  00152A                     l1975:
   595                           
   596                           ;Program_Interrupt_LEDs.c: 132:     {;Program_Interrupt_LEDs.c: 133:         _delay((uns
      +                          igned long)((100)*(8000000/4000.0)));
   597  00152A  0E02               	movlw	2
   598  00152C  6E72               	movwf	(??_main+1)^0,c
   599  00152E  0E04               	movlw	4
   600  001530  6E71               	movwf	??_main^0,c
   601  001532  0EBA               	movlw	186
   602  001534                     u1337:
   603  001534  2EE8               	decfsz	wreg,f,c
   604  001536  D7FE               	bra	u1337
   605  001538  2E71               	decfsz	??_main^0,f,c
   606  00153A  D7FC               	bra	u1337
   607  00153C  2E72               	decfsz	(??_main+1)^0,f,c
   608  00153E  D7FA               	bra	u1337
   609  001540  D000               	nop2	
   610  001542                     
   611                           ;Program_Interrupt_LEDs.c: 134:         sprintf(BufferLCD,"%01d", counter);
   612  001542  0EA0               	movlw	low _BufferLCD
   613  001544  6E5E               	movwf	sprintf@s^0,c
   614  001546  0E00               	movlw	high _BufferLCD
   615  001548  6E5F               	movwf	(sprintf@s+1)^0,c
   616  00154A  0E26               	movlw	low STR_3
   617  00154C  6E60               	movwf	sprintf@fmt^0,c
   618  00154E  0E06               	movlw	high STR_3
   619  001550  6E61               	movwf	(sprintf@fmt+1)^0,c
   620  001552  C07B  F062         	movff	_counter,?_sprintf+4
   621  001556  C07C  F063         	movff	_counter+1,?_sprintf+5
   622  00155A  EC14  F00B         	call	_sprintf	;wreg free
   623  00155E                     
   624                           ;Program_Interrupt_LEDs.c: 135:         lcd_write(2,10,BufferLCD);
   625  00155E  0E0A               	movlw	10
   626  001560  6E09               	movwf	lcd_write@col^0,c
   627  001562  0EA0               	movlw	low _BufferLCD
   628  001564  6E0A               	movwf	lcd_write@str^0,c
   629  001566  0E00               	movlw	high _BufferLCD
   630  001568  6E0B               	movwf	(lcd_write@str+1)^0,c
   631  00156A  0E02               	movlw	2
   632  00156C  ECDC  F009         	call	_lcd_write
   633  001570  EF95  F00A         	goto	l1975
   634  001574  EF07  F000         	goto	start
   635  001578                     __end_of_main:
   636                           	callstack 0
   637                           
   638 ;; *************** function _sprintf *****************
   639 ;; Defined at:
   640 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\nf_sprintf.c"
   641 ;; Parameters:    Size  Location     Type
   642 ;;  s               2   93[COMRAM] PTR unsigned char 
   643 ;;		 -> BufferLCD(16), 
   644 ;;  fmt             2   95[COMRAM] PTR const unsigned char 
   645 ;;		 -> STR_3(5), 
   646 ;; Auto vars:     Size  Location     Type
   647 ;;  f              11  101[COMRAM] struct _IO_FILE
   648 ;;  ap              2   99[COMRAM] PTR void [1]
   649 ;;		 -> ?_sprintf(2), 
   650 ;;  ret             2    0        int 
   651 ;; Return value:  Size  Location     Type
   652 ;;                  2   93[COMRAM] int 
   653 ;; Registers used:
   654 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   655 ;; Tracked objects:
   656 ;;		On entry : 0/0
   657 ;;		On exit  : 0/0
   658 ;;		Unchanged: 0/0
   659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   660 ;;      Params:         6       0       0       0       0       0       0
   661 ;;      Locals:        13       0       0       0       0       0       0
   662 ;;      Temps:          0       0       0       0       0       0       0
   663 ;;      Totals:        19       0       0       0       0       0       0
   664 ;;Total ram usage:       19 bytes
   665 ;; Hardware stack levels used: 1
   666 ;; Hardware stack levels required when called: 8
   667 ;; This function calls:
   668 ;;		_vfprintf
   669 ;; This function is called by:
   670 ;;		_main
   671 ;; This function uses a non-reentrant model
   672 ;;
   673                           
   674                           	psect	text1
   675  001628                     __ptext1:
   676                           	callstack 0
   677  001628                     _sprintf:
   678                           	callstack 22
   679  001628  0E62               	movlw	low (?_sprintf+4)
   680  00162A  6E64               	movwf	sprintf@ap^0,c
   681  00162C  0E00               	movlw	high (?_sprintf+4)
   682  00162E  6E65               	movwf	(sprintf@ap+1)^0,c
   683  001630  C05E  F066         	movff	sprintf@s,sprintf@f
   684  001634  C05F  F067         	movff	sprintf@s+1,sprintf@f+1
   685  001638  0E00               	movlw	0
   686  00163A  6E6A               	movwf	(sprintf@f+4)^0,c
   687  00163C  0E00               	movlw	0
   688  00163E  6E69               	movwf	(sprintf@f+3)^0,c
   689  001640  0E00               	movlw	0
   690  001642  6E70               	movwf	(sprintf@f+10)^0,c
   691  001644  0E00               	movlw	0
   692  001646  6E6F               	movwf	(sprintf@f+9)^0,c
   693  001648  0E66               	movlw	low sprintf@f
   694  00164A  6E56               	movwf	vfprintf@fp^0,c
   695  00164C  0E00               	movlw	high sprintf@f
   696  00164E  6E57               	movwf	(vfprintf@fp+1)^0,c
   697  001650  C060  F058         	movff	sprintf@fmt,vfprintf@fmt
   698  001654  C061  F059         	movff	sprintf@fmt+1,vfprintf@fmt+1
   699  001658  0E64               	movlw	low sprintf@ap
   700  00165A  6E5A               	movwf	vfprintf@ap^0,c
   701  00165C  0E00               	movlw	high sprintf@ap
   702  00165E  6E5B               	movwf	(vfprintf@ap+1)^0,c
   703  001660  ECBC  F00A         	call	_vfprintf	;wreg free
   704  001664  5069               	movf	(sprintf@f+3)^0,w,c
   705  001666  245E               	addwf	sprintf@s^0,w,c
   706  001668  6ED9               	movwf	fsr2l,c
   707  00166A  506A               	movf	(sprintf@f+4)^0,w,c
   708  00166C  205F               	addwfc	(sprintf@s+1)^0,w,c
   709  00166E  6EDA               	movwf	fsr2h,c
   710  001670  0E00               	movlw	0
   711  001672  6EDF               	movwf	indf2,c
   712  001674  0012               	return		;funcret
   713  001676                     __end_of_sprintf:
   714                           	callstack 0
   715                           
   716 ;; *************** function _vfprintf *****************
   717 ;; Defined at:
   718 ;;		line 1390 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
   719 ;; Parameters:    Size  Location     Type
   720 ;;  fp              2   85[COMRAM] PTR struct _IO_FILE
   721 ;;		 -> sprintf@f(11), 
   722 ;;  fmt             2   87[COMRAM] PTR const unsigned char 
   723 ;;		 -> STR_3(5), 
   724 ;;  ap              2   89[COMRAM] PTR PTR void 
   725 ;;		 -> sprintf@ap(2), 
   726 ;; Auto vars:     Size  Location     Type
   727 ;;  cfmt            2   91[COMRAM] PTR unsigned char 
   728 ;;		 -> STR_3(5), 
   729 ;; Return value:  Size  Location     Type
   730 ;;                  2   85[COMRAM] int 
   731 ;; Registers used:
   732 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   733 ;; Tracked objects:
   734 ;;		On entry : 0/0
   735 ;;		On exit  : 0/0
   736 ;;		Unchanged: 0/0
   737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   738 ;;      Params:         6       0       0       0       0       0       0
   739 ;;      Locals:         2       0       0       0       0       0       0
   740 ;;      Temps:          0       0       0       0       0       0       0
   741 ;;      Totals:         8       0       0       0       0       0       0
   742 ;;Total ram usage:        8 bytes
   743 ;; Hardware stack levels used: 1
   744 ;; Hardware stack levels required when called: 7
   745 ;; This function calls:
   746 ;;		_vfpfcnvrt
   747 ;; This function is called by:
   748 ;;		_sprintf
   749 ;; This function uses a non-reentrant model
   750 ;;
   751                           
   752                           	psect	text2
   753  001578                     __ptext2:
   754                           	callstack 0
   755  001578                     _vfprintf:
   756                           	callstack 22
   757  001578                     
   758                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1390: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.36\pic\source
      +                          s\c99\common\doprnt.c: 1391: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\comm
      +                          on\doprnt.c: 1393:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\
      +                          common\doprnt.c: 1395:     cfmt = (char *)fmt;
   759  001578  C058  F05C         	movff	vfprintf@fmt,vfprintf@cfmt
   760  00157C  C059  F05D         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   761  001580                     
   762                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1396:     nout = 
      +                          0;
   763  001580  0E00               	movlw	0
   764  001582  6E74               	movwf	(_nout+1)^0,c
   765  001584  0E00               	movlw	0
   766  001586  6E73               	movwf	_nout^0,c
   767                           
   768                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   769  001588  EFD8  F00A         	goto	l1885
   770  00158C                     l1883:
   771                           
   772                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1398:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
   773  00158C  C056  F042         	movff	vfprintf@fp,vfpfcnvrt@fp
   774  001590  C057  F043         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   775  001594  0E5C               	movlw	low vfprintf@cfmt
   776  001596  6E44               	movwf	vfpfcnvrt@fmt^0,c
   777  001598  0E00               	movlw	high vfprintf@cfmt
   778  00159A  6E45               	movwf	(vfpfcnvrt@fmt+1)^0,c
   779  00159C  C05A  F046         	movff	vfprintf@ap,vfpfcnvrt@ap
   780  0015A0  C05B  F047         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   781  0015A4  EC16  F003         	call	_vfpfcnvrt	;wreg free
   782  0015A8  5042               	movf	?_vfpfcnvrt^0,w,c
   783  0015AA  2673               	addwf	_nout^0,f,c
   784  0015AC  5043               	movf	(?_vfpfcnvrt+1)^0,w,c
   785  0015AE  2274               	addwfc	(_nout+1)^0,f,c
   786  0015B0                     l1885:
   787                           
   788                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1397:     while (
      +                          *cfmt) {
   789  0015B0  C05C  FFF6         	movff	vfprintf@cfmt,tblptrl
   790  0015B4  C05D  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   791  0015B8                     	if	0	;tblptru may be non-zero
   792  0015B8                     	endif
   793  0015B8                     	if	0	;tblptru may be non-zero
   794  0015B8                     	endif
   795  0015B8  0008               	tblrd		*
   796  0015BA  50F5               	movf	tablat,w,c
   797  0015BC  0900               	iorlw	0
   798  0015BE  A4D8               	btfss	status,2,c
   799  0015C0  EFE4  F00A         	goto	u1261
   800  0015C4  EFE6  F00A         	goto	u1260
   801  0015C8                     u1261:
   802  0015C8  EFC6  F00A         	goto	l1883
   803  0015CC                     u1260:
   804  0015CC                     
   805                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1400:     return 
      +                          nout;
   806  0015CC  C073  F056         	movff	_nout,?_vfprintf
   807  0015D0  C074  F057         	movff	_nout+1,?_vfprintf+1
   808  0015D4  0012               	return		;funcret
   809  0015D6                     __end_of_vfprintf:
   810                           	callstack 0
   811                           
   812 ;; *************** function _vfpfcnvrt *****************
   813 ;; Defined at:
   814 ;;		line 692 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
   815 ;; Parameters:    Size  Location     Type
   816 ;;  fp              2   65[COMRAM] PTR struct _IO_FILE
   817 ;;		 -> sprintf@f(11), 
   818 ;;  fmt             2   67[COMRAM] PTR PTR unsigned char 
   819 ;;		 -> vfprintf@cfmt(2), 
   820 ;;  ap              2   69[COMRAM] PTR PTR void 
   821 ;;		 -> sprintf@ap(2), 
   822 ;; Auto vars:     Size  Location     Type
   823 ;;  ll              8   75[COMRAM] long long 
   824 ;;  llu             8    0        unsigned long long 
   825 ;;  f               4    0        unsigned long long 
   826 ;;  vp              3    0        PTR void 
   827 ;;  ct              3    0        unsigned char [3]
   828 ;;  cp              3    0        PTR unsigned char 
   829 ;;  done            2   83[COMRAM] int 
   830 ;;  i               2    0        int 
   831 ;;  c               1    0        unsigned char 
   832 ;; Return value:  Size  Location     Type
   833 ;;                  2   65[COMRAM] int 
   834 ;; Registers used:
   835 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   836 ;; Tracked objects:
   837 ;;		On entry : 0/0
   838 ;;		On exit  : 0/0
   839 ;;		Unchanged: 0/0
   840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   841 ;;      Params:         6       0       0       0       0       0       0
   842 ;;      Locals:        10       0       0       0       0       0       0
   843 ;;      Temps:          4       0       0       0       0       0       0
   844 ;;      Totals:        20       0       0       0       0       0       0
   845 ;;Total ram usage:       20 bytes
   846 ;; Hardware stack levels used: 1
   847 ;; Hardware stack levels required when called: 6
   848 ;; This function calls:
   849 ;;		_atoi
   850 ;;		_dtoa
   851 ;;		_fputc
   852 ;;		_isdigit
   853 ;; This function is called by:
   854 ;;		_vfprintf
   855 ;; This function uses a non-reentrant model
   856 ;;
   857                           
   858                           	psect	text3
   859  00062C                     __ptext3:
   860                           	callstack 0
   861  00062C                     _vfpfcnvrt:
   862                           	callstack 22
   863  00062C                     
   864                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 692: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.36\pic\sou
      +                          rces\c99\common\doprnt.c: 693: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\co
      +                          mmon\doprnt.c: 694:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.36\pic\sou
      +                          rces\c99\common\doprnt.c: 695:     int done, i;;C:\Program Files\Microchip\xc8\v2.36\pic
      +                          \sources\c99\common\doprnt.c: 696:     long long ll;;C:\Program Files\Microchip\xc8\v2.3
      +                          6\pic\sources\c99\common\doprnt.c: 697:     unsigned long long llu;
   865  00062C  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   866  000630  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   867  000634  CFDE FFF6          	movff	postinc2,tblptrl
   868  000638  CFDD FFF7          	movff	postdec2,tblptrh
   869  00063C                     	if	0	;tblptru may be non-zero
   870  00063C                     	endif
   871  00063C                     	if	0	;tblptru may be non-zero
   872  00063C                     	endif
   873  00063C  0008               	tblrd		*
   874  00063E  50F5               	movf	tablat,w,c
   875  000640  0A25               	xorlw	37
   876  000642  A4D8               	btfss	status,2,c
   877  000644  EF26  F003         	goto	u1161
   878  000648  EF28  F003         	goto	u1160
   879  00064C                     u1161:
   880  00064C  EFA1  F004         	goto	l1859
   881  000650                     u1160:
   882  000650                     
   883                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 703:         ++*f
      +                          mt;
   884  000650  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   885  000654  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   886  000658  2ADE               	incf	postinc2,f,c
   887  00065A  0E00               	movlw	0
   888  00065C  22DD               	addwfc	postdec2,f,c
   889  00065E                     
   890                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 705:         flag
      +                          s = width = 0;
   891  00065E  0E00               	movlw	0
   892  000660  6E76               	movwf	(_width+1)^0,c
   893  000662  0E00               	movlw	0
   894  000664  6E75               	movwf	_width^0,c
   895  000666  C075  F079         	movff	_width,_flags
   896  00066A  C076  F07A         	movff	_width+1,_flags+1
   897  00066E                     
   898                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 706:         prec
      +                           = -1;
   899  00066E  6877               	setf	_prec^0,c
   900  000670  6878               	setf	(_prec+1)^0,c
   901  000672                     
   902                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 710:         done
      +                           = 0;
   903  000672  0E00               	movlw	0
   904  000674  6E55               	movwf	(vfpfcnvrt@done+1)^0,c
   905  000676  0E00               	movlw	0
   906  000678  6E54               	movwf	vfpfcnvrt@done^0,c
   907                           
   908                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 711:         whil
      +                          e (!done) {
   909  00067A  EF85  F003         	goto	l1813
   910  00067E                     l1787:
   911                           
   912                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 714:             
      +                                  flags |= (1 << 0);
   913  00067E  8079               	bsf	_flags^0,0,c
   914  000680                     l1789:
   915                           
   916                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 715:             
      +                                  ++*fmt;
   917  000680  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   918  000684  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   919  000688  2ADE               	incf	postinc2,f,c
   920  00068A  0E00               	movlw	0
   921  00068C  22DD               	addwfc	postdec2,f,c
   922                           
   923                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 716:             
      +                                  break;
   924  00068E  EF85  F003         	goto	l1813
   925  000692                     l1791:
   926                           
   927                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 718:             
      +                                  flags |= (1 << 1);
   928  000692  8279               	bsf	_flags^0,1,c
   929  000694  EF40  F003         	goto	l1789
   930  000698                     l1795:
   931                           
   932                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 722:             
      +                                  flags |= (1 << 2);
   933  000698  8479               	bsf	_flags^0,2,c
   934  00069A  EF40  F003         	goto	l1789
   935  00069E                     l1799:
   936                           
   937                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 726:             
      +                                  flags |= (1 << 3);
   938  00069E  8679               	bsf	_flags^0,3,c
   939  0006A0  EF40  F003         	goto	l1789
   940  0006A4                     l1803:
   941                           
   942                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 730:             
      +                                  flags |= (1 << 4);
   943  0006A4  8879               	bsf	_flags^0,4,c
   944  0006A6  EF40  F003         	goto	l1789
   945  0006AA                     l1807:
   946                           
   947                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 734:             
      +                                  done = 1;
   948  0006AA  0E00               	movlw	0
   949  0006AC  6E55               	movwf	(vfpfcnvrt@done+1)^0,c
   950  0006AE  0E01               	movlw	1
   951  0006B0  6E54               	movwf	vfpfcnvrt@done^0,c
   952                           
   953                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 735:             
      +                                  break;
   954  0006B2  EF85  F003         	goto	l1813
   955  0006B6                     l1811:
   956  0006B6  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   957  0006BA  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   958  0006BE  CFDE FFF6          	movff	postinc2,tblptrl
   959  0006C2  CFDD FFF7          	movff	postdec2,tblptrh
   960  0006C6                     	if	0	;tblptru may be non-zero
   961  0006C6                     	endif
   962  0006C6                     	if	0	;tblptru may be non-zero
   963  0006C6                     	endif
   964  0006C6  0008               	tblrd		*
   965  0006C8  50F5               	movf	tablat,w,c
   966  0006CA  6E48               	movwf	??_vfpfcnvrt^0,c
   967  0006CC  6A49               	clrf	(??_vfpfcnvrt+1)^0,c
   968                           
   969                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   970                           ; Switch size 1, requested type "simple"
   971                           ; Number of cases is 1, Range of values is 0 to 0
   972                           ; switch strategies available:
   973                           ; Name         Instructions Cycles
   974                           ; simple_byte            4     3 (average)
   975                           ;	Chosen strategy is simple_byte
   976  0006CE  5049               	movf	(??_vfpfcnvrt+1)^0,w,c
   977  0006D0  0A00               	xorlw	0	; case 0
   978  0006D2  B4D8               	btfsc	status,2,c
   979  0006D4  EF6E  F003         	goto	l2043
   980  0006D8  EF55  F003         	goto	l1807
   981  0006DC                     l2043:
   982                           
   983                           ; Switch size 1, requested type "simple"
   984                           ; Number of cases is 5, Range of values is 32 to 48
   985                           ; switch strategies available:
   986                           ; Name         Instructions Cycles
   987                           ; simple_byte           16     9 (average)
   988                           ;	Chosen strategy is simple_byte
   989  0006DC  5048               	movf	??_vfpfcnvrt^0,w,c
   990  0006DE  0A20               	xorlw	32	; case 32
   991  0006E0  B4D8               	btfsc	status,2,c
   992  0006E2  EF4F  F003         	goto	l1799
   993  0006E6  0A03               	xorlw	3	; case 35
   994  0006E8  B4D8               	btfsc	status,2,c
   995  0006EA  EF52  F003         	goto	l1803
   996  0006EE  0A08               	xorlw	8	; case 43
   997  0006F0  B4D8               	btfsc	status,2,c
   998  0006F2  EF4C  F003         	goto	l1795
   999  0006F6  0A06               	xorlw	6	; case 45
  1000  0006F8  B4D8               	btfsc	status,2,c
  1001  0006FA  EF3F  F003         	goto	l1787
  1002  0006FE  0A1D               	xorlw	29	; case 48
  1003  000700  B4D8               	btfsc	status,2,c
  1004  000702  EF49  F003         	goto	l1791
  1005  000706  EF55  F003         	goto	l1807
  1006  00070A                     l1813:
  1007                           
  1008                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 711:         whil
      +                          e (!done) {
  1009  00070A  5054               	movf	vfpfcnvrt@done^0,w,c
  1010  00070C  1055               	iorwf	(vfpfcnvrt@done+1)^0,w,c
  1011  00070E  B4D8               	btfsc	status,2,c
  1012  000710  EF8C  F003         	goto	u1171
  1013  000714  EF8E  F003         	goto	u1170
  1014  000718                     u1171:
  1015  000718  EF5B  F003         	goto	l1811
  1016  00071C                     u1170:
  1017  00071C                     
  1018                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 738:         if (
      +                          flags & (1 << 0)) {
  1019  00071C  A079               	btfss	_flags^0,0,c
  1020  00071E  EF93  F003         	goto	u1181
  1021  000722  EF95  F003         	goto	u1180
  1022  000726                     u1181:
  1023  000726  EF96  F003         	goto	l1817
  1024  00072A                     u1180:
  1025  00072A                     
  1026                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 739:             
      +                          flags &= ~(1 << 1);
  1027  00072A  9279               	bcf	_flags^0,1,c
  1028  00072C                     l1817:
  1029                           
  1030                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 745:         if (
      +                          (*fmt)[0] == '*') {
  1031  00072C  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1032  000730  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1033  000734  CFDE FFF6          	movff	postinc2,tblptrl
  1034  000738  CFDD FFF7          	movff	postdec2,tblptrh
  1035  00073C                     	if	0	;tblptru may be non-zero
  1036  00073C                     	endif
  1037  00073C                     	if	0	;tblptru may be non-zero
  1038  00073C                     	endif
  1039  00073C  0008               	tblrd		*
  1040  00073E  50F5               	movf	tablat,w,c
  1041  000740  0A2A               	xorlw	42
  1042  000742  A4D8               	btfss	status,2,c
  1043  000744  EFA6  F003         	goto	u1191
  1044  000748  EFA8  F003         	goto	u1190
  1045  00074C                     u1191:
  1046  00074C  EFD1  F003         	goto	l1825
  1047  000750                     u1190:
  1048  000750                     
  1049                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 746:             
      +                          ++*fmt;
  1050  000750  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1051  000754  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1052  000758  2ADE               	incf	postinc2,f,c
  1053  00075A  0E00               	movlw	0
  1054  00075C  22DD               	addwfc	postdec2,f,c
  1055                           
  1056                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 747:             
      +                          width = (*(int *)__va_arg(*(int **)ap, (int)0));
  1057  00075E  C046  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1058  000762  C047  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1059  000766  CFDF F048          	movff	indf2,??_vfpfcnvrt
  1060  00076A  0E02               	movlw	2
  1061  00076C  26DE               	addwf	postinc2,f,c
  1062  00076E  CFDF F049          	movff	indf2,??_vfpfcnvrt+1
  1063  000772  0E00               	movlw	0
  1064  000774  22DD               	addwfc	postdec2,f,c
  1065  000776  C048  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1066  00077A  C049  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1067  00077E  CFDE F075          	movff	postinc2,_width
  1068  000782  CFDD F076          	movff	postdec2,_width+1
  1069  000786                     
  1070                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 748:             
      +                          if (width < 0) {
  1071  000786  BE76               	btfsc	(_width+1)^0,7,c
  1072  000788  EFCA  F003         	goto	u1200
  1073  00078C  EFC8  F003         	goto	u1201
  1074  000790                     u1201:
  1075  000790  EF07  F004         	goto	l1833
  1076  000794                     u1200:
  1077  000794                     
  1078                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 749:             
      +                              flags |= (1 << 0);
  1079  000794  8079               	bsf	_flags^0,0,c
  1080                           
  1081                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 750:             
      +                              width = -width;
  1082  000796  6C75               	negf	_width^0,c
  1083  000798  1E76               	comf	(_width+1)^0,f,c
  1084  00079A  B0D8               	btfsc	status,0,c
  1085  00079C  2A76               	incf	(_width+1)^0,f,c
  1086  00079E  EF07  F004         	goto	l1833
  1087  0007A2                     l1825:
  1088                           
  1089                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 753:             
      +                          width = atoi(*fmt);
  1090  0007A2  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1091  0007A6  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1092  0007AA  CFDE F00A          	movff	postinc2,atoi@s
  1093  0007AE  CFDD F00B          	movff	postdec2,atoi@s+1
  1094  0007B2  ECA2  F007         	call	_atoi	;wreg free
  1095  0007B6  C00A  F075         	movff	?_atoi,_width
  1096  0007BA  C00B  F076         	movff	?_atoi+1,_width+1
  1097                           
  1098                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 754:             
      +                          while ((0 && isdigit((*fmt)[0]), ((unsigned)((*fmt)[0])-'0') < 10)) {
  1099  0007BE  EFE8  F003         	goto	l1831
  1100  0007C2                     l1827:
  1101                           
  1102                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 755:             
      +                              ++*fmt;
  1103  0007C2  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1104  0007C6  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1105  0007CA  2ADE               	incf	postinc2,f,c
  1106  0007CC  0E00               	movlw	0
  1107  0007CE  22DD               	addwfc	postdec2,f,c
  1108  0007D0                     l1831:
  1109  0007D0  0ED0               	movlw	208
  1110  0007D2  6E48               	movwf	??_vfpfcnvrt^0,c
  1111  0007D4  0EFF               	movlw	255
  1112  0007D6  6E49               	movwf	(??_vfpfcnvrt+1)^0,c
  1113  0007D8  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1114  0007DC  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1115  0007E0  CFDE FFF6          	movff	postinc2,tblptrl
  1116  0007E4  CFDD FFF7          	movff	postdec2,tblptrh
  1117  0007E8                     	if	0	;tblptru may be non-zero
  1118  0007E8                     	endif
  1119  0007E8                     	if	0	;tblptru may be non-zero
  1120  0007E8                     	endif
  1121  0007E8  0008               	tblrd		*
  1122  0007EA  50F5               	movf	tablat,w,c
  1123  0007EC  6E4A               	movwf	(??_vfpfcnvrt+2)^0,c
  1124  0007EE  6A4B               	clrf	(??_vfpfcnvrt+3)^0,c
  1125  0007F0  5048               	movf	??_vfpfcnvrt^0,w,c
  1126  0007F2  264A               	addwf	(??_vfpfcnvrt+2)^0,f,c
  1127  0007F4  5049               	movf	(??_vfpfcnvrt+1)^0,w,c
  1128  0007F6  224B               	addwfc	(??_vfpfcnvrt+3)^0,f,c
  1129  0007F8  504B               	movf	(??_vfpfcnvrt+3)^0,w,c
  1130  0007FA  E109               	bnz	u1210
  1131  0007FC  0E0A               	movlw	10
  1132  0007FE  5C4A               	subwf	(??_vfpfcnvrt+2)^0,w,c
  1133  000800  A0D8               	btfss	status,0,c
  1134  000802  EF05  F004         	goto	u1211
  1135  000806  EF07  F004         	goto	u1210
  1136  00080A                     u1211:
  1137  00080A  EFE1  F003         	goto	l1827
  1138  00080E                     u1210:
  1139  00080E                     l1833:
  1140                           
  1141                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 847:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1142  00080E  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1143  000812  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1144  000816  CFDE FFF6          	movff	postinc2,tblptrl
  1145  00081A  CFDD FFF7          	movff	postdec2,tblptrh
  1146  00081E                     	if	0	;tblptru may be non-zero
  1147  00081E                     	endif
  1148  00081E                     	if	0	;tblptru may be non-zero
  1149  00081E                     	endif
  1150  00081E  0008               	tblrd		*
  1151  000820  50F5               	movf	tablat,w,c
  1152  000822  0A64               	xorlw	100
  1153  000824  B4D8               	btfsc	status,2,c
  1154  000826  EF17  F004         	goto	u1221
  1155  00082A  EF19  F004         	goto	u1220
  1156  00082E                     u1221:
  1157  00082E  EF2B  F004         	goto	l1837
  1158  000832                     u1220:
  1159  000832  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1160  000836  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1161  00083A  CFDE FFF6          	movff	postinc2,tblptrl
  1162  00083E  CFDD FFF7          	movff	postdec2,tblptrh
  1163  000842                     	if	0	;tblptru may be non-zero
  1164  000842                     	endif
  1165  000842                     	if	0	;tblptru may be non-zero
  1166  000842                     	endif
  1167  000842  0008               	tblrd		*
  1168  000844  50F5               	movf	tablat,w,c
  1169  000846  0A69               	xorlw	105
  1170  000848  A4D8               	btfss	status,2,c
  1171  00084A  EF29  F004         	goto	u1231
  1172  00084E  EF2B  F004         	goto	u1230
  1173  000852                     u1231:
  1174  000852  EF6B  F004         	goto	l1843
  1175  000856                     u1230:
  1176  000856                     l1837:
  1177                           
  1178                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 849:             
      +                          ++*fmt;
  1179  000856  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1180  00085A  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1181  00085E  2ADE               	incf	postinc2,f,c
  1182  000860  0E00               	movlw	0
  1183  000862  22DD               	addwfc	postdec2,f,c
  1184                           
  1185                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 850:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1186  000864  C046  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1187  000868  C047  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1188  00086C  CFDF F048          	movff	indf2,??_vfpfcnvrt
  1189  000870  0E02               	movlw	2
  1190  000872  26DE               	addwf	postinc2,f,c
  1191  000874  CFDF F049          	movff	indf2,??_vfpfcnvrt+1
  1192  000878  0E00               	movlw	0
  1193  00087A  22DD               	addwfc	postdec2,f,c
  1194  00087C  C048  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1195  000880  C049  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1196  000884  CFDE F04C          	movff	postinc2,vfpfcnvrt@ll
  1197  000888  CFDD F04D          	movff	postdec2,vfpfcnvrt@ll+1
  1198  00088C  0E00               	movlw	0
  1199  00088E  BE4D               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
  1200  000890  0EFF               	movlw	-1
  1201  000892  6E4E               	movwf	(vfpfcnvrt@ll+2)^0,c
  1202  000894  6E4F               	movwf	(vfpfcnvrt@ll+3)^0,c
  1203  000896  6E50               	movwf	(vfpfcnvrt@ll+4)^0,c
  1204  000898  6E51               	movwf	(vfpfcnvrt@ll+5)^0,c
  1205  00089A  6E52               	movwf	(vfpfcnvrt@ll+6)^0,c
  1206  00089C  6E53               	movwf	(vfpfcnvrt@ll+7)^0,c
  1207  00089E                     
  1208                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 852:             
      +                          return dtoa(fp, ll);
  1209  00089E  C042  F01E         	movff	vfpfcnvrt@fp,dtoa@fp
  1210  0008A2  C043  F01F         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1211  0008A6  C04C  F020         	movff	vfpfcnvrt@ll,dtoa@d
  1212  0008AA  C04D  F021         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1213  0008AE  C04E  F022         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1214  0008B2  C04F  F023         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1215  0008B6  C050  F024         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1216  0008BA  C051  F025         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1217  0008BE  C052  F026         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1218  0008C2  C053  F027         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1219  0008C6  ECBD  F004         	call	_dtoa	;wreg free
  1220  0008CA  C01E  F042         	movff	?_dtoa,?_vfpfcnvrt
  1221  0008CE  C01F  F043         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1222  0008D2  EFBC  F004         	goto	l877
  1223  0008D6                     l1843:
  1224                           
  1225                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1372:         if 
      +                          ((*fmt)[0] == '%') {
  1226  0008D6  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1227  0008DA  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1228  0008DE  CFDE FFF6          	movff	postinc2,tblptrl
  1229  0008E2  CFDD FFF7          	movff	postdec2,tblptrh
  1230  0008E6                     	if	0	;tblptru may be non-zero
  1231  0008E6                     	endif
  1232  0008E6                     	if	0	;tblptru may be non-zero
  1233  0008E6                     	endif
  1234  0008E6  0008               	tblrd		*
  1235  0008E8  50F5               	movf	tablat,w,c
  1236  0008EA  0A25               	xorlw	37
  1237  0008EC  A4D8               	btfss	status,2,c
  1238  0008EE  EF7B  F004         	goto	u1241
  1239  0008F2  EF7D  F004         	goto	u1240
  1240  0008F6                     u1241:
  1241  0008F6  EF94  F004         	goto	l1853
  1242  0008FA                     u1240:
  1243  0008FA                     
  1244                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1373:            
      +                           ++*fmt;
  1245  0008FA  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1246  0008FE  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1247  000902  2ADE               	incf	postinc2,f,c
  1248  000904  0E00               	movlw	0
  1249  000906  22DD               	addwfc	postdec2,f,c
  1250  000908                     
  1251                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1374:            
      +                           fputc((int)'%', fp);
  1252  000908  0E00               	movlw	0
  1253  00090A  6E04               	movwf	(fputc@c+1)^0,c
  1254  00090C  0E25               	movlw	37
  1255  00090E  6E03               	movwf	fputc@c^0,c
  1256  000910  C042  F005         	movff	vfpfcnvrt@fp,fputc@fp
  1257  000914  C043  F006         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1258  000918  ECBF  F008         	call	_fputc	;wreg free
  1259  00091C                     l1849:
  1260                           
  1261                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1375:            
      +                           return 1;
  1262  00091C  0E00               	movlw	0
  1263  00091E  6E43               	movwf	(?_vfpfcnvrt+1)^0,c
  1264  000920  0E01               	movlw	1
  1265  000922  6E42               	movwf	?_vfpfcnvrt^0,c
  1266  000924  EFBC  F004         	goto	l877
  1267  000928                     l1853:
  1268                           
  1269                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1379:         ++*
      +                          fmt;
  1270  000928  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1271  00092C  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1272  000930  2ADE               	incf	postinc2,f,c
  1273  000932  0E00               	movlw	0
  1274  000934  22DD               	addwfc	postdec2,f,c
  1275  000936                     
  1276                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1380:         ret
      +                          urn 0;
  1277  000936  0E00               	movlw	0
  1278  000938  6E43               	movwf	(?_vfpfcnvrt+1)^0,c
  1279  00093A  0E00               	movlw	0
  1280  00093C  6E42               	movwf	?_vfpfcnvrt^0,c
  1281  00093E  EFBC  F004         	goto	l877
  1282  000942                     l1859:
  1283                           
  1284                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1384:     fputc((
      +                          int)(*fmt)[0], fp);
  1285  000942  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1286  000946  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1287  00094A  CFDE FFF6          	movff	postinc2,tblptrl
  1288  00094E  CFDD FFF7          	movff	postdec2,tblptrh
  1289  000952                     	if	0	;tblptru may be non-zero
  1290  000952                     	endif
  1291  000952                     	if	0	;tblptru may be non-zero
  1292  000952                     	endif
  1293  000952  0008               	tblrd		*
  1294  000954  50F5               	movf	tablat,w,c
  1295  000956  6E03               	movwf	fputc@c^0,c
  1296  000958  6A04               	clrf	(fputc@c+1)^0,c
  1297  00095A  C042  F005         	movff	vfpfcnvrt@fp,fputc@fp
  1298  00095E  C043  F006         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1299  000962  ECBF  F008         	call	_fputc	;wreg free
  1300  000966                     
  1301                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 1385:     ++*fmt;
  1302  000966  C044  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1303  00096A  C045  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1304  00096E  2ADE               	incf	postinc2,f,c
  1305  000970  0E00               	movlw	0
  1306  000972  22DD               	addwfc	postdec2,f,c
  1307  000974  EF8E  F004         	goto	l1849
  1308  000978                     l877:
  1309  000978  0012               	return		;funcret
  1310  00097A                     __end_of_vfpfcnvrt:
  1311                           	callstack 0
  1312                           
  1313 ;; *************** function _dtoa *****************
  1314 ;; Defined at:
  1315 ;;		line 287 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
  1316 ;; Parameters:    Size  Location     Type
  1317 ;;  fp              2   29[COMRAM] PTR struct _IO_FILE
  1318 ;;		 -> sprintf@f(11), 
  1319 ;;  d               8   31[COMRAM] long long 
  1320 ;; Auto vars:     Size  Location     Type
  1321 ;;  n               8   55[COMRAM] long long 
  1322 ;;  i               2   63[COMRAM] int 
  1323 ;;  s               2   53[COMRAM] int 
  1324 ;;  w               2   51[COMRAM] int 
  1325 ;;  p               2   49[COMRAM] int 
  1326 ;; Return value:  Size  Location     Type
  1327 ;;                  2   29[COMRAM] int 
  1328 ;; Registers used:
  1329 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1330 ;; Tracked objects:
  1331 ;;		On entry : 0/0
  1332 ;;		On exit  : 0/0
  1333 ;;		Unchanged: 0/0
  1334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1335 ;;      Params:        10       0       0       0       0       0       0
  1336 ;;      Locals:        18       0       0       0       0       0       0
  1337 ;;      Temps:          8       0       0       0       0       0       0
  1338 ;;      Totals:        36       0       0       0       0       0       0
  1339 ;;Total ram usage:       36 bytes
  1340 ;; Hardware stack levels used: 1
  1341 ;; Hardware stack levels required when called: 5
  1342 ;; This function calls:
  1343 ;;		___aodiv
  1344 ;;		___aomod
  1345 ;;		_abs
  1346 ;;		_pad
  1347 ;; This function is called by:
  1348 ;;		_vfpfcnvrt
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351                           
  1352                           	psect	text4
  1353  00097A                     __ptext4:
  1354                           	callstack 0
  1355  00097A                     _dtoa:
  1356                           	callstack 22
  1357  00097A                     
  1358                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 287: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\d
      +                          oprnt.c: 288: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 28
      +                          9:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprn
      +                          t.c: 290:     long long n;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\d
      +                          oprnt.c: 293:     n = d;
  1359  00097A  C020  F038         	movff	dtoa@d,dtoa@n
  1360  00097E  C021  F039         	movff	dtoa@d+1,dtoa@n+1
  1361  000982  C022  F03A         	movff	dtoa@d+2,dtoa@n+2
  1362  000986  C023  F03B         	movff	dtoa@d+3,dtoa@n+3
  1363  00098A  C024  F03C         	movff	dtoa@d+4,dtoa@n+4
  1364  00098E  C025  F03D         	movff	dtoa@d+5,dtoa@n+5
  1365  000992  C026  F03E         	movff	dtoa@d+6,dtoa@n+6
  1366  000996  C027  F03F         	movff	dtoa@d+7,dtoa@n+7
  1367  00099A                     
  1368                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 294:     s = n < 
      +                          0 ? 1 : 0;
  1369  00099A  BE3F               	btfsc	(dtoa@n+7)^0,7,c
  1370  00099C  EFD2  F004         	goto	u971
  1371  0009A0  EFD5  F004         	goto	u970
  1372  0009A4                     u971:
  1373  0009A4  0E01               	movlw	1
  1374  0009A6  EFD6  F004         	goto	u980
  1375  0009AA                     u970:
  1376  0009AA  0E00               	movlw	0
  1377  0009AC                     u980:
  1378  0009AC  6E36               	movwf	dtoa@s^0,c
  1379  0009AE  6A37               	clrf	(dtoa@s+1)^0,c
  1380                           
  1381                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 295:     if (s) {
  1382  0009B0  5036               	movf	dtoa@s^0,w,c
  1383  0009B2  1037               	iorwf	(dtoa@s+1)^0,w,c
  1384  0009B4  B4D8               	btfsc	status,2,c
  1385  0009B6  EFDF  F004         	goto	u991
  1386  0009BA  EFE1  F004         	goto	u990
  1387  0009BE                     u991:
  1388  0009BE  EFF1  F004         	goto	l1669
  1389  0009C2                     u990:
  1390  0009C2                     
  1391                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 296:         n = 
      +                          -n;
  1392  0009C2  1E3F               	comf	(dtoa@n+7)^0,f,c
  1393  0009C4  1E3E               	comf	(dtoa@n+6)^0,f,c
  1394  0009C6  1E3D               	comf	(dtoa@n+5)^0,f,c
  1395  0009C8  1E3C               	comf	(dtoa@n+4)^0,f,c
  1396  0009CA  1E3B               	comf	(dtoa@n+3)^0,f,c
  1397  0009CC  1E3A               	comf	(dtoa@n+2)^0,f,c
  1398  0009CE  1E39               	comf	(dtoa@n+1)^0,f,c
  1399  0009D0  6C38               	negf	dtoa@n^0,c
  1400  0009D2  0E00               	movlw	0
  1401  0009D4  2239               	addwfc	(dtoa@n+1)^0,f,c
  1402  0009D6  223A               	addwfc	(dtoa@n+2)^0,f,c
  1403  0009D8  223B               	addwfc	(dtoa@n+3)^0,f,c
  1404  0009DA  223C               	addwfc	(dtoa@n+4)^0,f,c
  1405  0009DC  223D               	addwfc	(dtoa@n+5)^0,f,c
  1406  0009DE  223E               	addwfc	(dtoa@n+6)^0,f,c
  1407  0009E0  223F               	addwfc	(dtoa@n+7)^0,f,c
  1408  0009E2                     l1669:
  1409                           
  1410                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 300:     if (!(pr
      +                          ec < 0)) {
  1411  0009E2  BE78               	btfsc	(_prec+1)^0,7,c
  1412  0009E4  EFF6  F004         	goto	u1001
  1413  0009E8  EFF8  F004         	goto	u1000
  1414  0009EC                     u1001:
  1415  0009EC  EFF9  F004         	goto	l1673
  1416  0009F0                     u1000:
  1417  0009F0                     
  1418                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 301:         flag
      +                          s &= ~(1 << 1);
  1419  0009F0  9279               	bcf	_flags^0,1,c
  1420  0009F2                     l1673:
  1421                           
  1422                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 303:     p = (0 <
      +                           prec) ? prec : 1;
  1423  0009F2  BE78               	btfsc	(_prec+1)^0,7,c
  1424  0009F4  EF06  F005         	goto	u1010
  1425  0009F8  5078               	movf	(_prec+1)^0,w,c
  1426  0009FA  E106               	bnz	u1011
  1427  0009FC  0477               	decf	_prec^0,w,c
  1428  0009FE  B0D8               	btfsc	status,0,c
  1429  000A00  EF04  F005         	goto	u1011
  1430  000A04  EF06  F005         	goto	u1010
  1431  000A08                     u1011:
  1432  000A08  EF0C  F005         	goto	l830
  1433  000A0C                     u1010:
  1434  000A0C  0E00               	movlw	0
  1435  000A0E  6E33               	movwf	(dtoa@p+1)^0,c
  1436  000A10  0E01               	movlw	1
  1437  000A12  6E32               	movwf	dtoa@p^0,c
  1438  000A14  EF10  F005         	goto	l832
  1439  000A18                     l830:
  1440  000A18  C077  F032         	movff	_prec,dtoa@p
  1441  000A1C  C078  F033         	movff	_prec+1,dtoa@p+1
  1442  000A20                     l832:
  1443                           
  1444                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 304:     w = widt
      +                          h;
  1445  000A20  C075  F034         	movff	_width,dtoa@w
  1446  000A24  C076  F035         	movff	_width+1,dtoa@w+1
  1447  000A28                     
  1448                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 305:     if (s ||
      +                           (flags & (1 << 2))) {
  1449  000A28  5036               	movf	dtoa@s^0,w,c
  1450  000A2A  1037               	iorwf	(dtoa@s+1)^0,w,c
  1451  000A2C  A4D8               	btfss	status,2,c
  1452  000A2E  EF1B  F005         	goto	u1021
  1453  000A32  EF1D  F005         	goto	u1020
  1454  000A36                     u1021:
  1455  000A36  EF24  F005         	goto	l1681
  1456  000A3A                     u1020:
  1457  000A3A  A479               	btfss	_flags^0,2,c
  1458  000A3C  EF22  F005         	goto	u1031
  1459  000A40  EF24  F005         	goto	u1030
  1460  000A44                     u1031:
  1461  000A44  EF27  F005         	goto	l1683
  1462  000A48                     u1030:
  1463  000A48                     l1681:
  1464                           
  1465                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 306:         --w;
  1466  000A48  0634               	decf	dtoa@w^0,f,c
  1467  000A4A  A0D8               	btfss	status,0,c
  1468  000A4C  0635               	decf	(dtoa@w+1)^0,f,c
  1469  000A4E                     l1683:
  1470                           
  1471                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 310:     i = size
      +                          of(dbuf) - 1;
  1472  000A4E  0E00               	movlw	0
  1473  000A50  6E41               	movwf	(dtoa@i+1)^0,c
  1474  000A52  0E1F               	movlw	31
  1475  000A54  6E40               	movwf	dtoa@i^0,c
  1476  000A56                     
  1477                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 311:     dbuf[i] 
      +                          = '\0';
  1478  000A56  0E00               	movlw	0
  1479  000A58  0100               	movlb	0	; () banked
  1480  000A5A  6F9F               	movwf	(_dbuf+31)& (0+255),b
  1481                           
  1482                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1483  000A5C  EFAC  F005         	goto	l1697
  1484  000A60                     l1687:
  1485                           
  1486                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 313:         --i;
  1487  000A60  0640               	decf	dtoa@i^0,f,c
  1488  000A62  A0D8               	btfss	status,0,c
  1489  000A64  0641               	decf	(dtoa@i+1)^0,f,c
  1490  000A66                     
  1491                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 314:         dbuf
      +                          [i] = (char)((int)'0' + abs(n % 10));
  1492  000A66  0E80               	movlw	low _dbuf
  1493  000A68  2440               	addwf	dtoa@i^0,w,c
  1494  000A6A  6ED9               	movwf	fsr2l,c
  1495  000A6C  0E00               	movlw	high _dbuf
  1496  000A6E  2041               	addwfc	(dtoa@i+1)^0,w,c
  1497  000A70  6EDA               	movwf	fsr2h,c
  1498  000A72  C038  F003         	movff	dtoa@n,___aomod@dividend
  1499  000A76  C039  F004         	movff	dtoa@n+1,___aomod@dividend+1
  1500  000A7A  C03A  F005         	movff	dtoa@n+2,___aomod@dividend+2
  1501  000A7E  C03B  F006         	movff	dtoa@n+3,___aomod@dividend+3
  1502  000A82  C03C  F007         	movff	dtoa@n+4,___aomod@dividend+4
  1503  000A86  C03D  F008         	movff	dtoa@n+5,___aomod@dividend+5
  1504  000A8A  C03E  F009         	movff	dtoa@n+6,___aomod@dividend+6
  1505  000A8E  C03F  F00A         	movff	dtoa@n+7,___aomod@dividend+7
  1506  000A92  0E0A               	movlw	10
  1507  000A94  6E0B               	movwf	___aomod@divisor^0,c
  1508  000A96  0E00               	movlw	0
  1509  000A98  6E0C               	movwf	(___aomod@divisor+1)^0,c
  1510  000A9A  0E00               	movlw	0
  1511  000A9C  6E0D               	movwf	(___aomod@divisor+2)^0,c
  1512  000A9E  0E00               	movlw	0
  1513  000AA0  6E0E               	movwf	(___aomod@divisor+3)^0,c
  1514  000AA2  0E00               	movlw	0
  1515  000AA4  6E0F               	movwf	(___aomod@divisor+4)^0,c
  1516  000AA6  0E00               	movlw	0
  1517  000AA8  6E10               	movwf	(___aomod@divisor+5)^0,c
  1518  000AAA  0E00               	movlw	0
  1519  000AAC  6E11               	movwf	(___aomod@divisor+6)^0,c
  1520  000AAE  0E00               	movlw	0
  1521  000AB0  6E12               	movwf	(___aomod@divisor+7)^0,c
  1522  000AB2  ECF0  F006         	call	___aomod	;wreg free
  1523  000AB6  C003  F028         	movff	?___aomod,??_dtoa
  1524  000ABA  C004  F029         	movff	?___aomod+1,??_dtoa+1
  1525  000ABE  C005  F02A         	movff	?___aomod+2,??_dtoa+2
  1526  000AC2  C006  F02B         	movff	?___aomod+3,??_dtoa+3
  1527  000AC6  C007  F02C         	movff	?___aomod+4,??_dtoa+4
  1528  000ACA  C008  F02D         	movff	?___aomod+5,??_dtoa+5
  1529  000ACE  C009  F02E         	movff	?___aomod+6,??_dtoa+6
  1530  000AD2  C00A  F02F         	movff	?___aomod+7,??_dtoa+7
  1531  000AD6  C028  F015         	movff	??_dtoa,abs@a
  1532  000ADA  C02A  F016         	movff	??_dtoa+2,abs@a+1
  1533  000ADE  EC5D  F00B         	call	_abs	;wreg free
  1534  000AE2  5015               	movf	?_abs^0,w,c
  1535  000AE4  0F30               	addlw	48
  1536  000AE6  6EDF               	movwf	indf2,c
  1537  000AE8                     
  1538                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 315:         --p;
  1539  000AE8  0632               	decf	dtoa@p^0,f,c
  1540  000AEA  A0D8               	btfss	status,0,c
  1541  000AEC  0633               	decf	(dtoa@p+1)^0,f,c
  1542  000AEE                     
  1543                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 316:         --w;
  1544  000AEE  0634               	decf	dtoa@w^0,f,c
  1545  000AF0  A0D8               	btfss	status,0,c
  1546  000AF2  0635               	decf	(dtoa@w+1)^0,f,c
  1547  000AF4                     
  1548                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 317:         n = 
      +                          n / 10;
  1549  000AF4  C038  F003         	movff	dtoa@n,___aodiv@dividend
  1550  000AF8  C039  F004         	movff	dtoa@n+1,___aodiv@dividend+1
  1551  000AFC  C03A  F005         	movff	dtoa@n+2,___aodiv@dividend+2
  1552  000B00  C03B  F006         	movff	dtoa@n+3,___aodiv@dividend+3
  1553  000B04  C03C  F007         	movff	dtoa@n+4,___aodiv@dividend+4
  1554  000B08  C03D  F008         	movff	dtoa@n+5,___aodiv@dividend+5
  1555  000B0C  C03E  F009         	movff	dtoa@n+6,___aodiv@dividend+6
  1556  000B10  C03F  F00A         	movff	dtoa@n+7,___aodiv@dividend+7
  1557  000B14  0E0A               	movlw	10
  1558  000B16  6E0B               	movwf	___aodiv@divisor^0,c
  1559  000B18  0E00               	movlw	0
  1560  000B1A  6E0C               	movwf	(___aodiv@divisor+1)^0,c
  1561  000B1C  0E00               	movlw	0
  1562  000B1E  6E0D               	movwf	(___aodiv@divisor+2)^0,c
  1563  000B20  0E00               	movlw	0
  1564  000B22  6E0E               	movwf	(___aodiv@divisor+3)^0,c
  1565  000B24  0E00               	movlw	0
  1566  000B26  6E0F               	movwf	(___aodiv@divisor+4)^0,c
  1567  000B28  0E00               	movlw	0
  1568  000B2A  6E10               	movwf	(___aodiv@divisor+5)^0,c
  1569  000B2C  0E00               	movlw	0
  1570  000B2E  6E11               	movwf	(___aodiv@divisor+6)^0,c
  1571  000B30  0E00               	movlw	0
  1572  000B32  6E12               	movwf	(___aodiv@divisor+7)^0,c
  1573  000B34  EC2C  F006         	call	___aodiv	;wreg free
  1574  000B38  C003  F038         	movff	?___aodiv,dtoa@n
  1575  000B3C  C004  F039         	movff	?___aodiv+1,dtoa@n+1
  1576  000B40  C005  F03A         	movff	?___aodiv+2,dtoa@n+2
  1577  000B44  C006  F03B         	movff	?___aodiv+3,dtoa@n+3
  1578  000B48  C007  F03C         	movff	?___aodiv+4,dtoa@n+4
  1579  000B4C  C008  F03D         	movff	?___aodiv+5,dtoa@n+5
  1580  000B50  C009  F03E         	movff	?___aodiv+6,dtoa@n+6
  1581  000B54  C00A  F03F         	movff	?___aodiv+7,dtoa@n+7
  1582  000B58                     l1697:
  1583                           
  1584                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 312:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1585  000B58  BE41               	btfsc	(dtoa@i+1)^0,7,c
  1586  000B5A  EFB7  F005         	goto	u1041
  1587  000B5E  5041               	movf	(dtoa@i+1)^0,w,c
  1588  000B60  E108               	bnz	u1040
  1589  000B62  0440               	decf	dtoa@i^0,w,c
  1590  000B64  A0D8               	btfss	status,0,c
  1591  000B66  EFB7  F005         	goto	u1041
  1592  000B6A  EFB9  F005         	goto	u1040
  1593  000B6E                     u1041:
  1594  000B6E  EFE9  F005         	goto	l1707
  1595  000B72                     u1040:
  1596  000B72  5038               	movf	dtoa@n^0,w,c
  1597  000B74  1039               	iorwf	(dtoa@n+1)^0,w,c
  1598  000B76  103A               	iorwf	(dtoa@n+2)^0,w,c
  1599  000B78  103B               	iorwf	(dtoa@n+3)^0,w,c
  1600  000B7A  103C               	iorwf	(dtoa@n+4)^0,w,c
  1601  000B7C  103D               	iorwf	(dtoa@n+5)^0,w,c
  1602  000B7E  103E               	iorwf	(dtoa@n+6)^0,w,c
  1603  000B80  103F               	iorwf	(dtoa@n+7)^0,w,c
  1604  000B82  A4D8               	btfss	status,2,c
  1605  000B84  EFC6  F005         	goto	u1051
  1606  000B88  EFC8  F005         	goto	u1050
  1607  000B8C                     u1051:
  1608  000B8C  EF30  F005         	goto	l1687
  1609  000B90                     u1050:
  1610  000B90  BE33               	btfsc	(dtoa@p+1)^0,7,c
  1611  000B92  EFD5  F005         	goto	u1060
  1612  000B96  5033               	movf	(dtoa@p+1)^0,w,c
  1613  000B98  E106               	bnz	u1061
  1614  000B9A  0432               	decf	dtoa@p^0,w,c
  1615  000B9C  B0D8               	btfsc	status,0,c
  1616  000B9E  EFD3  F005         	goto	u1061
  1617  000BA2  EFD5  F005         	goto	u1060
  1618  000BA6                     u1061:
  1619  000BA6  EF30  F005         	goto	l1687
  1620  000BAA                     u1060:
  1621  000BAA  BE35               	btfsc	(dtoa@w+1)^0,7,c
  1622  000BAC  EFE0  F005         	goto	u1071
  1623  000BB0  5035               	movf	(dtoa@w+1)^0,w,c
  1624  000BB2  E108               	bnz	u1070
  1625  000BB4  0434               	decf	dtoa@w^0,w,c
  1626  000BB6  A0D8               	btfss	status,0,c
  1627  000BB8  EFE0  F005         	goto	u1071
  1628  000BBC  EFE2  F005         	goto	u1070
  1629  000BC0                     u1071:
  1630  000BC0  EFE9  F005         	goto	l1707
  1631  000BC4                     u1070:
  1632  000BC4  B279               	btfsc	_flags^0,1,c
  1633  000BC6  EFE7  F005         	goto	u1081
  1634  000BCA  EFE9  F005         	goto	u1080
  1635  000BCE                     u1081:
  1636  000BCE  EF30  F005         	goto	l1687
  1637  000BD2                     u1080:
  1638  000BD2                     l1707:
  1639                           
  1640                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 321:     if (s ||
      +                           (flags & (1 << 2))) {
  1641  000BD2  5036               	movf	dtoa@s^0,w,c
  1642  000BD4  1037               	iorwf	(dtoa@s+1)^0,w,c
  1643  000BD6  A4D8               	btfss	status,2,c
  1644  000BD8  EFF0  F005         	goto	u1091
  1645  000BDC  EFF2  F005         	goto	u1090
  1646  000BE0                     u1091:
  1647  000BE0  EFF9  F005         	goto	l1711
  1648  000BE4                     u1090:
  1649  000BE4  A479               	btfss	_flags^0,2,c
  1650  000BE6  EFF7  F005         	goto	u1101
  1651  000BEA  EFF9  F005         	goto	u1100
  1652  000BEE                     u1101:
  1653  000BEE  EF17  F006         	goto	l1721
  1654  000BF2                     u1100:
  1655  000BF2                     l1711:
  1656                           
  1657                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 322:         --i;
  1658  000BF2  0640               	decf	dtoa@i^0,f,c
  1659  000BF4  A0D8               	btfss	status,0,c
  1660  000BF6  0641               	decf	(dtoa@i+1)^0,f,c
  1661  000BF8                     
  1662                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 323:         dbuf
      +                          [i] = s ? '-' : '+';
  1663  000BF8  5036               	movf	dtoa@s^0,w,c
  1664  000BFA  1037               	iorwf	(dtoa@s+1)^0,w,c
  1665  000BFC  A4D8               	btfss	status,2,c
  1666  000BFE  EF03  F006         	goto	u1111
  1667  000C02  EF05  F006         	goto	u1110
  1668  000C06                     u1111:
  1669  000C06  EF0B  F006         	goto	l1717
  1670  000C0A                     u1110:
  1671  000C0A  0E00               	movlw	0
  1672  000C0C  6E31               	movwf	(_dtoa$897+1)^0,c
  1673  000C0E  0E2B               	movlw	43
  1674  000C10  6E30               	movwf	_dtoa$897^0,c
  1675  000C12  EF0F  F006         	goto	l1719
  1676  000C16                     l1717:
  1677  000C16  0E00               	movlw	0
  1678  000C18  6E31               	movwf	(_dtoa$897+1)^0,c
  1679  000C1A  0E2D               	movlw	45
  1680  000C1C  6E30               	movwf	_dtoa$897^0,c
  1681  000C1E                     l1719:
  1682  000C1E  0E80               	movlw	low _dbuf
  1683  000C20  2440               	addwf	dtoa@i^0,w,c
  1684  000C22  6ED9               	movwf	fsr2l,c
  1685  000C24  0E00               	movlw	high _dbuf
  1686  000C26  2041               	addwfc	(dtoa@i+1)^0,w,c
  1687  000C28  6EDA               	movwf	fsr2h,c
  1688  000C2A  C030  FFDF         	movff	_dtoa$897,indf2
  1689  000C2E                     l1721:
  1690                           
  1691                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 327:     return p
      +                          ad(fp, &dbuf[i], w);
  1692  000C2E  C01E  F013         	movff	dtoa@fp,pad@fp
  1693  000C32  C01F  F014         	movff	dtoa@fp+1,pad@fp+1
  1694  000C36  0E80               	movlw	low _dbuf
  1695  000C38  2440               	addwf	dtoa@i^0,w,c
  1696  000C3A  6E15               	movwf	pad@buf^0,c
  1697  000C3C  0E00               	movlw	high _dbuf
  1698  000C3E  2041               	addwfc	(dtoa@i+1)^0,w,c
  1699  000C40  6E16               	movwf	(pad@buf+1)^0,c
  1700  000C42  C034  F017         	movff	dtoa@w,pad@p
  1701  000C46  C035  F018         	movff	dtoa@w+1,pad@p+1
  1702  000C4A  EC24  F009         	call	_pad	;wreg free
  1703  000C4E  C013  F01E         	movff	?_pad,?_dtoa
  1704  000C52  C014  F01F         	movff	?_pad+1,?_dtoa+1
  1705  000C56  0012               	return		;funcret
  1706  000C58                     __end_of_dtoa:
  1707                           	callstack 0
  1708                           
  1709 ;; *************** function _pad *****************
  1710 ;; Defined at:
  1711 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c"
  1712 ;; Parameters:    Size  Location     Type
  1713 ;;  fp              2   18[COMRAM] PTR struct _IO_FILE
  1714 ;;		 -> sprintf@f(11), 
  1715 ;;  buf             2   20[COMRAM] PTR unsigned char 
  1716 ;;		 -> dbuf(32), 
  1717 ;;  p               2   22[COMRAM] int 
  1718 ;; Auto vars:     Size  Location     Type
  1719 ;;  w               2   27[COMRAM] int 
  1720 ;;  i               2   25[COMRAM] int 
  1721 ;; Return value:  Size  Location     Type
  1722 ;;                  2   18[COMRAM] int 
  1723 ;; Registers used:
  1724 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1725 ;; Tracked objects:
  1726 ;;		On entry : 0/0
  1727 ;;		On exit  : 0/0
  1728 ;;		Unchanged: 0/0
  1729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1730 ;;      Params:         6       0       0       0       0       0       0
  1731 ;;      Locals:         4       0       0       0       0       0       0
  1732 ;;      Temps:          1       0       0       0       0       0       0
  1733 ;;      Totals:        11       0       0       0       0       0       0
  1734 ;;Total ram usage:       11 bytes
  1735 ;; Hardware stack levels used: 1
  1736 ;; Hardware stack levels required when called: 4
  1737 ;; This function calls:
  1738 ;;		_fputc
  1739 ;;		_fputs
  1740 ;;		_strlen
  1741 ;; This function is called by:
  1742 ;;		_dtoa
  1743 ;; This function uses a non-reentrant model
  1744 ;;
  1745                           
  1746                           	psect	text5
  1747  001248                     __ptext5:
  1748                           	callstack 0
  1749  001248                     _pad:
  1750                           	callstack 22
  1751  001248                     
  1752                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  1753  001248  A079               	btfss	_flags^0,0,c
  1754  00124A  EF29  F009         	goto	u871
  1755  00124E  EF2B  F009         	goto	u870
  1756  001252                     u871:
  1757  001252  EF35  F009         	goto	l1613
  1758  001256                     u870:
  1759  001256                     
  1760                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  1761  001256  C015  F00C         	movff	pad@buf,fputs@s
  1762  00125A  C016  F00D         	movff	pad@buf+1,fputs@s+1
  1763  00125E  C013  F00E         	movff	pad@fp,fputs@fp
  1764  001262  C014  F00F         	movff	pad@fp+1,fputs@fp+1
  1765  001266  EC3B  F00B         	call	_fputs	;wreg free
  1766  00126A                     l1613:
  1767                           
  1768                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  1769  00126A  BE18               	btfsc	(pad@p+1)^0,7,c
  1770  00126C  EF3A  F009         	goto	u881
  1771  001270  EF3C  F009         	goto	u880
  1772  001274                     u881:
  1773  001274  EF42  F009         	goto	l1617
  1774  001278                     u880:
  1775  001278  C017  F01C         	movff	pad@p,pad@w
  1776  00127C  C018  F01D         	movff	pad@p+1,pad@w+1
  1777  001280  EF46  F009         	goto	l819
  1778  001284                     l1617:
  1779  001284  0E00               	movlw	0
  1780  001286  6E1D               	movwf	(pad@w+1)^0,c
  1781  001288  0E00               	movlw	0
  1782  00128A  6E1C               	movwf	pad@w^0,c
  1783  00128C                     l819:
  1784                           
  1785                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  1786  00128C  0E00               	movlw	0
  1787  00128E  6E1B               	movwf	(pad@i+1)^0,c
  1788  001290  0E00               	movlw	0
  1789  001292  6E1A               	movwf	pad@i^0,c
  1790                           
  1791                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1792  001294  EF58  F009         	goto	l1623
  1793  001298                     l1619:
  1794                           
  1795                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  1796  001298  0E00               	movlw	0
  1797  00129A  6E04               	movwf	(fputc@c+1)^0,c
  1798  00129C  0E20               	movlw	32
  1799  00129E  6E03               	movwf	fputc@c^0,c
  1800  0012A0  C013  F005         	movff	pad@fp,fputc@fp
  1801  0012A4  C014  F006         	movff	pad@fp+1,fputc@fp+1
  1802  0012A8  ECBF  F008         	call	_fputc	;wreg free
  1803  0012AC                     
  1804                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 86:         ++i;
  1805  0012AC  4A1A               	infsnz	pad@i^0,f,c
  1806  0012AE  2A1B               	incf	(pad@i+1)^0,f,c
  1807  0012B0                     l1623:
  1808                           
  1809                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  1810  0012B0  501C               	movf	pad@w^0,w,c
  1811  0012B2  5C1A               	subwf	pad@i^0,w,c
  1812  0012B4  501B               	movf	(pad@i+1)^0,w,c
  1813  0012B6  0A80               	xorlw	128
  1814  0012B8  6E19               	movwf	??_pad^0,c
  1815  0012BA  501D               	movf	(pad@w+1)^0,w,c
  1816  0012BC  0A80               	xorlw	128
  1817  0012BE  5819               	subwfb	??_pad^0,w,c
  1818  0012C0  A0D8               	btfss	status,0,c
  1819  0012C2  EF65  F009         	goto	u891
  1820  0012C6  EF67  F009         	goto	u890
  1821  0012CA                     u891:
  1822  0012CA  EF4C  F009         	goto	l1619
  1823  0012CE                     u890:
  1824  0012CE                     
  1825                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  1826  0012CE  B079               	btfsc	_flags^0,0,c
  1827  0012D0  EF6C  F009         	goto	u901
  1828  0012D4  EF6E  F009         	goto	u900
  1829  0012D8                     u901:
  1830  0012D8  EF78  F009         	goto	l1627
  1831  0012DC                     u900:
  1832  0012DC                     
  1833                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  1834  0012DC  C015  F00C         	movff	pad@buf,fputs@s
  1835  0012E0  C016  F00D         	movff	pad@buf+1,fputs@s+1
  1836  0012E4  C013  F00E         	movff	pad@fp,fputs@fp
  1837  0012E8  C014  F00F         	movff	pad@fp+1,fputs@fp+1
  1838  0012EC  EC3B  F00B         	call	_fputs	;wreg free
  1839  0012F0                     l1627:
  1840                           
  1841                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\doprnt.c: 94:     return (i
      +                          nt)(strlen(buf) + (size_t)w);
  1842  0012F0  C015  F003         	movff	pad@buf,strlen@s
  1843  0012F4  C016  F004         	movff	pad@buf+1,strlen@s+1
  1844  0012F8  EC99  F00B         	call	_strlen	;wreg free
  1845  0012FC  501C               	movf	pad@w^0,w,c
  1846  0012FE  2403               	addwf	?_strlen^0,w,c
  1847  001300  6E13               	movwf	?_pad^0,c
  1848  001302  501D               	movf	(pad@w+1)^0,w,c
  1849  001304  2004               	addwfc	(?_strlen+1)^0,w,c
  1850  001306  6E14               	movwf	(?_pad+1)^0,c
  1851  001308  0012               	return		;funcret
  1852  00130A                     __end_of_pad:
  1853                           	callstack 0
  1854                           
  1855 ;; *************** function _strlen *****************
  1856 ;; Defined at:
  1857 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\strlen.c"
  1858 ;; Parameters:    Size  Location     Type
  1859 ;;  s               2    2[COMRAM] PTR const unsigned char 
  1860 ;;		 -> dbuf(32), 
  1861 ;; Auto vars:     Size  Location     Type
  1862 ;;  a               2    4[COMRAM] PTR const unsigned char 
  1863 ;;		 -> dbuf(32), 
  1864 ;; Return value:  Size  Location     Type
  1865 ;;                  2    2[COMRAM] unsigned int 
  1866 ;; Registers used:
  1867 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1868 ;; Tracked objects:
  1869 ;;		On entry : 0/0
  1870 ;;		On exit  : 0/0
  1871 ;;		Unchanged: 0/0
  1872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1873 ;;      Params:         2       0       0       0       0       0       0
  1874 ;;      Locals:         2       0       0       0       0       0       0
  1875 ;;      Temps:          0       0       0       0       0       0       0
  1876 ;;      Totals:         4       0       0       0       0       0       0
  1877 ;;Total ram usage:        4 bytes
  1878 ;; Hardware stack levels used: 1
  1879 ;; Hardware stack levels required when called: 1
  1880 ;; This function calls:
  1881 ;;		Nothing
  1882 ;; This function is called by:
  1883 ;;		_pad
  1884 ;; This function uses a non-reentrant model
  1885 ;;
  1886                           
  1887                           	psect	text6
  1888  001732                     __ptext6:
  1889                           	callstack 0
  1890  001732                     _strlen:
  1891                           	callstack 24
  1892  001732  C003  F005         	movff	strlen@s,strlen@a
  1893  001736  C004  F006         	movff	strlen@s+1,strlen@a+1
  1894  00173A  EFA1  F00B         	goto	l1517
  1895  00173E                     l1515:
  1896  00173E  4A03               	infsnz	strlen@s^0,f,c
  1897  001740  2A04               	incf	(strlen@s+1)^0,f,c
  1898  001742                     l1517:
  1899  001742  C003  FFD9         	movff	strlen@s,fsr2l
  1900  001746  C004  FFDA         	movff	strlen@s+1,fsr2h
  1901  00174A  50DF               	movf	indf2,w,c
  1902  00174C  A4D8               	btfss	status,2,c
  1903  00174E  EFAB  F00B         	goto	u731
  1904  001752  EFAD  F00B         	goto	u730
  1905  001756                     u731:
  1906  001756  EF9F  F00B         	goto	l1515
  1907  00175A                     u730:
  1908  00175A  5005               	movf	strlen@a^0,w,c
  1909  00175C  5C03               	subwf	strlen@s^0,w,c
  1910  00175E  6E03               	movwf	?_strlen^0,c
  1911  001760  5006               	movf	(strlen@a+1)^0,w,c
  1912  001762  5804               	subwfb	(strlen@s+1)^0,w,c
  1913  001764  6E04               	movwf	(?_strlen+1)^0,c
  1914  001766  0012               	return		;funcret
  1915  001768                     __end_of_strlen:
  1916                           	callstack 0
  1917                           
  1918 ;; *************** function _fputs *****************
  1919 ;; Defined at:
  1920 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\nf_fputs.c"
  1921 ;; Parameters:    Size  Location     Type
  1922 ;;  s               2   11[COMRAM] PTR const unsigned char 
  1923 ;;		 -> dbuf(32), 
  1924 ;;  fp              2   13[COMRAM] PTR struct _IO_FILE
  1925 ;;		 -> sprintf@f(11), 
  1926 ;; Auto vars:     Size  Location     Type
  1927 ;;  i               2   16[COMRAM] int 
  1928 ;;  c               1   15[COMRAM] unsigned char 
  1929 ;; Return value:  Size  Location     Type
  1930 ;;                  2   11[COMRAM] int 
  1931 ;; Registers used:
  1932 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1933 ;; Tracked objects:
  1934 ;;		On entry : 0/0
  1935 ;;		On exit  : 0/0
  1936 ;;		Unchanged: 0/0
  1937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1938 ;;      Params:         4       0       0       0       0       0       0
  1939 ;;      Locals:         3       0       0       0       0       0       0
  1940 ;;      Temps:          0       0       0       0       0       0       0
  1941 ;;      Totals:         7       0       0       0       0       0       0
  1942 ;;Total ram usage:        7 bytes
  1943 ;; Hardware stack levels used: 1
  1944 ;; Hardware stack levels required when called: 3
  1945 ;; This function calls:
  1946 ;;		_fputc
  1947 ;; This function is called by:
  1948 ;;		_pad
  1949 ;; This function uses a non-reentrant model
  1950 ;;
  1951                           
  1952                           	psect	text7
  1953  001676                     __ptext7:
  1954                           	callstack 0
  1955  001676                     _fputs:
  1956                           	callstack 22
  1957  001676  0E00               	movlw	0
  1958  001678  6E12               	movwf	(fputs@i+1)^0,c
  1959  00167A  0E00               	movlw	0
  1960  00167C  6E11               	movwf	fputs@i^0,c
  1961  00167E  EF4C  F00B         	goto	l1511
  1962  001682                     l1507:
  1963  001682  C010  F003         	movff	fputs@c,fputc@c
  1964  001686  6A04               	clrf	(fputc@c+1)^0,c
  1965  001688  C00E  F005         	movff	fputs@fp,fputc@fp
  1966  00168C  C00F  F006         	movff	fputs@fp+1,fputc@fp+1
  1967  001690  ECBF  F008         	call	_fputc	;wreg free
  1968  001694  4A11               	infsnz	fputs@i^0,f,c
  1969  001696  2A12               	incf	(fputs@i+1)^0,f,c
  1970  001698                     l1511:
  1971  001698  5011               	movf	fputs@i^0,w,c
  1972  00169A  240C               	addwf	fputs@s^0,w,c
  1973  00169C  6ED9               	movwf	fsr2l,c
  1974  00169E  5012               	movf	(fputs@i+1)^0,w,c
  1975  0016A0  200D               	addwfc	(fputs@s+1)^0,w,c
  1976  0016A2  6EDA               	movwf	fsr2h,c
  1977  0016A4  50DF               	movf	indf2,w,c
  1978  0016A6  6E10               	movwf	fputs@c^0,c
  1979  0016A8  5010               	movf	fputs@c^0,w,c
  1980  0016AA  A4D8               	btfss	status,2,c
  1981  0016AC  EF5A  F00B         	goto	u721
  1982  0016B0  EF5C  F00B         	goto	u720
  1983  0016B4                     u721:
  1984  0016B4  EF41  F00B         	goto	l1507
  1985  0016B8                     u720:
  1986  0016B8  0012               	return		;funcret
  1987  0016BA                     __end_of_fputs:
  1988                           	callstack 0
  1989                           
  1990 ;; *************** function _fputc *****************
  1991 ;; Defined at:
  1992 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\nf_fputc.c"
  1993 ;; Parameters:    Size  Location     Type
  1994 ;;  c               2    2[COMRAM] int 
  1995 ;;  fp              2    4[COMRAM] PTR struct _IO_FILE
  1996 ;;		 -> sprintf@f(11), 
  1997 ;; Auto vars:     Size  Location     Type
  1998 ;;		None
  1999 ;; Return value:  Size  Location     Type
  2000 ;;                  2    2[COMRAM] int 
  2001 ;; Registers used:
  2002 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2003 ;; Tracked objects:
  2004 ;;		On entry : 0/0
  2005 ;;		On exit  : 0/0
  2006 ;;		Unchanged: 0/0
  2007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2008 ;;      Params:         4       0       0       0       0       0       0
  2009 ;;      Locals:         0       0       0       0       0       0       0
  2010 ;;      Temps:          5       0       0       0       0       0       0
  2011 ;;      Totals:         9       0       0       0       0       0       0
  2012 ;;Total ram usage:        9 bytes
  2013 ;; Hardware stack levels used: 1
  2014 ;; Hardware stack levels required when called: 2
  2015 ;; This function calls:
  2016 ;;		_putch
  2017 ;; This function is called by:
  2018 ;;		_pad
  2019 ;;		_vfpfcnvrt
  2020 ;;		_fputs
  2021 ;; This function uses a non-reentrant model
  2022 ;;
  2023                           
  2024                           	psect	text8
  2025  00117E                     __ptext8:
  2026                           	callstack 0
  2027  00117E                     _fputc:
  2028                           	callstack 25
  2029  00117E  5005               	movf	fputc@fp^0,w,c
  2030  001180  1006               	iorwf	(fputc@fp+1)^0,w,c
  2031  001182  B4D8               	btfsc	status,2,c
  2032  001184  EFC6  F008         	goto	u681
  2033  001188  EFC8  F008         	goto	u680
  2034  00118C                     u681:
  2035  00118C  EFD1  F008         	goto	l1495
  2036  001190                     u680:
  2037  001190  5005               	movf	fputc@fp^0,w,c
  2038  001192  1006               	iorwf	(fputc@fp+1)^0,w,c
  2039  001194  A4D8               	btfss	status,2,c
  2040  001196  EFCF  F008         	goto	u691
  2041  00119A  EFD1  F008         	goto	u690
  2042  00119E                     u691:
  2043  00119E  EFD6  F008         	goto	l1497
  2044  0011A2                     u690:
  2045  0011A2                     l1495:
  2046  0011A2  5003               	movf	fputc@c^0,w,c
  2047  0011A4  EC0D  F00C         	call	_putch
  2048  0011A8  EF23  F009         	goto	l942
  2049  0011AC                     l1497:
  2050  0011AC  EE20 F009          	lfsr	2,9
  2051  0011B0  5005               	movf	fputc@fp^0,w,c
  2052  0011B2  26D9               	addwf	fsr2l,f,c
  2053  0011B4  5006               	movf	(fputc@fp+1)^0,w,c
  2054  0011B6  22DA               	addwfc	fsr2h,f,c
  2055  0011B8  50DE               	movf	postinc2,w,c
  2056  0011BA  10DE               	iorwf	postinc2,w,c
  2057  0011BC  B4D8               	btfsc	status,2,c
  2058  0011BE  EFE3  F008         	goto	u701
  2059  0011C2  EFE5  F008         	goto	u700
  2060  0011C6                     u701:
  2061  0011C6  EF00  F009         	goto	l1501
  2062  0011CA                     u700:
  2063  0011CA  EE20 F009          	lfsr	2,9
  2064  0011CE  5005               	movf	fputc@fp^0,w,c
  2065  0011D0  26D9               	addwf	fsr2l,f,c
  2066  0011D2  5006               	movf	(fputc@fp+1)^0,w,c
  2067  0011D4  22DA               	addwfc	fsr2h,f,c
  2068  0011D6  EE10 F003          	lfsr	1,3
  2069  0011DA  5005               	movf	fputc@fp^0,w,c
  2070  0011DC  26E1               	addwf	fsr1l,f,c
  2071  0011DE  5006               	movf	(fputc@fp+1)^0,w,c
  2072  0011E0  22E2               	addwfc	fsr1h,f,c
  2073  0011E2  50DE               	movf	postinc2,w,c
  2074  0011E4  5CE6               	subwf	postinc1,w,c
  2075  0011E6  50E6               	movf	postinc1,w,c
  2076  0011E8  0A80               	xorlw	128
  2077  0011EA  6E0B               	movwf	(??_fputc+4)^0,c
  2078  0011EC  50DE               	movf	postinc2,w,c
  2079  0011EE  0A80               	xorlw	128
  2080  0011F0  580B               	subwfb	(??_fputc+4)^0,w,c
  2081  0011F2  B0D8               	btfsc	status,0,c
  2082  0011F4  EFFE  F008         	goto	u711
  2083  0011F8  EF00  F009         	goto	u710
  2084  0011FC                     u711:
  2085  0011FC  EF23  F009         	goto	l942
  2086  001200                     u710:
  2087  001200                     l1501:
  2088  001200  EE20 F003          	lfsr	2,3
  2089  001204  5005               	movf	fputc@fp^0,w,c
  2090  001206  26D9               	addwf	fsr2l,f,c
  2091  001208  5006               	movf	(fputc@fp+1)^0,w,c
  2092  00120A  22DA               	addwfc	fsr2h,f,c
  2093  00120C  CFDE F007          	movff	postinc2,??_fputc
  2094  001210  CFDD F008          	movff	postdec2,??_fputc+1
  2095  001214  C005  FFD9         	movff	fputc@fp,fsr2l
  2096  001218  C006  FFDA         	movff	fputc@fp+1,fsr2h
  2097  00121C  CFDE F009          	movff	postinc2,??_fputc+2
  2098  001220  CFDD F00A          	movff	postdec2,??_fputc+3
  2099  001224  5007               	movf	??_fputc^0,w,c
  2100  001226  2409               	addwf	(??_fputc+2)^0,w,c
  2101  001228  6ED9               	movwf	fsr2l,c
  2102  00122A  5008               	movf	(??_fputc+1)^0,w,c
  2103  00122C  200A               	addwfc	(??_fputc+3)^0,w,c
  2104  00122E  6EDA               	movwf	fsr2h,c
  2105  001230  C003  FFDF         	movff	fputc@c,indf2
  2106  001234  EE20 F003          	lfsr	2,3
  2107  001238  5005               	movf	fputc@fp^0,w,c
  2108  00123A  26D9               	addwf	fsr2l,f,c
  2109  00123C  5006               	movf	(fputc@fp+1)^0,w,c
  2110  00123E  22DA               	addwfc	fsr2h,f,c
  2111  001240  2ADE               	incf	postinc2,f,c
  2112  001242  0E00               	movlw	0
  2113  001244  22DD               	addwfc	postdec2,f,c
  2114  001246                     l942:
  2115  001246  0012               	return		;funcret
  2116  001248                     __end_of_fputc:
  2117                           	callstack 0
  2118                           
  2119 ;; *************** function _putch *****************
  2120 ;; Defined at:
  2121 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\putch.c"
  2122 ;; Parameters:    Size  Location     Type
  2123 ;;  c               1    wreg     unsigned char 
  2124 ;; Auto vars:     Size  Location     Type
  2125 ;;  c               1    0[COMRAM] unsigned char 
  2126 ;; Return value:  Size  Location     Type
  2127 ;;                  1    wreg      void 
  2128 ;; Registers used:
  2129 ;;		wreg
  2130 ;; Tracked objects:
  2131 ;;		On entry : 0/0
  2132 ;;		On exit  : 0/0
  2133 ;;		Unchanged: 0/0
  2134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2135 ;;      Params:         0       0       0       0       0       0       0
  2136 ;;      Locals:         0       0       0       0       0       0       0
  2137 ;;      Temps:          0       0       0       0       0       0       0
  2138 ;;      Totals:         0       0       0       0       0       0       0
  2139 ;;Total ram usage:        0 bytes
  2140 ;; Hardware stack levels used: 1
  2141 ;; Hardware stack levels required when called: 1
  2142 ;; This function calls:
  2143 ;;		Nothing
  2144 ;; This function is called by:
  2145 ;;		_fputc
  2146 ;; This function uses a non-reentrant model
  2147 ;;
  2148                           
  2149                           	psect	text9
  2150  00181A                     __ptext9:
  2151                           	callstack 0
  2152  00181A                     _putch:
  2153                           	callstack 25
  2154  00181A  0012               	return		;funcret
  2155  00181C                     __end_of_putch:
  2156                           	callstack 0
  2157                           
  2158 ;; *************** function _abs *****************
  2159 ;; Defined at:
  2160 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\abs.c"
  2161 ;; Parameters:    Size  Location     Type
  2162 ;;  a               2   20[COMRAM] int 
  2163 ;; Auto vars:     Size  Location     Type
  2164 ;;		None
  2165 ;; Return value:  Size  Location     Type
  2166 ;;                  2   20[COMRAM] int 
  2167 ;; Registers used:
  2168 ;;		wreg, status,2, status,0
  2169 ;; Tracked objects:
  2170 ;;		On entry : 0/0
  2171 ;;		On exit  : 0/0
  2172 ;;		Unchanged: 0/0
  2173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2174 ;;      Params:         2       0       0       0       0       0       0
  2175 ;;      Locals:         0       0       0       0       0       0       0
  2176 ;;      Temps:          2       0       0       0       0       0       0
  2177 ;;      Totals:         4       0       0       0       0       0       0
  2178 ;;Total ram usage:        4 bytes
  2179 ;; Hardware stack levels used: 1
  2180 ;; Hardware stack levels required when called: 1
  2181 ;; This function calls:
  2182 ;;		Nothing
  2183 ;; This function is called by:
  2184 ;;		_dtoa
  2185 ;; This function uses a non-reentrant model
  2186 ;;
  2187                           
  2188                           	psect	text10
  2189  0016BA                     __ptext10:
  2190                           	callstack 0
  2191  0016BA                     _abs:
  2192                           	callstack 25
  2193  0016BA  BE16               	btfsc	(abs@a+1)^0,7,c
  2194  0016BC  EF6A  F00B         	goto	u910
  2195  0016C0  5016               	movf	(abs@a+1)^0,w,c
  2196  0016C2  E106               	bnz	u911
  2197  0016C4  0415               	decf	abs@a^0,w,c
  2198  0016C6  B0D8               	btfsc	status,0,c
  2199  0016C8  EF68  F00B         	goto	u911
  2200  0016CC  EF6A  F00B         	goto	u910
  2201  0016D0                     u911:
  2202  0016D0  EF78  F00B         	goto	l888
  2203  0016D4                     u910:
  2204  0016D4  C015  F017         	movff	abs@a,??_abs
  2205  0016D8  C016  F018         	movff	abs@a+1,??_abs+1
  2206  0016DC  1E17               	comf	??_abs^0,f,c
  2207  0016DE  1E18               	comf	(??_abs+1)^0,f,c
  2208  0016E0  4A17               	infsnz	??_abs^0,f,c
  2209  0016E2  2A18               	incf	(??_abs+1)^0,f,c
  2210  0016E4  C017  F015         	movff	??_abs,?_abs
  2211  0016E8  C018  F016         	movff	??_abs+1,?_abs+1
  2212  0016EC  EF7C  F00B         	goto	l891
  2213  0016F0                     l888:
  2214  0016F0  C015  F015         	movff	abs@a,?_abs
  2215  0016F4  C016  F016         	movff	abs@a+1,?_abs+1
  2216  0016F8                     l891:
  2217  0016F8  0012               	return		;funcret
  2218  0016FA                     __end_of_abs:
  2219                           	callstack 0
  2220                           
  2221 ;; *************** function ___aomod *****************
  2222 ;; Defined at:
  2223 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\aomod.c"
  2224 ;; Parameters:    Size  Location     Type
  2225 ;;  dividend        8    2[COMRAM] long long 
  2226 ;;  divisor         8   10[COMRAM] long long 
  2227 ;; Auto vars:     Size  Location     Type
  2228 ;;  sign            1   19[COMRAM] unsigned char 
  2229 ;;  counter         1   18[COMRAM] unsigned char 
  2230 ;; Return value:  Size  Location     Type
  2231 ;;                  8    2[COMRAM] long long 
  2232 ;; Registers used:
  2233 ;;		wreg, status,2, status,0
  2234 ;; Tracked objects:
  2235 ;;		On entry : 0/0
  2236 ;;		On exit  : 0/0
  2237 ;;		Unchanged: 0/0
  2238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2239 ;;      Params:        16       0       0       0       0       0       0
  2240 ;;      Locals:         2       0       0       0       0       0       0
  2241 ;;      Temps:          0       0       0       0       0       0       0
  2242 ;;      Totals:        18       0       0       0       0       0       0
  2243 ;;Total ram usage:       18 bytes
  2244 ;; Hardware stack levels used: 1
  2245 ;; Hardware stack levels required when called: 1
  2246 ;; This function calls:
  2247 ;;		Nothing
  2248 ;; This function is called by:
  2249 ;;		_dtoa
  2250 ;; This function uses a non-reentrant model
  2251 ;;
  2252                           
  2253                           	psect	text11
  2254  000DE0                     __ptext11:
  2255                           	callstack 0
  2256  000DE0                     ___aomod:
  2257                           	callstack 25
  2258  000DE0  0E00               	movlw	0
  2259  000DE2  6E14               	movwf	___aomod@sign^0,c
  2260  000DE4  BE0A               	btfsc	(___aomod@dividend+7)^0,7,c
  2261  000DE6  EFF9  F006         	goto	u810
  2262  000DEA  EFF7  F006         	goto	u811
  2263  000DEE                     u811:
  2264  000DEE  EF0B  F007         	goto	l1581
  2265  000DF2                     u810:
  2266  000DF2  1E0A               	comf	(___aomod@dividend+7)^0,f,c
  2267  000DF4  1E09               	comf	(___aomod@dividend+6)^0,f,c
  2268  000DF6  1E08               	comf	(___aomod@dividend+5)^0,f,c
  2269  000DF8  1E07               	comf	(___aomod@dividend+4)^0,f,c
  2270  000DFA  1E06               	comf	(___aomod@dividend+3)^0,f,c
  2271  000DFC  1E05               	comf	(___aomod@dividend+2)^0,f,c
  2272  000DFE  1E04               	comf	(___aomod@dividend+1)^0,f,c
  2273  000E00  6C03               	negf	___aomod@dividend^0,c
  2274  000E02  0E00               	movlw	0
  2275  000E04  2204               	addwfc	(___aomod@dividend+1)^0,f,c
  2276  000E06  2205               	addwfc	(___aomod@dividend+2)^0,f,c
  2277  000E08  2206               	addwfc	(___aomod@dividend+3)^0,f,c
  2278  000E0A  2207               	addwfc	(___aomod@dividend+4)^0,f,c
  2279  000E0C  2208               	addwfc	(___aomod@dividend+5)^0,f,c
  2280  000E0E  2209               	addwfc	(___aomod@dividend+6)^0,f,c
  2281  000E10  220A               	addwfc	(___aomod@dividend+7)^0,f,c
  2282  000E12  0E01               	movlw	1
  2283  000E14  6E14               	movwf	___aomod@sign^0,c
  2284  000E16                     l1581:
  2285  000E16  BE12               	btfsc	(___aomod@divisor+7)^0,7,c
  2286  000E18  EF12  F007         	goto	u820
  2287  000E1C  EF10  F007         	goto	u821
  2288  000E20                     u821:
  2289  000E20  EF22  F007         	goto	l1585
  2290  000E24                     u820:
  2291  000E24  1E12               	comf	(___aomod@divisor+7)^0,f,c
  2292  000E26  1E11               	comf	(___aomod@divisor+6)^0,f,c
  2293  000E28  1E10               	comf	(___aomod@divisor+5)^0,f,c
  2294  000E2A  1E0F               	comf	(___aomod@divisor+4)^0,f,c
  2295  000E2C  1E0E               	comf	(___aomod@divisor+3)^0,f,c
  2296  000E2E  1E0D               	comf	(___aomod@divisor+2)^0,f,c
  2297  000E30  1E0C               	comf	(___aomod@divisor+1)^0,f,c
  2298  000E32  6C0B               	negf	___aomod@divisor^0,c
  2299  000E34  0E00               	movlw	0
  2300  000E36  220C               	addwfc	(___aomod@divisor+1)^0,f,c
  2301  000E38  220D               	addwfc	(___aomod@divisor+2)^0,f,c
  2302  000E3A  220E               	addwfc	(___aomod@divisor+3)^0,f,c
  2303  000E3C  220F               	addwfc	(___aomod@divisor+4)^0,f,c
  2304  000E3E  2210               	addwfc	(___aomod@divisor+5)^0,f,c
  2305  000E40  2211               	addwfc	(___aomod@divisor+6)^0,f,c
  2306  000E42  2212               	addwfc	(___aomod@divisor+7)^0,f,c
  2307  000E44                     l1585:
  2308  000E44  500B               	movf	___aomod@divisor^0,w,c
  2309  000E46  100C               	iorwf	(___aomod@divisor+1)^0,w,c
  2310  000E48  100D               	iorwf	(___aomod@divisor+2)^0,w,c
  2311  000E4A  100E               	iorwf	(___aomod@divisor+3)^0,w,c
  2312  000E4C  100F               	iorwf	(___aomod@divisor+4)^0,w,c
  2313  000E4E  1010               	iorwf	(___aomod@divisor+5)^0,w,c
  2314  000E50  1011               	iorwf	(___aomod@divisor+6)^0,w,c
  2315  000E52  1012               	iorwf	(___aomod@divisor+7)^0,w,c
  2316  000E54  B4D8               	btfsc	status,2,c
  2317  000E56  EF2F  F007         	goto	u831
  2318  000E5A  EF31  F007         	goto	u830
  2319  000E5E                     u831:
  2320  000E5E  EF79  F007         	goto	l1601
  2321  000E62                     u830:
  2322  000E62  0E01               	movlw	1
  2323  000E64  6E13               	movwf	___aomod@counter^0,c
  2324  000E66  EF3F  F007         	goto	l1591
  2325  000E6A                     l1589:
  2326  000E6A  90D8               	bcf	status,0,c
  2327  000E6C  360B               	rlcf	___aomod@divisor^0,f,c
  2328  000E6E  360C               	rlcf	(___aomod@divisor+1)^0,f,c
  2329  000E70  360D               	rlcf	(___aomod@divisor+2)^0,f,c
  2330  000E72  360E               	rlcf	(___aomod@divisor+3)^0,f,c
  2331  000E74  360F               	rlcf	(___aomod@divisor+4)^0,f,c
  2332  000E76  3610               	rlcf	(___aomod@divisor+5)^0,f,c
  2333  000E78  3611               	rlcf	(___aomod@divisor+6)^0,f,c
  2334  000E7A  3612               	rlcf	(___aomod@divisor+7)^0,f,c
  2335  000E7C  2A13               	incf	___aomod@counter^0,f,c
  2336  000E7E                     l1591:
  2337  000E7E  AE12               	btfss	(___aomod@divisor+7)^0,7,c
  2338  000E80  EF44  F007         	goto	u841
  2339  000E84  EF46  F007         	goto	u840
  2340  000E88                     u841:
  2341  000E88  EF35  F007         	goto	l1589
  2342  000E8C                     u840:
  2343  000E8C                     l1593:
  2344  000E8C  500B               	movf	___aomod@divisor^0,w,c
  2345  000E8E  5C03               	subwf	___aomod@dividend^0,w,c
  2346  000E90  500C               	movf	(___aomod@divisor+1)^0,w,c
  2347  000E92  5804               	subwfb	(___aomod@dividend+1)^0,w,c
  2348  000E94  500D               	movf	(___aomod@divisor+2)^0,w,c
  2349  000E96  5805               	subwfb	(___aomod@dividend+2)^0,w,c
  2350  000E98  500E               	movf	(___aomod@divisor+3)^0,w,c
  2351  000E9A  5806               	subwfb	(___aomod@dividend+3)^0,w,c
  2352  000E9C  500F               	movf	(___aomod@divisor+4)^0,w,c
  2353  000E9E  5807               	subwfb	(___aomod@dividend+4)^0,w,c
  2354  000EA0  5010               	movf	(___aomod@divisor+5)^0,w,c
  2355  000EA2  5808               	subwfb	(___aomod@dividend+5)^0,w,c
  2356  000EA4  5011               	movf	(___aomod@divisor+6)^0,w,c
  2357  000EA6  5809               	subwfb	(___aomod@dividend+6)^0,w,c
  2358  000EA8  5012               	movf	(___aomod@divisor+7)^0,w,c
  2359  000EAA  580A               	subwfb	(___aomod@dividend+7)^0,w,c
  2360  000EAC  A0D8               	btfss	status,0,c
  2361  000EAE  EF5B  F007         	goto	u851
  2362  000EB2  EF5D  F007         	goto	u850
  2363  000EB6                     u851:
  2364  000EB6  EF6D  F007         	goto	l1597
  2365  000EBA                     u850:
  2366  000EBA  500B               	movf	___aomod@divisor^0,w,c
  2367  000EBC  5E03               	subwf	___aomod@dividend^0,f,c
  2368  000EBE  500C               	movf	(___aomod@divisor+1)^0,w,c
  2369  000EC0  5A04               	subwfb	(___aomod@dividend+1)^0,f,c
  2370  000EC2  500D               	movf	(___aomod@divisor+2)^0,w,c
  2371  000EC4  5A05               	subwfb	(___aomod@dividend+2)^0,f,c
  2372  000EC6  500E               	movf	(___aomod@divisor+3)^0,w,c
  2373  000EC8  5A06               	subwfb	(___aomod@dividend+3)^0,f,c
  2374  000ECA  500F               	movf	(___aomod@divisor+4)^0,w,c
  2375  000ECC  5A07               	subwfb	(___aomod@dividend+4)^0,f,c
  2376  000ECE  5010               	movf	(___aomod@divisor+5)^0,w,c
  2377  000ED0  5A08               	subwfb	(___aomod@dividend+5)^0,f,c
  2378  000ED2  5011               	movf	(___aomod@divisor+6)^0,w,c
  2379  000ED4  5A09               	subwfb	(___aomod@dividend+6)^0,f,c
  2380  000ED6  5012               	movf	(___aomod@divisor+7)^0,w,c
  2381  000ED8  5A0A               	subwfb	(___aomod@dividend+7)^0,f,c
  2382  000EDA                     l1597:
  2383  000EDA  90D8               	bcf	status,0,c
  2384  000EDC  3212               	rrcf	(___aomod@divisor+7)^0,f,c
  2385  000EDE  3211               	rrcf	(___aomod@divisor+6)^0,f,c
  2386  000EE0  3210               	rrcf	(___aomod@divisor+5)^0,f,c
  2387  000EE2  320F               	rrcf	(___aomod@divisor+4)^0,f,c
  2388  000EE4  320E               	rrcf	(___aomod@divisor+3)^0,f,c
  2389  000EE6  320D               	rrcf	(___aomod@divisor+2)^0,f,c
  2390  000EE8  320C               	rrcf	(___aomod@divisor+1)^0,f,c
  2391  000EEA  320B               	rrcf	___aomod@divisor^0,f,c
  2392  000EEC  2E13               	decfsz	___aomod@counter^0,f,c
  2393  000EEE  EF46  F007         	goto	l1593
  2394  000EF2                     l1601:
  2395  000EF2  5014               	movf	___aomod@sign^0,w,c
  2396  000EF4  B4D8               	btfsc	status,2,c
  2397  000EF6  EF7F  F007         	goto	u861
  2398  000EFA  EF81  F007         	goto	u860
  2399  000EFE                     u861:
  2400  000EFE  EF91  F007         	goto	l1605
  2401  000F02                     u860:
  2402  000F02  1E0A               	comf	(___aomod@dividend+7)^0,f,c
  2403  000F04  1E09               	comf	(___aomod@dividend+6)^0,f,c
  2404  000F06  1E08               	comf	(___aomod@dividend+5)^0,f,c
  2405  000F08  1E07               	comf	(___aomod@dividend+4)^0,f,c
  2406  000F0A  1E06               	comf	(___aomod@dividend+3)^0,f,c
  2407  000F0C  1E05               	comf	(___aomod@dividend+2)^0,f,c
  2408  000F0E  1E04               	comf	(___aomod@dividend+1)^0,f,c
  2409  000F10  6C03               	negf	___aomod@dividend^0,c
  2410  000F12  0E00               	movlw	0
  2411  000F14  2204               	addwfc	(___aomod@dividend+1)^0,f,c
  2412  000F16  2205               	addwfc	(___aomod@dividend+2)^0,f,c
  2413  000F18  2206               	addwfc	(___aomod@dividend+3)^0,f,c
  2414  000F1A  2207               	addwfc	(___aomod@dividend+4)^0,f,c
  2415  000F1C  2208               	addwfc	(___aomod@dividend+5)^0,f,c
  2416  000F1E  2209               	addwfc	(___aomod@dividend+6)^0,f,c
  2417  000F20  220A               	addwfc	(___aomod@dividend+7)^0,f,c
  2418  000F22                     l1605:
  2419  000F22  C003  F003         	movff	___aomod@dividend,?___aomod
  2420  000F26  C004  F004         	movff	___aomod@dividend+1,?___aomod+1
  2421  000F2A  C005  F005         	movff	___aomod@dividend+2,?___aomod+2
  2422  000F2E  C006  F006         	movff	___aomod@dividend+3,?___aomod+3
  2423  000F32  C007  F007         	movff	___aomod@dividend+4,?___aomod+4
  2424  000F36  C008  F008         	movff	___aomod@dividend+5,?___aomod+5
  2425  000F3A  C009  F009         	movff	___aomod@dividend+6,?___aomod+6
  2426  000F3E  C00A  F00A         	movff	___aomod@dividend+7,?___aomod+7
  2427  000F42  0012               	return		;funcret
  2428  000F44                     __end_of___aomod:
  2429                           	callstack 0
  2430                           
  2431 ;; *************** function ___aodiv *****************
  2432 ;; Defined at:
  2433 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\aodiv.c"
  2434 ;; Parameters:    Size  Location     Type
  2435 ;;  dividend        8    2[COMRAM] long long 
  2436 ;;  divisor         8   10[COMRAM] long long 
  2437 ;; Auto vars:     Size  Location     Type
  2438 ;;  quotient        8   20[COMRAM] long long 
  2439 ;;  sign            1   19[COMRAM] unsigned char 
  2440 ;;  counter         1   18[COMRAM] unsigned char 
  2441 ;; Return value:  Size  Location     Type
  2442 ;;                  8    2[COMRAM] long long 
  2443 ;; Registers used:
  2444 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2445 ;; Tracked objects:
  2446 ;;		On entry : 0/0
  2447 ;;		On exit  : 0/0
  2448 ;;		Unchanged: 0/0
  2449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2450 ;;      Params:        16       0       0       0       0       0       0
  2451 ;;      Locals:        10       0       0       0       0       0       0
  2452 ;;      Temps:          0       0       0       0       0       0       0
  2453 ;;      Totals:        26       0       0       0       0       0       0
  2454 ;;Total ram usage:       26 bytes
  2455 ;; Hardware stack levels used: 1
  2456 ;; Hardware stack levels required when called: 1
  2457 ;; This function calls:
  2458 ;;		Nothing
  2459 ;; This function is called by:
  2460 ;;		_dtoa
  2461 ;; This function uses a non-reentrant model
  2462 ;;
  2463                           
  2464                           	psect	text12
  2465  000C58                     __ptext12:
  2466                           	callstack 0
  2467  000C58                     ___aodiv:
  2468                           	callstack 25
  2469  000C58  0E00               	movlw	0
  2470  000C5A  6E14               	movwf	___aodiv@sign^0,c
  2471  000C5C  BE12               	btfsc	(___aodiv@divisor+7)^0,7,c
  2472  000C5E  EF35  F006         	goto	u740
  2473  000C62  EF33  F006         	goto	u741
  2474  000C66                     u741:
  2475  000C66  EF47  F006         	goto	l1537
  2476  000C6A                     u740:
  2477  000C6A  1E12               	comf	(___aodiv@divisor+7)^0,f,c
  2478  000C6C  1E11               	comf	(___aodiv@divisor+6)^0,f,c
  2479  000C6E  1E10               	comf	(___aodiv@divisor+5)^0,f,c
  2480  000C70  1E0F               	comf	(___aodiv@divisor+4)^0,f,c
  2481  000C72  1E0E               	comf	(___aodiv@divisor+3)^0,f,c
  2482  000C74  1E0D               	comf	(___aodiv@divisor+2)^0,f,c
  2483  000C76  1E0C               	comf	(___aodiv@divisor+1)^0,f,c
  2484  000C78  6C0B               	negf	___aodiv@divisor^0,c
  2485  000C7A  0E00               	movlw	0
  2486  000C7C  220C               	addwfc	(___aodiv@divisor+1)^0,f,c
  2487  000C7E  220D               	addwfc	(___aodiv@divisor+2)^0,f,c
  2488  000C80  220E               	addwfc	(___aodiv@divisor+3)^0,f,c
  2489  000C82  220F               	addwfc	(___aodiv@divisor+4)^0,f,c
  2490  000C84  2210               	addwfc	(___aodiv@divisor+5)^0,f,c
  2491  000C86  2211               	addwfc	(___aodiv@divisor+6)^0,f,c
  2492  000C88  2212               	addwfc	(___aodiv@divisor+7)^0,f,c
  2493  000C8A  0E01               	movlw	1
  2494  000C8C  6E14               	movwf	___aodiv@sign^0,c
  2495  000C8E                     l1537:
  2496  000C8E  BE0A               	btfsc	(___aodiv@dividend+7)^0,7,c
  2497  000C90  EF4E  F006         	goto	u750
  2498  000C94  EF4C  F006         	goto	u751
  2499  000C98                     u751:
  2500  000C98  EF60  F006         	goto	l1543
  2501  000C9C                     u750:
  2502  000C9C  1E0A               	comf	(___aodiv@dividend+7)^0,f,c
  2503  000C9E  1E09               	comf	(___aodiv@dividend+6)^0,f,c
  2504  000CA0  1E08               	comf	(___aodiv@dividend+5)^0,f,c
  2505  000CA2  1E07               	comf	(___aodiv@dividend+4)^0,f,c
  2506  000CA4  1E06               	comf	(___aodiv@dividend+3)^0,f,c
  2507  000CA6  1E05               	comf	(___aodiv@dividend+2)^0,f,c
  2508  000CA8  1E04               	comf	(___aodiv@dividend+1)^0,f,c
  2509  000CAA  6C03               	negf	___aodiv@dividend^0,c
  2510  000CAC  0E00               	movlw	0
  2511  000CAE  2204               	addwfc	(___aodiv@dividend+1)^0,f,c
  2512  000CB0  2205               	addwfc	(___aodiv@dividend+2)^0,f,c
  2513  000CB2  2206               	addwfc	(___aodiv@dividend+3)^0,f,c
  2514  000CB4  2207               	addwfc	(___aodiv@dividend+4)^0,f,c
  2515  000CB6  2208               	addwfc	(___aodiv@dividend+5)^0,f,c
  2516  000CB8  2209               	addwfc	(___aodiv@dividend+6)^0,f,c
  2517  000CBA  220A               	addwfc	(___aodiv@dividend+7)^0,f,c
  2518  000CBC  0E01               	movlw	1
  2519  000CBE  1A14               	xorwf	___aodiv@sign^0,f,c
  2520  000CC0                     l1543:
  2521  000CC0  EE20  F015         	lfsr	2,___aodiv@quotient
  2522  000CC4  0E07               	movlw	7
  2523  000CC6                     u761:
  2524  000CC6  6ADE               	clrf	postinc2,c
  2525  000CC8  06E8               	decf	wreg,f,c
  2526  000CCA  E2FD               	bc	u761
  2527  000CCC  500B               	movf	___aodiv@divisor^0,w,c
  2528  000CCE  100C               	iorwf	(___aodiv@divisor+1)^0,w,c
  2529  000CD0  100D               	iorwf	(___aodiv@divisor+2)^0,w,c
  2530  000CD2  100E               	iorwf	(___aodiv@divisor+3)^0,w,c
  2531  000CD4  100F               	iorwf	(___aodiv@divisor+4)^0,w,c
  2532  000CD6  1010               	iorwf	(___aodiv@divisor+5)^0,w,c
  2533  000CD8  1011               	iorwf	(___aodiv@divisor+6)^0,w,c
  2534  000CDA  1012               	iorwf	(___aodiv@divisor+7)^0,w,c
  2535  000CDC  B4D8               	btfsc	status,2,c
  2536  000CDE  EF73  F006         	goto	u771
  2537  000CE2  EF75  F006         	goto	u770
  2538  000CE6                     u771:
  2539  000CE6  EFC7  F006         	goto	l1565
  2540  000CEA                     u770:
  2541  000CEA  0E01               	movlw	1
  2542  000CEC  6E13               	movwf	___aodiv@counter^0,c
  2543  000CEE  EF83  F006         	goto	l1551
  2544  000CF2                     l1549:
  2545  000CF2  90D8               	bcf	status,0,c
  2546  000CF4  360B               	rlcf	___aodiv@divisor^0,f,c
  2547  000CF6  360C               	rlcf	(___aodiv@divisor+1)^0,f,c
  2548  000CF8  360D               	rlcf	(___aodiv@divisor+2)^0,f,c
  2549  000CFA  360E               	rlcf	(___aodiv@divisor+3)^0,f,c
  2550  000CFC  360F               	rlcf	(___aodiv@divisor+4)^0,f,c
  2551  000CFE  3610               	rlcf	(___aodiv@divisor+5)^0,f,c
  2552  000D00  3611               	rlcf	(___aodiv@divisor+6)^0,f,c
  2553  000D02  3612               	rlcf	(___aodiv@divisor+7)^0,f,c
  2554  000D04  2A13               	incf	___aodiv@counter^0,f,c
  2555  000D06                     l1551:
  2556  000D06  AE12               	btfss	(___aodiv@divisor+7)^0,7,c
  2557  000D08  EF88  F006         	goto	u781
  2558  000D0C  EF8A  F006         	goto	u780
  2559  000D10                     u781:
  2560  000D10  EF79  F006         	goto	l1549
  2561  000D14                     u780:
  2562  000D14                     l1553:
  2563  000D14  90D8               	bcf	status,0,c
  2564  000D16  3615               	rlcf	___aodiv@quotient^0,f,c
  2565  000D18  3616               	rlcf	(___aodiv@quotient+1)^0,f,c
  2566  000D1A  3617               	rlcf	(___aodiv@quotient+2)^0,f,c
  2567  000D1C  3618               	rlcf	(___aodiv@quotient+3)^0,f,c
  2568  000D1E  3619               	rlcf	(___aodiv@quotient+4)^0,f,c
  2569  000D20  361A               	rlcf	(___aodiv@quotient+5)^0,f,c
  2570  000D22  361B               	rlcf	(___aodiv@quotient+6)^0,f,c
  2571  000D24  361C               	rlcf	(___aodiv@quotient+7)^0,f,c
  2572  000D26  500B               	movf	___aodiv@divisor^0,w,c
  2573  000D28  5C03               	subwf	___aodiv@dividend^0,w,c
  2574  000D2A  500C               	movf	(___aodiv@divisor+1)^0,w,c
  2575  000D2C  5804               	subwfb	(___aodiv@dividend+1)^0,w,c
  2576  000D2E  500D               	movf	(___aodiv@divisor+2)^0,w,c
  2577  000D30  5805               	subwfb	(___aodiv@dividend+2)^0,w,c
  2578  000D32  500E               	movf	(___aodiv@divisor+3)^0,w,c
  2579  000D34  5806               	subwfb	(___aodiv@dividend+3)^0,w,c
  2580  000D36  500F               	movf	(___aodiv@divisor+4)^0,w,c
  2581  000D38  5807               	subwfb	(___aodiv@dividend+4)^0,w,c
  2582  000D3A  5010               	movf	(___aodiv@divisor+5)^0,w,c
  2583  000D3C  5808               	subwfb	(___aodiv@dividend+5)^0,w,c
  2584  000D3E  5011               	movf	(___aodiv@divisor+6)^0,w,c
  2585  000D40  5809               	subwfb	(___aodiv@dividend+6)^0,w,c
  2586  000D42  5012               	movf	(___aodiv@divisor+7)^0,w,c
  2587  000D44  580A               	subwfb	(___aodiv@dividend+7)^0,w,c
  2588  000D46  A0D8               	btfss	status,0,c
  2589  000D48  EFA8  F006         	goto	u791
  2590  000D4C  EFAA  F006         	goto	u790
  2591  000D50                     u791:
  2592  000D50  EFBB  F006         	goto	l1561
  2593  000D54                     u790:
  2594  000D54  500B               	movf	___aodiv@divisor^0,w,c
  2595  000D56  5E03               	subwf	___aodiv@dividend^0,f,c
  2596  000D58  500C               	movf	(___aodiv@divisor+1)^0,w,c
  2597  000D5A  5A04               	subwfb	(___aodiv@dividend+1)^0,f,c
  2598  000D5C  500D               	movf	(___aodiv@divisor+2)^0,w,c
  2599  000D5E  5A05               	subwfb	(___aodiv@dividend+2)^0,f,c
  2600  000D60  500E               	movf	(___aodiv@divisor+3)^0,w,c
  2601  000D62  5A06               	subwfb	(___aodiv@dividend+3)^0,f,c
  2602  000D64  500F               	movf	(___aodiv@divisor+4)^0,w,c
  2603  000D66  5A07               	subwfb	(___aodiv@dividend+4)^0,f,c
  2604  000D68  5010               	movf	(___aodiv@divisor+5)^0,w,c
  2605  000D6A  5A08               	subwfb	(___aodiv@dividend+5)^0,f,c
  2606  000D6C  5011               	movf	(___aodiv@divisor+6)^0,w,c
  2607  000D6E  5A09               	subwfb	(___aodiv@dividend+6)^0,f,c
  2608  000D70  5012               	movf	(___aodiv@divisor+7)^0,w,c
  2609  000D72  5A0A               	subwfb	(___aodiv@dividend+7)^0,f,c
  2610  000D74  8015               	bsf	___aodiv@quotient^0,0,c
  2611  000D76                     l1561:
  2612  000D76  90D8               	bcf	status,0,c
  2613  000D78  3212               	rrcf	(___aodiv@divisor+7)^0,f,c
  2614  000D7A  3211               	rrcf	(___aodiv@divisor+6)^0,f,c
  2615  000D7C  3210               	rrcf	(___aodiv@divisor+5)^0,f,c
  2616  000D7E  320F               	rrcf	(___aodiv@divisor+4)^0,f,c
  2617  000D80  320E               	rrcf	(___aodiv@divisor+3)^0,f,c
  2618  000D82  320D               	rrcf	(___aodiv@divisor+2)^0,f,c
  2619  000D84  320C               	rrcf	(___aodiv@divisor+1)^0,f,c
  2620  000D86  320B               	rrcf	___aodiv@divisor^0,f,c
  2621  000D88  2E13               	decfsz	___aodiv@counter^0,f,c
  2622  000D8A  EF8A  F006         	goto	l1553
  2623  000D8E                     l1565:
  2624  000D8E  5014               	movf	___aodiv@sign^0,w,c
  2625  000D90  B4D8               	btfsc	status,2,c
  2626  000D92  EFCD  F006         	goto	u801
  2627  000D96  EFCF  F006         	goto	u800
  2628  000D9A                     u801:
  2629  000D9A  EFDF  F006         	goto	l1569
  2630  000D9E                     u800:
  2631  000D9E  1E1C               	comf	(___aodiv@quotient+7)^0,f,c
  2632  000DA0  1E1B               	comf	(___aodiv@quotient+6)^0,f,c
  2633  000DA2  1E1A               	comf	(___aodiv@quotient+5)^0,f,c
  2634  000DA4  1E19               	comf	(___aodiv@quotient+4)^0,f,c
  2635  000DA6  1E18               	comf	(___aodiv@quotient+3)^0,f,c
  2636  000DA8  1E17               	comf	(___aodiv@quotient+2)^0,f,c
  2637  000DAA  1E16               	comf	(___aodiv@quotient+1)^0,f,c
  2638  000DAC  6C15               	negf	___aodiv@quotient^0,c
  2639  000DAE  0E00               	movlw	0
  2640  000DB0  2216               	addwfc	(___aodiv@quotient+1)^0,f,c
  2641  000DB2  2217               	addwfc	(___aodiv@quotient+2)^0,f,c
  2642  000DB4  2218               	addwfc	(___aodiv@quotient+3)^0,f,c
  2643  000DB6  2219               	addwfc	(___aodiv@quotient+4)^0,f,c
  2644  000DB8  221A               	addwfc	(___aodiv@quotient+5)^0,f,c
  2645  000DBA  221B               	addwfc	(___aodiv@quotient+6)^0,f,c
  2646  000DBC  221C               	addwfc	(___aodiv@quotient+7)^0,f,c
  2647  000DBE                     l1569:
  2648  000DBE  C015  F003         	movff	___aodiv@quotient,?___aodiv
  2649  000DC2  C016  F004         	movff	___aodiv@quotient+1,?___aodiv+1
  2650  000DC6  C017  F005         	movff	___aodiv@quotient+2,?___aodiv+2
  2651  000DCA  C018  F006         	movff	___aodiv@quotient+3,?___aodiv+3
  2652  000DCE  C019  F007         	movff	___aodiv@quotient+4,?___aodiv+4
  2653  000DD2  C01A  F008         	movff	___aodiv@quotient+5,?___aodiv+5
  2654  000DD6  C01B  F009         	movff	___aodiv@quotient+6,?___aodiv+6
  2655  000DDA  C01C  F00A         	movff	___aodiv@quotient+7,?___aodiv+7
  2656  000DDE  0012               	return		;funcret
  2657  000DE0                     __end_of___aodiv:
  2658                           	callstack 0
  2659                           
  2660 ;; *************** function _atoi *****************
  2661 ;; Defined at:
  2662 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\atoi.c"
  2663 ;; Parameters:    Size  Location     Type
  2664 ;;  s               2    9[COMRAM] PTR const unsigned char 
  2665 ;;		 -> STR_3(5), 
  2666 ;; Auto vars:     Size  Location     Type
  2667 ;;  n               2   17[COMRAM] int 
  2668 ;;  neg             2   15[COMRAM] int 
  2669 ;; Return value:  Size  Location     Type
  2670 ;;                  2    9[COMRAM] int 
  2671 ;; Registers used:
  2672 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2673 ;; Tracked objects:
  2674 ;;		On entry : 0/0
  2675 ;;		On exit  : 0/0
  2676 ;;		Unchanged: 0/0
  2677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2678 ;;      Params:         2       0       0       0       0       0       0
  2679 ;;      Locals:         4       0       0       0       0       0       0
  2680 ;;      Temps:          4       0       0       0       0       0       0
  2681 ;;      Totals:        10       0       0       0       0       0       0
  2682 ;;Total ram usage:       10 bytes
  2683 ;; Hardware stack levels used: 1
  2684 ;; Hardware stack levels required when called: 2
  2685 ;; This function calls:
  2686 ;;		___wmul
  2687 ;;		_isdigit
  2688 ;;		_isspace
  2689 ;; This function is called by:
  2690 ;;		_vfpfcnvrt
  2691 ;; This function uses a non-reentrant model
  2692 ;;
  2693                           
  2694                           	psect	text13
  2695  000F44                     __ptext13:
  2696                           	callstack 0
  2697  000F44                     _atoi:
  2698                           	callstack 25
  2699  000F44  0E00               	movlw	0
  2700  000F46  6E13               	movwf	(atoi@n+1)^0,c
  2701  000F48  0E00               	movlw	0
  2702  000F4A  6E12               	movwf	atoi@n^0,c
  2703  000F4C  0E00               	movlw	0
  2704  000F4E  6E11               	movwf	(atoi@neg+1)^0,c
  2705  000F50  0E00               	movlw	0
  2706  000F52  6E10               	movwf	atoi@neg^0,c
  2707  000F54  EFAE  F007         	goto	l1731
  2708  000F58                     l1727:
  2709  000F58  4A0A               	infsnz	atoi@s^0,f,c
  2710  000F5A  2A0B               	incf	(atoi@s+1)^0,f,c
  2711  000F5C                     l1731:
  2712  000F5C  C00A  FFF6         	movff	atoi@s,tblptrl
  2713  000F60  C00B  FFF7         	movff	atoi@s+1,tblptrh
  2714  000F64                     	if	0	;tblptru may be non-zero
  2715  000F64                     	endif
  2716  000F64                     	if	0	;tblptru may be non-zero
  2717  000F64                     	endif
  2718  000F64  0008               	tblrd		*
  2719  000F66  50F5               	movf	tablat,w,c
  2720  000F68  0A20               	xorlw	32
  2721  000F6A  B4D8               	btfsc	status,2,c
  2722  000F6C  EFBA  F007         	goto	u1121
  2723  000F70  EFBC  F007         	goto	u1120
  2724  000F74                     u1121:
  2725  000F74  EFAC  F007         	goto	l1727
  2726  000F78                     u1120:
  2727  000F78  0EF7               	movlw	247
  2728  000F7A  6E0C               	movwf	??_atoi^0,c
  2729  000F7C  0EFF               	movlw	255
  2730  000F7E  6E0D               	movwf	(??_atoi+1)^0,c
  2731  000F80  C00A  FFF6         	movff	atoi@s,tblptrl
  2732  000F84  C00B  FFF7         	movff	atoi@s+1,tblptrh
  2733  000F88                     	if	0	;tblptru may be non-zero
  2734  000F88                     	endif
  2735  000F88                     	if	0	;tblptru may be non-zero
  2736  000F88                     	endif
  2737  000F88  0008               	tblrd		*
  2738  000F8A  50F5               	movf	tablat,w,c
  2739  000F8C  6E0E               	movwf	(??_atoi+2)^0,c
  2740  000F8E  6A0F               	clrf	(??_atoi+3)^0,c
  2741  000F90  500C               	movf	??_atoi^0,w,c
  2742  000F92  260E               	addwf	(??_atoi+2)^0,f,c
  2743  000F94  500D               	movf	(??_atoi+1)^0,w,c
  2744  000F96  220F               	addwfc	(??_atoi+3)^0,f,c
  2745  000F98  500F               	movf	(??_atoi+3)^0,w,c
  2746  000F9A  E109               	bnz	u1130
  2747  000F9C  0E05               	movlw	5
  2748  000F9E  5C0E               	subwf	(??_atoi+2)^0,w,c
  2749  000FA0  A0D8               	btfss	status,0,c
  2750  000FA2  EFD5  F007         	goto	u1131
  2751  000FA6  EFD7  F007         	goto	u1130
  2752  000FAA                     u1131:
  2753  000FAA  EFAC  F007         	goto	l1727
  2754  000FAE                     u1130:
  2755  000FAE  EFE1  F007         	goto	l1739
  2756  000FB2                     l1735:
  2757  000FB2  0E00               	movlw	0
  2758  000FB4  6E11               	movwf	(atoi@neg+1)^0,c
  2759  000FB6  0E01               	movlw	1
  2760  000FB8  6E10               	movwf	atoi@neg^0,c
  2761  000FBA                     l1737:
  2762  000FBA  4A0A               	infsnz	atoi@s^0,f,c
  2763  000FBC  2A0B               	incf	(atoi@s+1)^0,f,c
  2764  000FBE  EF16  F008         	goto	l1747
  2765  000FC2                     l1739:
  2766  000FC2  C00A  FFF6         	movff	atoi@s,tblptrl
  2767  000FC6  C00B  FFF7         	movff	atoi@s+1,tblptrh
  2768  000FCA                     	if	0	;tblptru may be non-zero
  2769  000FCA                     	endif
  2770  000FCA                     	if	0	;tblptru may be non-zero
  2771  000FCA                     	endif
  2772  000FCA  0008               	tblrd		*
  2773  000FCC  50F5               	movf	tablat,w,c
  2774  000FCE  6E0C               	movwf	??_atoi^0,c
  2775  000FD0  6A0D               	clrf	(??_atoi+1)^0,c
  2776                           
  2777                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2778                           ; Switch size 1, requested type "simple"
  2779                           ; Number of cases is 1, Range of values is 0 to 0
  2780                           ; switch strategies available:
  2781                           ; Name         Instructions Cycles
  2782                           ; simple_byte            4     3 (average)
  2783                           ;	Chosen strategy is simple_byte
  2784  000FD2  500D               	movf	(??_atoi+1)^0,w,c
  2785  000FD4  0A00               	xorlw	0	; case 0
  2786  000FD6  B4D8               	btfsc	status,2,c
  2787  000FD8  EFF0  F007         	goto	l2045
  2788  000FDC  EF16  F008         	goto	l1747
  2789  000FE0                     l2045:
  2790                           
  2791                           ; Switch size 1, requested type "simple"
  2792                           ; Number of cases is 2, Range of values is 43 to 45
  2793                           ; switch strategies available:
  2794                           ; Name         Instructions Cycles
  2795                           ; simple_byte            7     4 (average)
  2796                           ;	Chosen strategy is simple_byte
  2797  000FE0  500C               	movf	??_atoi^0,w,c
  2798  000FE2  0A2B               	xorlw	43	; case 43
  2799  000FE4  B4D8               	btfsc	status,2,c
  2800  000FE6  EFDD  F007         	goto	l1737
  2801  000FEA  0A06               	xorlw	6	; case 45
  2802  000FEC  B4D8               	btfsc	status,2,c
  2803  000FEE  EFD9  F007         	goto	l1735
  2804  000FF2  EF16  F008         	goto	l1747
  2805  000FF6                     l1741:
  2806  000FF6  C012  F003         	movff	atoi@n,___wmul@multiplier
  2807  000FFA  C013  F004         	movff	atoi@n+1,___wmul@multiplier+1
  2808  000FFE  0E00               	movlw	0
  2809  001000  6E06               	movwf	(___wmul@multiplicand+1)^0,c
  2810  001002  0E0A               	movlw	10
  2811  001004  6E05               	movwf	___wmul@multiplicand^0,c
  2812  001006  ECC7  F00B         	call	___wmul	;wreg free
  2813  00100A  C00A  FFF6         	movff	atoi@s,tblptrl
  2814  00100E  C00B  FFF7         	movff	atoi@s+1,tblptrh
  2815  001012                     	if	0	;tblptru may be non-zero
  2816  001012                     	endif
  2817  001012                     	if	0	;tblptru may be non-zero
  2818  001012                     	endif
  2819  001012  0008               	tblrd		*
  2820  001014  50F5               	movf	tablat,w,c
  2821  001016  5E03               	subwf	?___wmul^0,f,c
  2822  001018  0E00               	movlw	0
  2823  00101A  5A04               	subwfb	(?___wmul+1)^0,f,c
  2824  00101C  0E30               	movlw	48
  2825  00101E  2403               	addwf	?___wmul^0,w,c
  2826  001020  6E12               	movwf	atoi@n^0,c
  2827  001022  0E00               	movlw	0
  2828  001024  2004               	addwfc	(?___wmul+1)^0,w,c
  2829  001026  6E13               	movwf	(atoi@n+1)^0,c
  2830  001028  EFDD  F007         	goto	l1737
  2831  00102C                     l1747:
  2832  00102C  0ED0               	movlw	208
  2833  00102E  6E0C               	movwf	??_atoi^0,c
  2834  001030  0EFF               	movlw	255
  2835  001032  6E0D               	movwf	(??_atoi+1)^0,c
  2836  001034  C00A  FFF6         	movff	atoi@s,tblptrl
  2837  001038  C00B  FFF7         	movff	atoi@s+1,tblptrh
  2838  00103C                     	if	0	;tblptru may be non-zero
  2839  00103C                     	endif
  2840  00103C                     	if	0	;tblptru may be non-zero
  2841  00103C                     	endif
  2842  00103C  0008               	tblrd		*
  2843  00103E  50F5               	movf	tablat,w,c
  2844  001040  6E0E               	movwf	(??_atoi+2)^0,c
  2845  001042  6A0F               	clrf	(??_atoi+3)^0,c
  2846  001044  500C               	movf	??_atoi^0,w,c
  2847  001046  260E               	addwf	(??_atoi+2)^0,f,c
  2848  001048  500D               	movf	(??_atoi+1)^0,w,c
  2849  00104A  220F               	addwfc	(??_atoi+3)^0,f,c
  2850  00104C  500F               	movf	(??_atoi+3)^0,w,c
  2851  00104E  E109               	bnz	u1140
  2852  001050  0E0A               	movlw	10
  2853  001052  5C0E               	subwf	(??_atoi+2)^0,w,c
  2854  001054  A0D8               	btfss	status,0,c
  2855  001056  EF2F  F008         	goto	u1141
  2856  00105A  EF31  F008         	goto	u1140
  2857  00105E                     u1141:
  2858  00105E  EFFB  F007         	goto	l1741
  2859  001062                     u1140:
  2860  001062  5010               	movf	atoi@neg^0,w,c
  2861  001064  1011               	iorwf	(atoi@neg+1)^0,w,c
  2862  001066  A4D8               	btfss	status,2,c
  2863  001068  EF38  F008         	goto	u1151
  2864  00106C  EF3A  F008         	goto	u1150
  2865  001070                     u1151:
  2866  001070  EF48  F008         	goto	l913
  2867  001074                     u1150:
  2868  001074  C012  F00C         	movff	atoi@n,??_atoi
  2869  001078  C013  F00D         	movff	atoi@n+1,??_atoi+1
  2870  00107C  1E0C               	comf	??_atoi^0,f,c
  2871  00107E  1E0D               	comf	(??_atoi+1)^0,f,c
  2872  001080  4A0C               	infsnz	??_atoi^0,f,c
  2873  001082  2A0D               	incf	(??_atoi+1)^0,f,c
  2874  001084  C00C  F00A         	movff	??_atoi,?_atoi
  2875  001088  C00D  F00B         	movff	??_atoi+1,?_atoi+1
  2876  00108C  EF4C  F008         	goto	l916
  2877  001090                     l913:
  2878  001090  C012  F00A         	movff	atoi@n,?_atoi
  2879  001094  C013  F00B         	movff	atoi@n+1,?_atoi+1
  2880  001098                     l916:
  2881  001098  0012               	return		;funcret
  2882  00109A                     __end_of_atoi:
  2883                           	callstack 0
  2884                           
  2885 ;; *************** function _isspace *****************
  2886 ;; Defined at:
  2887 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\isspace.c"
  2888 ;; Parameters:    Size  Location     Type
  2889 ;;  c               2    2[COMRAM] int 
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;		None
  2892 ;; Return value:  Size  Location     Type
  2893 ;;                  2    2[COMRAM] int 
  2894 ;; Registers used:
  2895 ;;		wreg, status,2, status,0
  2896 ;; Tracked objects:
  2897 ;;		On entry : 0/0
  2898 ;;		On exit  : 0/0
  2899 ;;		Unchanged: 0/0
  2900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2901 ;;      Params:         2       0       0       0       0       0       0
  2902 ;;      Locals:         1       0       0       0       0       0       0
  2903 ;;      Temps:          4       0       0       0       0       0       0
  2904 ;;      Totals:         7       0       0       0       0       0       0
  2905 ;;Total ram usage:        7 bytes
  2906 ;; Hardware stack levels used: 1
  2907 ;; Hardware stack levels required when called: 1
  2908 ;; This function calls:
  2909 ;;		Nothing
  2910 ;; This function is called by:
  2911 ;;		_atoi
  2912 ;; This function uses a non-reentrant model
  2913 ;;
  2914                           
  2915                           	psect	text14
  2916  0015D6                     __ptext14:
  2917                           	callstack 0
  2918  0015D6                     _isspace:
  2919                           	callstack 25
  2920  0015D6  0E01               	movlw	1
  2921  0015D8  6E09               	movwf	_isspace$946^0,c
  2922  0015DA  0E20               	movlw	32
  2923  0015DC  1803               	xorwf	isspace@c^0,w,c
  2924  0015DE  1004               	iorwf	(isspace@c+1)^0,w,c
  2925  0015E0  B4D8               	btfsc	status,2,c
  2926  0015E2  EFF5  F00A         	goto	u941
  2927  0015E6  EFF7  F00A         	goto	u940
  2928  0015EA                     u941:
  2929  0015EA  EF10  F00B         	goto	l1647
  2930  0015EE                     u940:
  2931  0015EE  0EF7               	movlw	247
  2932  0015F0  6E05               	movwf	??_isspace^0,c
  2933  0015F2  0EFF               	movlw	255
  2934  0015F4  6E06               	movwf	(??_isspace+1)^0,c
  2935  0015F6  C003  F007         	movff	isspace@c,??_isspace+2
  2936  0015FA  C004  F008         	movff	isspace@c+1,??_isspace+3
  2937  0015FE  5005               	movf	??_isspace^0,w,c
  2938  001600  2607               	addwf	(??_isspace+2)^0,f,c
  2939  001602  5006               	movf	(??_isspace+1)^0,w,c
  2940  001604  2208               	addwfc	(??_isspace+3)^0,f,c
  2941  001606  5008               	movf	(??_isspace+3)^0,w,c
  2942  001608  E109               	bnz	u950
  2943  00160A  0E05               	movlw	5
  2944  00160C  5C07               	subwf	(??_isspace+2)^0,w,c
  2945  00160E  A0D8               	btfss	status,0,c
  2946  001610  EF0C  F00B         	goto	u951
  2947  001614  EF0E  F00B         	goto	u950
  2948  001618                     u951:
  2949  001618  EF10  F00B         	goto	l1647
  2950  00161C                     u950:
  2951  00161C  0E00               	movlw	0
  2952  00161E  6E09               	movwf	_isspace$946^0,c
  2953  001620                     l1647:
  2954  001620  C009  F003         	movff	_isspace$946,?_isspace
  2955  001624  6A04               	clrf	(?_isspace+1)^0,c
  2956  001626  0012               	return		;funcret
  2957  001628                     __end_of_isspace:
  2958                           	callstack 0
  2959                           
  2960 ;; *************** function _isdigit *****************
  2961 ;; Defined at:
  2962 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\isdigit.c"
  2963 ;; Parameters:    Size  Location     Type
  2964 ;;  c               2    2[COMRAM] int 
  2965 ;; Auto vars:     Size  Location     Type
  2966 ;;		None
  2967 ;; Return value:  Size  Location     Type
  2968 ;;                  2    2[COMRAM] int 
  2969 ;; Registers used:
  2970 ;;		wreg, status,2, status,0
  2971 ;; Tracked objects:
  2972 ;;		On entry : 0/0
  2973 ;;		On exit  : 0/0
  2974 ;;		Unchanged: 0/0
  2975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2976 ;;      Params:         2       0       0       0       0       0       0
  2977 ;;      Locals:         0       0       0       0       0       0       0
  2978 ;;      Temps:          4       0       0       0       0       0       0
  2979 ;;      Totals:         6       0       0       0       0       0       0
  2980 ;;Total ram usage:        6 bytes
  2981 ;; Hardware stack levels used: 1
  2982 ;; Hardware stack levels required when called: 1
  2983 ;; This function calls:
  2984 ;;		Nothing
  2985 ;; This function is called by:
  2986 ;;		_vfpfcnvrt
  2987 ;;		_atoi
  2988 ;; This function uses a non-reentrant model
  2989 ;;
  2990                           
  2991                           	psect	text15
  2992  0016FA                     __ptext15:
  2993                           	callstack 0
  2994  0016FA                     _isdigit:
  2995                           	callstack 26
  2996  0016FA  0ED0               	movlw	208
  2997  0016FC  6E05               	movwf	??_isdigit^0,c
  2998  0016FE  0EFF               	movlw	255
  2999  001700  6E06               	movwf	(??_isdigit+1)^0,c
  3000  001702  C003  F007         	movff	isdigit@c,??_isdigit+2
  3001  001706  C004  F008         	movff	isdigit@c+1,??_isdigit+3
  3002  00170A  5005               	movf	??_isdigit^0,w,c
  3003  00170C  2607               	addwf	(??_isdigit+2)^0,f,c
  3004  00170E  5006               	movf	(??_isdigit+1)^0,w,c
  3005  001710  2208               	addwfc	(??_isdigit+3)^0,f,c
  3006  001712  5008               	movf	(??_isdigit+3)^0,w,c
  3007  001714  E10A               	bnz	u920
  3008  001716  0E0A               	movlw	10
  3009  001718  5C07               	subwf	(??_isdigit+2)^0,w,c
  3010  00171A  A0D8               	btfss	status,0,c
  3011  00171C  EF92  F00B         	goto	u921
  3012  001720  EF95  F00B         	goto	u920
  3013  001724                     u921:
  3014  001724  0E01               	movlw	1
  3015  001726  EF96  F00B         	goto	u930
  3016  00172A                     u920:
  3017  00172A  0E00               	movlw	0
  3018  00172C                     u930:
  3019  00172C  6E03               	movwf	?_isdigit^0,c
  3020  00172E  6A04               	clrf	(?_isdigit+1)^0,c
  3021  001730  0012               	return		;funcret
  3022  001732                     __end_of_isdigit:
  3023                           	callstack 0
  3024                           
  3025 ;; *************** function ___wmul *****************
  3026 ;; Defined at:
  3027 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul16.c"
  3028 ;; Parameters:    Size  Location     Type
  3029 ;;  multiplier      2    2[COMRAM] unsigned int 
  3030 ;;  multiplicand    2    4[COMRAM] unsigned int 
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;  product         2    6[COMRAM] unsigned int 
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  2    2[COMRAM] unsigned int 
  3035 ;; Registers used:
  3036 ;;		wreg, status,2, status,0, prodl, prodh
  3037 ;; Tracked objects:
  3038 ;;		On entry : 0/0
  3039 ;;		On exit  : 0/0
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3042 ;;      Params:         4       0       0       0       0       0       0
  3043 ;;      Locals:         2       0       0       0       0       0       0
  3044 ;;      Temps:          0       0       0       0       0       0       0
  3045 ;;      Totals:         6       0       0       0       0       0       0
  3046 ;;Total ram usage:        6 bytes
  3047 ;; Hardware stack levels used: 1
  3048 ;; Hardware stack levels required when called: 1
  3049 ;; This function calls:
  3050 ;;		Nothing
  3051 ;; This function is called by:
  3052 ;;		_atoi
  3053 ;; This function uses a non-reentrant model
  3054 ;;
  3055                           
  3056                           	psect	text16
  3057  00178E                     __ptext16:
  3058                           	callstack 0
  3059  00178E                     ___wmul:
  3060                           	callstack 25
  3061  00178E  5003               	movf	___wmul@multiplier^0,w,c
  3062  001790  0205               	mulwf	___wmul@multiplicand^0,c
  3063  001792  CFF3 F007          	movff	prodl,___wmul@product
  3064  001796  CFF4 F008          	movff	prodh,___wmul@product+1
  3065  00179A  5003               	movf	___wmul@multiplier^0,w,c
  3066  00179C  0206               	mulwf	(___wmul@multiplicand+1)^0,c
  3067  00179E  50F3               	movf	243,w,c
  3068  0017A0  2608               	addwf	(___wmul@product+1)^0,f,c
  3069  0017A2  5004               	movf	(___wmul@multiplier+1)^0,w,c
  3070  0017A4  0205               	mulwf	___wmul@multiplicand^0,c
  3071  0017A6  50F3               	movf	243,w,c
  3072  0017A8  2608               	addwf	(___wmul@product+1)^0,f,c
  3073  0017AA  C007  F003         	movff	___wmul@product,?___wmul
  3074  0017AE  C008  F004         	movff	___wmul@product+1,?___wmul+1
  3075  0017B2  0012               	return		;funcret
  3076  0017B4                     __end_of___wmul:
  3077                           	callstack 0
  3078                           
  3079 ;; *************** function _lcd_write *****************
  3080 ;; Defined at:
  3081 ;;		line 77 in file "LCD4b_EXSTO.c"
  3082 ;; Parameters:    Size  Location     Type
  3083 ;;  lin             1    wreg     unsigned char 
  3084 ;;  col             1    8[COMRAM] unsigned char 
  3085 ;;  str             2    9[COMRAM] PTR unsigned char 
  3086 ;;		 -> STR_5(16), STR_4(16), BufferLCD(16), STR_2(9), 
  3087 ;;		 -> STR_1(12), 
  3088 ;; Auto vars:     Size  Location     Type
  3089 ;;  lin             1   12[COMRAM] unsigned char 
  3090 ;;  end             1   11[COMRAM] unsigned char 
  3091 ;; Return value:  Size  Location     Type
  3092 ;;                  1    wreg      void 
  3093 ;; Registers used:
  3094 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3095 ;; Tracked objects:
  3096 ;;		On entry : 0/0
  3097 ;;		On exit  : 0/0
  3098 ;;		Unchanged: 0/0
  3099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3100 ;;      Params:         3       0       0       0       0       0       0
  3101 ;;      Locals:         2       0       0       0       0       0       0
  3102 ;;      Temps:          0       0       0       0       0       0       0
  3103 ;;      Totals:         5       0       0       0       0       0       0
  3104 ;;Total ram usage:        5 bytes
  3105 ;; Hardware stack levels used: 1
  3106 ;; Hardware stack levels required when called: 4
  3107 ;; This function calls:
  3108 ;;		_lcd_send_byte
  3109 ;; This function is called by:
  3110 ;;		_main
  3111 ;;		_lcd_clear
  3112 ;; This function uses a non-reentrant model
  3113 ;;
  3114                           
  3115                           	psect	text17
  3116  0013B8                     __ptext17:
  3117                           	callstack 0
  3118  0013B8                     _lcd_write:
  3119                           	callstack 26
  3120                           
  3121                           ;incstack = 0
  3122                           ;lcd_write@lin stored from wreg
  3123  0013B8  6E0D               	movwf	lcd_write@lin^0,c
  3124  0013BA                     
  3125                           ;LCD4b_EXSTO.c: 77: void lcd_write(char lin, char col, char *str);LCD4b_EXSTO.c: 78: {;L
      +                          CD4b_EXSTO.c: 79:     char end;;LCD4b_EXSTO.c: 81:     if(lin == 1)
  3126  0013BA  040D               	decf	lcd_write@lin^0,w,c
  3127  0013BC  A4D8               	btfss	status,2,c
  3128  0013BE  EFE3  F009         	goto	u1281
  3129  0013C2  EFE5  F009         	goto	u1280
  3130  0013C6                     u1281:
  3131  0013C6  EFEA  F009         	goto	l1943
  3132  0013CA                     u1280:
  3133  0013CA                     
  3134                           ;LCD4b_EXSTO.c: 82:     {;LCD4b_EXSTO.c: 83:         end = col + 0X80 - 1;
  3135  0013CA  5009               	movf	lcd_write@col^0,w,c
  3136  0013CC  0F7F               	addlw	127
  3137  0013CE  6E0C               	movwf	lcd_write@end^0,c
  3138                           
  3139                           ;LCD4b_EXSTO.c: 84:     }
  3140  0013D0  EFF6  F009         	goto	l1947
  3141  0013D4                     l1943:
  3142  0013D4  0E02               	movlw	2
  3143  0013D6  180D               	xorwf	lcd_write@lin^0,w,c
  3144  0013D8  A4D8               	btfss	status,2,c
  3145  0013DA  EFF1  F009         	goto	u1291
  3146  0013DE  EFF3  F009         	goto	u1290
  3147  0013E2                     u1291:
  3148  0013E2  EFF6  F009         	goto	l1947
  3149  0013E6                     u1290:
  3150  0013E6                     
  3151                           ;LCD4b_EXSTO.c: 86:     {;LCD4b_EXSTO.c: 87:         end = col + 0xC0 - 1;
  3152  0013E6  5009               	movf	lcd_write@col^0,w,c
  3153  0013E8  0FBF               	addlw	191
  3154  0013EA  6E0C               	movwf	lcd_write@end^0,c
  3155  0013EC                     l1947:
  3156                           
  3157                           ;LCD4b_EXSTO.c: 89:     lcd_send_byte(0,end);
  3158  0013EC  C00C  F007         	movff	lcd_write@end,lcd_send_byte@data
  3159  0013F0  0E00               	movlw	0
  3160  0013F2  ECEA  F00B         	call	_lcd_send_byte
  3161                           
  3162                           ;LCD4b_EXSTO.c: 91:     while(*str)
  3163  0013F6  EF13  F00A         	goto	l1953
  3164  0013FA                     l1949:
  3165                           
  3166                           ;LCD4b_EXSTO.c: 92:     {;LCD4b_EXSTO.c: 93:         lcd_send_byte(1,*str);
  3167  0013FA  C00A  FFF6         	movff	lcd_write@str,tblptrl
  3168  0013FE  C00B  FFF7         	movff	lcd_write@str+1,tblptrh
  3169  001402  6AF8               	clrf	tblptru,c
  3170  001404  0E05               	movlw	(high __ramtop+-1)
  3171  001406  64F7               	cpfsgt	tblptrh,c
  3172  001408  D003               	bra	u1307
  3173  00140A  0008               	tblrd		*
  3174  00140C  50F5               	movf	tablat,w,c
  3175  00140E  D005               	bra	u1300
  3176  001410                     u1307:
  3177  001410  CFF6 FFE1          	movff	tblptrl,fsr1l
  3178  001414  CFF7 FFE2          	movff	tblptrh,fsr1h
  3179  001418  50E7               	movf	indf1,w,c
  3180  00141A                     u1300:
  3181  00141A  6E07               	movwf	lcd_send_byte@data^0,c
  3182  00141C  0E01               	movlw	1
  3183  00141E  ECEA  F00B         	call	_lcd_send_byte
  3184  001422                     
  3185                           ;LCD4b_EXSTO.c: 94:         str++;
  3186  001422  4A0A               	infsnz	lcd_write@str^0,f,c
  3187  001424  2A0B               	incf	(lcd_write@str+1)^0,f,c
  3188  001426                     l1953:
  3189                           
  3190                           ;LCD4b_EXSTO.c: 91:     while(*str)
  3191  001426  C00A  FFF6         	movff	lcd_write@str,tblptrl
  3192  00142A  C00B  FFF7         	movff	lcd_write@str+1,tblptrh
  3193  00142E  6AF8               	clrf	tblptru,c
  3194  001430  0E05               	movlw	(high __ramtop+-1)
  3195  001432  64F7               	cpfsgt	tblptrh,c
  3196  001434  D003               	bra	u1317
  3197  001436  0008               	tblrd		*
  3198  001438  50F5               	movf	tablat,w,c
  3199  00143A  D005               	bra	u1310
  3200  00143C                     u1317:
  3201  00143C  CFF6 FFE1          	movff	tblptrl,fsr1l
  3202  001440  CFF7 FFE2          	movff	tblptrh,fsr1h
  3203  001444  50E7               	movf	indf1,w,c
  3204  001446                     u1310:
  3205  001446  0900               	iorlw	0
  3206  001448  A4D8               	btfss	status,2,c
  3207  00144A  EF29  F00A         	goto	u1321
  3208  00144E  EF2B  F00A         	goto	u1320
  3209  001452                     u1321:
  3210  001452  EFFD  F009         	goto	l1949
  3211  001456                     u1320:
  3212  001456  0012               	return		;funcret
  3213  001458                     __end_of_lcd_write:
  3214                           	callstack 0
  3215                           
  3216 ;; *************** function _lcd_send_byte *****************
  3217 ;; Defined at:
  3218 ;;		line 63 in file "LCD4b_EXSTO.c"
  3219 ;; Parameters:    Size  Location     Type
  3220 ;;  level           1    wreg     unsigned char 
  3221 ;;  data            1    6[COMRAM] unsigned char 
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;  level           1    7[COMRAM] unsigned char 
  3224 ;; Return value:  Size  Location     Type
  3225 ;;                  1    wreg      void 
  3226 ;; Registers used:
  3227 ;;		wreg, status,2, status,0, cstack
  3228 ;; Tracked objects:
  3229 ;;		On entry : 0/0
  3230 ;;		On exit  : 0/0
  3231 ;;		Unchanged: 0/0
  3232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3233 ;;      Params:         1       0       0       0       0       0       0
  3234 ;;      Locals:         1       0       0       0       0       0       0
  3235 ;;      Temps:          0       0       0       0       0       0       0
  3236 ;;      Totals:         2       0       0       0       0       0       0
  3237 ;;Total ram usage:        2 bytes
  3238 ;; Hardware stack levels used: 1
  3239 ;; Hardware stack levels required when called: 3
  3240 ;; This function calls:
  3241 ;;		_lcd_cmd
  3242 ;; This function is called by:
  3243 ;;		_lcd_write
  3244 ;; This function uses a non-reentrant model
  3245 ;;
  3246                           
  3247                           	psect	text18
  3248  0017D4                     __ptext18:
  3249                           	callstack 0
  3250  0017D4                     _lcd_send_byte:
  3251                           	callstack 26
  3252                           
  3253                           ;incstack = 0
  3254                           ;lcd_send_byte@level stored from wreg
  3255  0017D4  6E08               	movwf	lcd_send_byte@level^0,c
  3256  0017D6                     
  3257                           ;LCD4b_EXSTO.c: 63: void lcd_send_byte(char level, char data);LCD4b_EXSTO.c: 64: {;LCD4b
      +                          _EXSTO.c: 65:     PORTEbits.RE0 = level;
  3258  0017D6  B008               	btfsc	lcd_send_byte@level^0,0,c
  3259  0017D8  D002               	bra	u1255
  3260  0017DA  9084               	bcf	132,0,c	;volatile
  3261  0017DC  D001               	bra	u1256
  3262  0017DE                     u1255:
  3263  0017DE  8084               	bsf	132,0,c	;volatile
  3264  0017E0                     u1256:
  3265  0017E0                     
  3266                           ;LCD4b_EXSTO.c: 66:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3267  0017E0  0E42               	movlw	66
  3268  0017E2                     u1347:
  3269  0017E2  2EE8               	decfsz	wreg,f,c
  3270  0017E4  D7FE               	bra	u1347
  3271  0017E6  D000               	nop2	
  3272  0017E8                     
  3273                           ;LCD4b_EXSTO.c: 67:     PORTEbits.RE2 = 0;
  3274  0017E8  9484               	bcf	132,2,c	;volatile
  3275  0017EA                     
  3276                           ;LCD4b_EXSTO.c: 68:     lcd_cmd(data);
  3277  0017EA  5007               	movf	lcd_send_byte@data^0,w,c
  3278  0017EC  EC4D  F008         	call	_lcd_cmd
  3279  0017F0  0012               	return		;funcret
  3280  0017F2                     __end_of_lcd_send_byte:
  3281                           	callstack 0
  3282                           
  3283 ;; *************** function _lcd_init *****************
  3284 ;; Defined at:
  3285 ;;		line 3 in file "LCD4b_EXSTO.c"
  3286 ;; Parameters:    Size  Location     Type
  3287 ;;		None
  3288 ;; Auto vars:     Size  Location     Type
  3289 ;;  i               1    7[COMRAM] unsigned char 
  3290 ;; Return value:  Size  Location     Type
  3291 ;;                  1    wreg      void 
  3292 ;; Registers used:
  3293 ;;		wreg, status,2, status,0, cstack
  3294 ;; Tracked objects:
  3295 ;;		On entry : 0/0
  3296 ;;		On exit  : 0/0
  3297 ;;		Unchanged: 0/0
  3298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3299 ;;      Params:         0       0       0       0       0       0       0
  3300 ;;      Locals:         1       0       0       0       0       0       0
  3301 ;;      Temps:          1       0       0       0       0       0       0
  3302 ;;      Totals:         2       0       0       0       0       0       0
  3303 ;;Total ram usage:        2 bytes
  3304 ;; Hardware stack levels used: 1
  3305 ;; Hardware stack levels required when called: 3
  3306 ;; This function calls:
  3307 ;;		_lcd_cmd
  3308 ;; This function is called by:
  3309 ;;		_main
  3310 ;; This function uses a non-reentrant model
  3311 ;;
  3312                           
  3313                           	psect	text19
  3314  001458                     __ptext19:
  3315                           	callstack 0
  3316  001458                     _lcd_init:
  3317                           	callstack 27
  3318  001458                     
  3319                           ;LCD4b_EXSTO.c: 5:     char i;;LCD4b_EXSTO.c: 7:     TRISD = 0b00000000;
  3320  001458  0E00               	movlw	0
  3321  00145A  6E95               	movwf	149,c	;volatile
  3322  00145C                     
  3323                           ;LCD4b_EXSTO.c: 8:     TRISEbits.TRISE2 = 0;
  3324  00145C  9496               	bcf	150,2,c	;volatile
  3325  00145E                     
  3326                           ;LCD4b_EXSTO.c: 9:     TRISEbits.TRISE1 = 0;
  3327  00145E  9296               	bcf	150,1,c	;volatile
  3328  001460                     
  3329                           ;LCD4b_EXSTO.c: 10:     TRISEbits.TRISE0 = 0;
  3330  001460  9096               	bcf	150,0,c	;volatile
  3331                           
  3332                           ;LCD4b_EXSTO.c: 11:     PORTD = 0b00000000;
  3333  001462  0E00               	movlw	0
  3334  001464  6E83               	movwf	131,c	;volatile
  3335  001466                     
  3336                           ;LCD4b_EXSTO.c: 12:     PORTEbits.RE0 = 0;
  3337  001466  9084               	bcf	132,0,c	;volatile
  3338  001468                     
  3339                           ;LCD4b_EXSTO.c: 13:     PORTEbits.RE1 = 0;
  3340  001468  9284               	bcf	132,1,c	;volatile
  3341  00146A                     
  3342                           ;LCD4b_EXSTO.c: 14:     PORTEbits.RE2 = 0;
  3343  00146A  9484               	bcf	132,2,c	;volatile
  3344  00146C                     
  3345                           ;LCD4b_EXSTO.c: 16:     _delay((unsigned long)((15)*(8000000/4000.0)));
  3346  00146C  0E27               	movlw	39
  3347  00146E  6E07               	movwf	??_lcd_init^0,c
  3348  001470  0EF5               	movlw	245
  3349  001472                     u1357:
  3350  001472  2EE8               	decfsz	wreg,f,c
  3351  001474  D7FE               	bra	u1357
  3352  001476  2E07               	decfsz	??_lcd_init^0,f,c
  3353  001478  D7FC               	bra	u1357
  3354  00147A  F000               	nop	
  3355  00147C                     
  3356                           ;LCD4b_EXSTO.c: 18:     for(i=0;i<=2;i++)
  3357  00147C  0E00               	movlw	0
  3358  00147E  6E08               	movwf	lcd_init@i^0,c
  3359  001480                     l1917:
  3360                           
  3361                           ;LCD4b_EXSTO.c: 19:     {;LCD4b_EXSTO.c: 20:         lcd_cmd(0x30);
  3362  001480  0E30               	movlw	48
  3363  001482  EC4D  F008         	call	_lcd_cmd
  3364  001486                     
  3365                           ;LCD4b_EXSTO.c: 21:         _delay((unsigned long)((5)*(8000000/4000.0)));
  3366  001486  0E0D               	movlw	13
  3367  001488  6E07               	movwf	??_lcd_init^0,c
  3368  00148A  0EFC               	movlw	252
  3369  00148C                     u1367:
  3370  00148C  2EE8               	decfsz	wreg,f,c
  3371  00148E  D7FE               	bra	u1367
  3372  001490  2E07               	decfsz	??_lcd_init^0,f,c
  3373  001492  D7FC               	bra	u1367
  3374  001494                     
  3375                           ;LCD4b_EXSTO.c: 22:     }
  3376  001494  2A08               	incf	lcd_init@i^0,f,c
  3377  001496  0E02               	movlw	2
  3378  001498  6408               	cpfsgt	lcd_init@i^0,c
  3379  00149A  EF51  F00A         	goto	u1271
  3380  00149E  EF53  F00A         	goto	u1270
  3381  0014A2                     u1271:
  3382  0014A2  EF40  F00A         	goto	l1917
  3383  0014A6                     u1270:
  3384  0014A6                     
  3385                           ;LCD4b_EXSTO.c: 24:     lcd_cmd(0x02);
  3386  0014A6  0E02               	movlw	2
  3387  0014A8  EC4D  F008         	call	_lcd_cmd
  3388  0014AC                     
  3389                           ;LCD4b_EXSTO.c: 25:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3390  0014AC  0E1A               	movlw	26
  3391  0014AE                     u1377:
  3392  0014AE  2EE8               	decfsz	wreg,f,c
  3393  0014B0  D7FE               	bra	u1377
  3394  0014B2  D000               	nop2	
  3395  0014B4                     
  3396                           ;LCD4b_EXSTO.c: 26:     lcd_cmd(0x28);
  3397  0014B4  0E28               	movlw	40
  3398  0014B6  EC4D  F008         	call	_lcd_cmd
  3399                           
  3400                           ;LCD4b_EXSTO.c: 27:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3401  0014BA  0E1A               	movlw	26
  3402  0014BC                     u1387:
  3403  0014BC  2EE8               	decfsz	wreg,f,c
  3404  0014BE  D7FE               	bra	u1387
  3405  0014C0  D000               	nop2	
  3406  0014C2                     
  3407                           ;LCD4b_EXSTO.c: 28:     lcd_cmd(0x01);
  3408  0014C2  0E01               	movlw	1
  3409  0014C4  EC4D  F008         	call	_lcd_cmd
  3410  0014C8                     
  3411                           ;LCD4b_EXSTO.c: 29:     _delay((unsigned long)((2)*(8000000/4000.0)));
  3412  0014C8  0E06               	movlw	6
  3413  0014CA  6E07               	movwf	??_lcd_init^0,c
  3414  0014CC  0E30               	movlw	48
  3415  0014CE                     u1397:
  3416  0014CE  2EE8               	decfsz	wreg,f,c
  3417  0014D0  D7FE               	bra	u1397
  3418  0014D2  2E07               	decfsz	??_lcd_init^0,f,c
  3419  0014D4  D7FC               	bra	u1397
  3420  0014D6  D000               	nop2	
  3421                           
  3422                           ;LCD4b_EXSTO.c: 30:     lcd_cmd(0x0C);
  3423  0014D8  0E0C               	movlw	12
  3424  0014DA  EC4D  F008         	call	_lcd_cmd
  3425  0014DE                     
  3426                           ;LCD4b_EXSTO.c: 31:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3427  0014DE  0E1A               	movlw	26
  3428  0014E0                     u1407:
  3429  0014E0  2EE8               	decfsz	wreg,f,c
  3430  0014E2  D7FE               	bra	u1407
  3431  0014E4  D000               	nop2	
  3432  0014E6                     
  3433                           ;LCD4b_EXSTO.c: 32:     lcd_cmd(0x06);
  3434  0014E6  0E06               	movlw	6
  3435  0014E8  EC4D  F008         	call	_lcd_cmd
  3436                           
  3437                           ;LCD4b_EXSTO.c: 33:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  3438  0014EC  0E1A               	movlw	26
  3439  0014EE                     u1417:
  3440  0014EE  2EE8               	decfsz	wreg,f,c
  3441  0014F0  D7FE               	bra	u1417
  3442  0014F2  D000               	nop2	
  3443  0014F4  0012               	return		;funcret
  3444  0014F6                     __end_of_lcd_init:
  3445                           	callstack 0
  3446                           
  3447 ;; *************** function _lcd_cmd *****************
  3448 ;; Defined at:
  3449 ;;		line 42 in file "LCD4b_EXSTO.c"
  3450 ;; Parameters:    Size  Location     Type
  3451 ;;  cmd             1    wreg     unsigned char 
  3452 ;; Auto vars:     Size  Location     Type
  3453 ;;  cmd             1    5[COMRAM] unsigned char 
  3454 ;; Return value:  Size  Location     Type
  3455 ;;                  1    wreg      void 
  3456 ;; Registers used:
  3457 ;;		wreg, status,2, status,0, cstack
  3458 ;; Tracked objects:
  3459 ;;		On entry : 0/0
  3460 ;;		On exit  : 0/0
  3461 ;;		Unchanged: 0/0
  3462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3463 ;;      Params:         0       0       0       0       0       0       0
  3464 ;;      Locals:         1       0       0       0       0       0       0
  3465 ;;      Temps:          1       0       0       0       0       0       0
  3466 ;;      Totals:         2       0       0       0       0       0       0
  3467 ;;Total ram usage:        2 bytes
  3468 ;; Hardware stack levels used: 1
  3469 ;; Hardware stack levels required when called: 2
  3470 ;; This function calls:
  3471 ;;		_set_bit
  3472 ;; This function is called by:
  3473 ;;		_lcd_init
  3474 ;;		_lcd_send_byte
  3475 ;; This function uses a non-reentrant model
  3476 ;;
  3477                           
  3478                           	psect	text20
  3479  00109A                     __ptext20:
  3480                           	callstack 0
  3481  00109A                     _lcd_cmd:
  3482                           	callstack 26
  3483                           
  3484                           ;incstack = 0
  3485                           ;lcd_cmd@cmd stored from wreg
  3486  00109A  6E06               	movwf	lcd_cmd@cmd^0,c
  3487  00109C                     
  3488                           ;LCD4b_EXSTO.c: 42: void lcd_cmd(char cmd);LCD4b_EXSTO.c: 43: {;LCD4b_EXSTO.c: 44:     P
      +                          ORTDbits.RD4 = set_bit(cmd, 0b00010000);
  3489  00109C  0E10               	movlw	16
  3490  00109E  6E03               	movwf	set_bit@comp^0,c
  3491  0010A0  5006               	movf	lcd_cmd@cmd^0,w,c
  3492  0010A2  ECDA  F00B         	call	_set_bit
  3493  0010A6  6E05               	movwf	??_lcd_cmd^0,c
  3494  0010A8  3A05               	swapf	??_lcd_cmd^0,f,c
  3495  0010AA  5083               	movf	131,w,c	;volatile
  3496  0010AC  1805               	xorwf	??_lcd_cmd^0,w,c
  3497  0010AE  0BEF               	andlw	-17
  3498  0010B0  1805               	xorwf	??_lcd_cmd^0,w,c
  3499  0010B2  6E83               	movwf	131,c	;volatile
  3500                           
  3501                           ;LCD4b_EXSTO.c: 45:     PORTDbits.RD5 = set_bit(cmd, 0b00100000);
  3502  0010B4  0E20               	movlw	32
  3503  0010B6  6E03               	movwf	set_bit@comp^0,c
  3504  0010B8  5006               	movf	lcd_cmd@cmd^0,w,c
  3505  0010BA  ECDA  F00B         	call	_set_bit
  3506  0010BE  6E05               	movwf	??_lcd_cmd^0,c
  3507  0010C0  3A05               	swapf	??_lcd_cmd^0,f,c
  3508  0010C2  4605               	rlncf	??_lcd_cmd^0,f,c
  3509  0010C4  5083               	movf	131,w,c	;volatile
  3510  0010C6  1805               	xorwf	??_lcd_cmd^0,w,c
  3511  0010C8  0BDF               	andlw	-33
  3512  0010CA  1805               	xorwf	??_lcd_cmd^0,w,c
  3513  0010CC  6E83               	movwf	131,c	;volatile
  3514                           
  3515                           ;LCD4b_EXSTO.c: 46:     PORTDbits.RD6 = set_bit(cmd, 0b01000000);
  3516  0010CE  0E40               	movlw	64
  3517  0010D0  6E03               	movwf	set_bit@comp^0,c
  3518  0010D2  5006               	movf	lcd_cmd@cmd^0,w,c
  3519  0010D4  ECDA  F00B         	call	_set_bit
  3520  0010D8  6E05               	movwf	??_lcd_cmd^0,c
  3521  0010DA  3A05               	swapf	??_lcd_cmd^0,f,c
  3522  0010DC  4605               	rlncf	??_lcd_cmd^0,f,c
  3523  0010DE  4605               	rlncf	??_lcd_cmd^0,f,c
  3524  0010E0  5083               	movf	131,w,c	;volatile
  3525  0010E2  1805               	xorwf	??_lcd_cmd^0,w,c
  3526  0010E4  0BBF               	andlw	-65
  3527  0010E6  1805               	xorwf	??_lcd_cmd^0,w,c
  3528  0010E8  6E83               	movwf	131,c	;volatile
  3529                           
  3530                           ;LCD4b_EXSTO.c: 47:     PORTDbits.RD7 = set_bit(cmd, 0b10000000);
  3531  0010EA  0E80               	movlw	128
  3532  0010EC  6E03               	movwf	set_bit@comp^0,c
  3533  0010EE  5006               	movf	lcd_cmd@cmd^0,w,c
  3534  0010F0  ECDA  F00B         	call	_set_bit
  3535  0010F4  6E05               	movwf	??_lcd_cmd^0,c
  3536  0010F6  3205               	rrcf	??_lcd_cmd^0,f,c
  3537  0010F8  3205               	rrcf	??_lcd_cmd^0,f,c
  3538  0010FA  5083               	movf	131,w,c	;volatile
  3539  0010FC  1805               	xorwf	??_lcd_cmd^0,w,c
  3540  0010FE  0B7F               	andlw	-129
  3541  001100  1805               	xorwf	??_lcd_cmd^0,w,c
  3542  001102  6E83               	movwf	131,c	;volatile
  3543  001104                     
  3544                           ;LCD4b_EXSTO.c: 49:     PORTEbits.RE2 = 1;
  3545  001104  8484               	bsf	132,2,c	;volatile
  3546  001106                     
  3547                           ;LCD4b_EXSTO.c: 50:     PORTEbits.RE2 = 0;
  3548  001106  9484               	bcf	132,2,c	;volatile
  3549  001108                     
  3550                           ;LCD4b_EXSTO.c: 52:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  3551  001108  0E42               	movlw	66
  3552  00110A                     u1427:
  3553  00110A  2EE8               	decfsz	wreg,f,c
  3554  00110C  D7FE               	bra	u1427
  3555  00110E  D000               	nop2	
  3556  001110                     
  3557                           ;LCD4b_EXSTO.c: 54:     PORTDbits.RD4 = set_bit(cmd, 0b00000001);
  3558  001110  0E01               	movlw	1
  3559  001112  6E03               	movwf	set_bit@comp^0,c
  3560  001114  5006               	movf	lcd_cmd@cmd^0,w,c
  3561  001116  ECDA  F00B         	call	_set_bit
  3562  00111A  6E05               	movwf	??_lcd_cmd^0,c
  3563  00111C  3A05               	swapf	??_lcd_cmd^0,f,c
  3564  00111E  5083               	movf	131,w,c	;volatile
  3565  001120  1805               	xorwf	??_lcd_cmd^0,w,c
  3566  001122  0BEF               	andlw	-17
  3567  001124  1805               	xorwf	??_lcd_cmd^0,w,c
  3568  001126  6E83               	movwf	131,c	;volatile
  3569  001128                     
  3570                           ;LCD4b_EXSTO.c: 55:     PORTDbits.RD5 = set_bit(cmd, 0b00000010);
  3571  001128  0E02               	movlw	2
  3572  00112A  6E03               	movwf	set_bit@comp^0,c
  3573  00112C  5006               	movf	lcd_cmd@cmd^0,w,c
  3574  00112E  ECDA  F00B         	call	_set_bit
  3575  001132  6E05               	movwf	??_lcd_cmd^0,c
  3576  001134  3A05               	swapf	??_lcd_cmd^0,f,c
  3577  001136  4605               	rlncf	??_lcd_cmd^0,f,c
  3578  001138  5083               	movf	131,w,c	;volatile
  3579  00113A  1805               	xorwf	??_lcd_cmd^0,w,c
  3580  00113C  0BDF               	andlw	-33
  3581  00113E  1805               	xorwf	??_lcd_cmd^0,w,c
  3582  001140  6E83               	movwf	131,c	;volatile
  3583  001142                     
  3584                           ;LCD4b_EXSTO.c: 56:     PORTDbits.RD6 = set_bit(cmd, 0b00000100);
  3585  001142  0E04               	movlw	4
  3586  001144  6E03               	movwf	set_bit@comp^0,c
  3587  001146  5006               	movf	lcd_cmd@cmd^0,w,c
  3588  001148  ECDA  F00B         	call	_set_bit
  3589  00114C  6E05               	movwf	??_lcd_cmd^0,c
  3590  00114E  3A05               	swapf	??_lcd_cmd^0,f,c
  3591  001150  4605               	rlncf	??_lcd_cmd^0,f,c
  3592  001152  4605               	rlncf	??_lcd_cmd^0,f,c
  3593  001154  5083               	movf	131,w,c	;volatile
  3594  001156  1805               	xorwf	??_lcd_cmd^0,w,c
  3595  001158  0BBF               	andlw	-65
  3596  00115A  1805               	xorwf	??_lcd_cmd^0,w,c
  3597  00115C  6E83               	movwf	131,c	;volatile
  3598  00115E                     
  3599                           ;LCD4b_EXSTO.c: 57:     PORTDbits.RD7 = set_bit(cmd, 0b00001000);
  3600  00115E  0E08               	movlw	8
  3601  001160  6E03               	movwf	set_bit@comp^0,c
  3602  001162  5006               	movf	lcd_cmd@cmd^0,w,c
  3603  001164  ECDA  F00B         	call	_set_bit
  3604  001168  6E05               	movwf	??_lcd_cmd^0,c
  3605  00116A  3205               	rrcf	??_lcd_cmd^0,f,c
  3606  00116C  3205               	rrcf	??_lcd_cmd^0,f,c
  3607  00116E  5083               	movf	131,w,c	;volatile
  3608  001170  1805               	xorwf	??_lcd_cmd^0,w,c
  3609  001172  0B7F               	andlw	-129
  3610  001174  1805               	xorwf	??_lcd_cmd^0,w,c
  3611  001176  6E83               	movwf	131,c	;volatile
  3612  001178                     
  3613                           ;LCD4b_EXSTO.c: 59:     PORTEbits.RE2 = 1;
  3614  001178  8484               	bsf	132,2,c	;volatile
  3615  00117A                     
  3616                           ;LCD4b_EXSTO.c: 60:     PORTEbits.RE2 = 0;
  3617  00117A  9484               	bcf	132,2,c	;volatile
  3618  00117C  0012               	return		;funcret
  3619  00117E                     __end_of_lcd_cmd:
  3620                           	callstack 0
  3621                           
  3622 ;; *************** function _set_bit *****************
  3623 ;; Defined at:
  3624 ;;		line 36 in file "LCD4b_EXSTO.c"
  3625 ;; Parameters:    Size  Location     Type
  3626 ;;  cmd             1    wreg     unsigned char 
  3627 ;;  comp            1    2[COMRAM] unsigned char 
  3628 ;; Auto vars:     Size  Location     Type
  3629 ;;  cmd             1    3[COMRAM] unsigned char 
  3630 ;; Return value:  Size  Location     Type
  3631 ;;                  1    wreg      unsigned char 
  3632 ;; Registers used:
  3633 ;;		wreg, status,2, status,0
  3634 ;; Tracked objects:
  3635 ;;		On entry : 0/0
  3636 ;;		On exit  : 0/0
  3637 ;;		Unchanged: 0/0
  3638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3639 ;;      Params:         1       0       0       0       0       0       0
  3640 ;;      Locals:         1       0       0       0       0       0       0
  3641 ;;      Temps:          0       0       0       0       0       0       0
  3642 ;;      Totals:         2       0       0       0       0       0       0
  3643 ;;Total ram usage:        2 bytes
  3644 ;; Hardware stack levels used: 1
  3645 ;; Hardware stack levels required when called: 1
  3646 ;; This function calls:
  3647 ;;		Nothing
  3648 ;; This function is called by:
  3649 ;;		_lcd_cmd
  3650 ;; This function uses a non-reentrant model
  3651 ;;
  3652                           
  3653                           	psect	text21
  3654  0017B4                     __ptext21:
  3655                           	callstack 0
  3656  0017B4                     _set_bit:
  3657                           	callstack 26
  3658                           
  3659                           ;incstack = 0
  3660                           ;set_bit@cmd stored from wreg
  3661  0017B4  6E04               	movwf	set_bit@cmd^0,c
  3662  0017B6                     
  3663                           ;LCD4b_EXSTO.c: 36: char set_bit(char cmd, char comp);LCD4b_EXSTO.c: 37: {;LCD4b_EXSTO.c
      +                          : 38:     if((cmd & comp) >= 1) return 1;
  3664  0017B6  5004               	movf	set_bit@cmd^0,w,c
  3665  0017B8  1403               	andwf	set_bit@comp^0,w,c
  3666  0017BA  0900               	iorlw	0
  3667  0017BC  B4D8               	btfsc	status,2,c
  3668  0017BE  EFE3  F00B         	goto	u961
  3669  0017C2  EFE5  F00B         	goto	u960
  3670  0017C6                     u961:
  3671  0017C6  EFE8  F00B         	goto	l1659
  3672  0017CA                     u960:
  3673  0017CA  0E01               	movlw	1
  3674  0017CC  EFE9  F00B         	goto	l88
  3675  0017D0                     l1659:
  3676  0017D0  0E00               	movlw	0
  3677  0017D2                     l88:
  3678  0017D2  0012               	return		;funcret
  3679  0017D4                     __end_of_set_bit:
  3680                           	callstack 0
  3681                           
  3682 ;; *************** function _config_IO *****************
  3683 ;; Defined at:
  3684 ;;		line 80 in file "Program_Interrupt_LEDs.c"
  3685 ;; Parameters:    Size  Location     Type
  3686 ;;		None
  3687 ;; Auto vars:     Size  Location     Type
  3688 ;;		None
  3689 ;; Return value:  Size  Location     Type
  3690 ;;                  1    wreg      void 
  3691 ;; Registers used:
  3692 ;;		wreg, status,2
  3693 ;; Tracked objects:
  3694 ;;		On entry : 0/0
  3695 ;;		On exit  : 0/0
  3696 ;;		Unchanged: 0/0
  3697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3698 ;;      Params:         0       0       0       0       0       0       0
  3699 ;;      Locals:         0       0       0       0       0       0       0
  3700 ;;      Temps:          0       0       0       0       0       0       0
  3701 ;;      Totals:         0       0       0       0       0       0       0
  3702 ;;Total ram usage:        0 bytes
  3703 ;; Hardware stack levels used: 1
  3704 ;; Hardware stack levels required when called: 1
  3705 ;; This function calls:
  3706 ;;		Nothing
  3707 ;; This function is called by:
  3708 ;;		_main
  3709 ;; This function uses a non-reentrant model
  3710 ;;
  3711                           
  3712                           	psect	text22
  3713  0017F2                     __ptext22:
  3714                           	callstack 0
  3715  0017F2                     _config_IO:
  3716                           	callstack 29
  3717  0017F2                     
  3718                           ;Program_Interrupt_LEDs.c: 82:     TRISB = 0X01;
  3719  0017F2  0E01               	movlw	1
  3720  0017F4  6E93               	movwf	147,c	;volatile
  3721                           
  3722                           ;Program_Interrupt_LEDs.c: 83:     TRISC = 0X00;
  3723  0017F6  0E00               	movlw	0
  3724  0017F8  6E94               	movwf	148,c	;volatile
  3725                           
  3726                           ;Program_Interrupt_LEDs.c: 84:     PORTB = 0X00;
  3727  0017FA  0E00               	movlw	0
  3728  0017FC  6E81               	movwf	129,c	;volatile
  3729  0017FE                     
  3730                           ;Program_Interrupt_LEDs.c: 85:     PORTC = 0XFF;
  3731  0017FE  6882               	setf	130,c	;volatile
  3732                           
  3733                           ;Program_Interrupt_LEDs.c: 86:     ADCON1 = 0X0F;
  3734  001800  0E0F               	movlw	15
  3735  001802  6EC1               	movwf	193,c	;volatile
  3736  001804  0012               	return		;funcret
  3737  001806                     __end_of_config_IO:
  3738                           	callstack 0
  3739                           
  3740 ;; *************** function _config_FOSC *****************
  3741 ;; Defined at:
  3742 ;;		line 74 in file "Program_Interrupt_LEDs.c"
  3743 ;; Parameters:    Size  Location     Type
  3744 ;;		None
  3745 ;; Auto vars:     Size  Location     Type
  3746 ;;		None
  3747 ;; Return value:  Size  Location     Type
  3748 ;;                  1    wreg      void 
  3749 ;; Registers used:
  3750 ;;		wreg, status,2
  3751 ;; Tracked objects:
  3752 ;;		On entry : 0/0
  3753 ;;		On exit  : 0/0
  3754 ;;		Unchanged: 0/0
  3755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3756 ;;      Params:         0       0       0       0       0       0       0
  3757 ;;      Locals:         0       0       0       0       0       0       0
  3758 ;;      Temps:          0       0       0       0       0       0       0
  3759 ;;      Totals:         0       0       0       0       0       0       0
  3760 ;;Total ram usage:        0 bytes
  3761 ;; Hardware stack levels used: 1
  3762 ;; Hardware stack levels required when called: 1
  3763 ;; This function calls:
  3764 ;;		Nothing
  3765 ;; This function is called by:
  3766 ;;		_main
  3767 ;; This function uses a non-reentrant model
  3768 ;;
  3769                           
  3770                           	psect	text23
  3771  001806                     __ptext23:
  3772                           	callstack 0
  3773  001806                     _config_FOSC:
  3774                           	callstack 29
  3775  001806                     
  3776                           ;Program_Interrupt_LEDs.c: 76:     OSCCON = 0X00;
  3777  001806  0E00               	movlw	0
  3778  001808  6ED3               	movwf	211,c	;volatile
  3779                           
  3780                           ;Program_Interrupt_LEDs.c: 77:     OSCTUNE = 0X00;
  3781  00180A  0E00               	movlw	0
  3782  00180C  6E9B               	movwf	155,c	;volatile
  3783  00180E  0012               	return		;funcret
  3784  001810                     __end_of_config_FOSC:
  3785                           	callstack 0
  3786                           
  3787 ;; *************** function _config_EXT_INT *****************
  3788 ;; Defined at:
  3789 ;;		line 89 in file "Program_Interrupt_LEDs.c"
  3790 ;; Parameters:    Size  Location     Type
  3791 ;;		None
  3792 ;; Auto vars:     Size  Location     Type
  3793 ;;		None
  3794 ;; Return value:  Size  Location     Type
  3795 ;;                  1    wreg      void 
  3796 ;; Registers used:
  3797 ;;		wreg, status,2
  3798 ;; Tracked objects:
  3799 ;;		On entry : 0/0
  3800 ;;		On exit  : 0/0
  3801 ;;		Unchanged: 0/0
  3802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3803 ;;      Params:         0       0       0       0       0       0       0
  3804 ;;      Locals:         0       0       0       0       0       0       0
  3805 ;;      Temps:          0       0       0       0       0       0       0
  3806 ;;      Totals:         0       0       0       0       0       0       0
  3807 ;;Total ram usage:        0 bytes
  3808 ;; Hardware stack levels used: 1
  3809 ;; Hardware stack levels required when called: 1
  3810 ;; This function calls:
  3811 ;;		Nothing
  3812 ;; This function is called by:
  3813 ;;		_main
  3814 ;; This function uses a non-reentrant model
  3815 ;;
  3816                           
  3817                           	psect	text24
  3818  001810                     __ptext24:
  3819                           	callstack 0
  3820  001810                     _config_EXT_INT:
  3821                           	callstack 29
  3822  001810                     
  3823                           ;Program_Interrupt_LEDs.c: 91:     INTCON = 0X90;
  3824  001810  0E90               	movlw	144
  3825  001812  6EF2               	movwf	242,c	;volatile
  3826                           
  3827                           ;Program_Interrupt_LEDs.c: 92:     INTCON2 = 0XC0;
  3828  001814  0EC0               	movlw	192
  3829  001816  6EF1               	movwf	241,c	;volatile
  3830  001818  0012               	return		;funcret
  3831  00181A                     __end_of_config_EXT_INT:
  3832                           	callstack 0
  3833                           
  3834 ;; *************** function _int_EXT *****************
  3835 ;; Defined at:
  3836 ;;		line 95 in file "Program_Interrupt_LEDs.c"
  3837 ;; Parameters:    Size  Location     Type
  3838 ;;		None
  3839 ;; Auto vars:     Size  Location     Type
  3840 ;;		None
  3841 ;; Return value:  Size  Location     Type
  3842 ;;                  1    wreg      void 
  3843 ;; Registers used:
  3844 ;;		wreg, status,2, status,0
  3845 ;; Tracked objects:
  3846 ;;		On entry : 0/0
  3847 ;;		On exit  : 0/0
  3848 ;;		Unchanged: 0/0
  3849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3850 ;;      Params:         0       0       0       0       0       0       0
  3851 ;;      Locals:         0       0       0       0       0       0       0
  3852 ;;      Temps:          2       0       0       0       0       0       0
  3853 ;;      Totals:         2       0       0       0       0       0       0
  3854 ;;Total ram usage:        2 bytes
  3855 ;; Hardware stack levels used: 1
  3856 ;; This function calls:
  3857 ;;		Nothing
  3858 ;; This function is called by:
  3859 ;;		Interrupt level 2
  3860 ;; This function uses a non-reentrant model
  3861 ;;
  3862                           
  3863                           	psect	intcode
  3864  000008                     __pintcode:
  3865                           	callstack 0
  3866  000008                     _int_EXT:
  3867                           	callstack 22
  3868                           
  3869                           ;incstack = 0
  3870  000008  827D               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3871  00000A  ED85  F009         	call	int_func,f	;refresh shadow registers
  3872                           
  3873                           	psect	intcode_body
  3874  00130A                     __pintcode_body:
  3875                           	callstack 22
  3876  00130A                     int_func:
  3877                           	callstack 22
  3878  00130A  0006               	pop		; remove dummy address from shadow register refresh
  3879  00130C                     
  3880                           ;Program_Interrupt_LEDs.c: 97:     if(INTCONbits.INT0IF == 1)
  3881  00130C  A2F2               	btfss	242,1,c	;volatile
  3882  00130E  EF8B  F009         	goto	i2u66_41
  3883  001312  EF8D  F009         	goto	i2u66_40
  3884  001316                     i2u66_41:
  3885  001316  EFDA  F009         	goto	i2l55
  3886  00131A                     i2u66_40:
  3887  00131A                     
  3888                           ;Program_Interrupt_LEDs.c: 98:     {;Program_Interrupt_LEDs.c: 99:         counter++;
  3889  00131A  4A7B               	infsnz	_counter^0,f,c
  3890  00131C  2A7C               	incf	(_counter+1)^0,f,c
  3891  00131E                     
  3892                           ;Program_Interrupt_LEDs.c: 100:         if(counter <= 5)
  3893  00131E  BE7C               	btfsc	(_counter+1)^0,7,c
  3894  001320  EF9D  F009         	goto	i2u67_40
  3895  001324  507C               	movf	(_counter+1)^0,w,c
  3896  001326  E107               	bnz	i2u67_41
  3897  001328  0E06               	movlw	6
  3898  00132A  5C7B               	subwf	_counter^0,w,c
  3899  00132C  B0D8               	btfsc	status,0,c
  3900  00132E  EF9B  F009         	goto	i2u67_41
  3901  001332  EF9D  F009         	goto	i2u67_40
  3902  001336                     i2u67_41:
  3903  001336  EFD9  F009         	goto	i2l47
  3904  00133A                     i2u67_40:
  3905  00133A  EFB7  F009         	goto	i2l1457
  3906  00133E                     i2l1445:
  3907  00133E  0E0E               	movlw	14
  3908  001340  6E82               	movwf	130,c	;volatile
  3909                           
  3910                           ;Program_Interrupt_LEDs.c: 105:                 break;
  3911  001342  EFD9  F009         	goto	i2l47
  3912  001346                     i2l1447:
  3913  001346  0E0C               	movlw	12
  3914  001348  6E82               	movwf	130,c	;volatile
  3915                           
  3916                           ;Program_Interrupt_LEDs.c: 107:                 break;
  3917  00134A  EFD9  F009         	goto	i2l47
  3918  00134E                     i2l1449:
  3919  00134E  0E08               	movlw	8
  3920  001350  6E82               	movwf	130,c	;volatile
  3921                           
  3922                           ;Program_Interrupt_LEDs.c: 109:                 break;
  3923  001352  EFD9  F009         	goto	i2l47
  3924  001356                     i2l1451:
  3925  001356  0E00               	movlw	0
  3926  001358  6E82               	movwf	130,c	;volatile
  3927                           
  3928                           ;Program_Interrupt_LEDs.c: 111:                 break;
  3929  00135A  EFD9  F009         	goto	i2l47
  3930  00135E                     i2l1453:
  3931  00135E  0E0F               	movlw	15
  3932  001360  6E82               	movwf	130,c	;volatile
  3933                           
  3934                           ;Program_Interrupt_LEDs.c: 113:                         counter = 0;
  3935  001362  0E00               	movlw	0
  3936  001364  6E7C               	movwf	(_counter+1)^0,c
  3937  001366  0E00               	movlw	0
  3938  001368  6E7B               	movwf	_counter^0,c
  3939                           
  3940                           ;Program_Interrupt_LEDs.c: 114:                 break;
  3941  00136A  EFD9  F009         	goto	i2l47
  3942  00136E                     i2l1457:
  3943  00136E  C07B  F001         	movff	_counter,??_int_EXT
  3944  001372  C07C  F002         	movff	_counter+1,??_int_EXT+1
  3945                           
  3946                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3947                           ; Switch size 1, requested type "simple"
  3948                           ; Number of cases is 1, Range of values is 0 to 0
  3949                           ; switch strategies available:
  3950                           ; Name         Instructions Cycles
  3951                           ; simple_byte            4     3 (average)
  3952                           ;	Chosen strategy is simple_byte
  3953  001376  5002               	movf	(??_int_EXT+1)^0,w,c
  3954  001378  0A00               	xorlw	0	; case 0
  3955  00137A  B4D8               	btfsc	status,2,c
  3956  00137C  EFC2  F009         	goto	i2l2047
  3957  001380  EFD9  F009         	goto	i2l47
  3958  001384                     i2l2047:
  3959                           
  3960                           ; Switch size 1, requested type "simple"
  3961                           ; Number of cases is 5, Range of values is 1 to 5
  3962                           ; switch strategies available:
  3963                           ; Name         Instructions Cycles
  3964                           ; simple_byte           16     9 (average)
  3965                           ;	Chosen strategy is simple_byte
  3966  001384  5001               	movf	??_int_EXT^0,w,c
  3967  001386  0A01               	xorlw	1	; case 1
  3968  001388  B4D8               	btfsc	status,2,c
  3969  00138A  EF9F  F009         	goto	i2l1445
  3970  00138E  0A03               	xorlw	3	; case 2
  3971  001390  B4D8               	btfsc	status,2,c
  3972  001392  EFA3  F009         	goto	i2l1447
  3973  001396  0A01               	xorlw	1	; case 3
  3974  001398  B4D8               	btfsc	status,2,c
  3975  00139A  EFA7  F009         	goto	i2l1449
  3976  00139E  0A07               	xorlw	7	; case 4
  3977  0013A0  B4D8               	btfsc	status,2,c
  3978  0013A2  EFAB  F009         	goto	i2l1451
  3979  0013A6  0A01               	xorlw	1	; case 5
  3980  0013A8  B4D8               	btfsc	status,2,c
  3981  0013AA  EFAF  F009         	goto	i2l1453
  3982  0013AE  EFD9  F009         	goto	i2l47
  3983  0013B2                     i2l47:
  3984                           
  3985                           ;Program_Interrupt_LEDs.c: 117:         INTCONbits.INT0IF = 0;
  3986  0013B2  92F2               	bcf	242,1,c	;volatile
  3987  0013B4                     i2l55:
  3988  0013B4  927D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3989  0013B6  0011               	retfie		f
  3990  0013B8                     __end_of_int_EXT:
  3991                           	callstack 0
  3992                           
  3993                           	psect	rparam
  3994  0000                     
  3995                           	psect	temp
  3996  00007D                     btemp:
  3997                           	callstack 0
  3998  00007D                     	ds	1
  3999  0000                     int$flags	set	btemp
  4000  0000                     wtemp8	set	btemp+1
  4001  0000                     ttemp5	set	btemp+1
  4002  0000                     ttemp6	set	btemp+4
  4003  0000                     ttemp7	set	btemp+8
  4004                           
  4005                           	psect	idloc
  4006                           
  4007                           ;Config register IDLOC0 @ 0x200000
  4008                           ;	unspecified, using default values
  4009  200000                     	org	2097152
  4010  200000  FF                 	db	255
  4011                           
  4012                           ;Config register IDLOC1 @ 0x200001
  4013                           ;	unspecified, using default values
  4014  200001                     	org	2097153
  4015  200001  FF                 	db	255
  4016                           
  4017                           ;Config register IDLOC2 @ 0x200002
  4018                           ;	unspecified, using default values
  4019  200002                     	org	2097154
  4020  200002  FF                 	db	255
  4021                           
  4022                           ;Config register IDLOC3 @ 0x200003
  4023                           ;	unspecified, using default values
  4024  200003                     	org	2097155
  4025  200003  FF                 	db	255
  4026                           
  4027                           ;Config register IDLOC4 @ 0x200004
  4028                           ;	unspecified, using default values
  4029  200004                     	org	2097156
  4030  200004  FF                 	db	255
  4031                           
  4032                           ;Config register IDLOC5 @ 0x200005
  4033                           ;	unspecified, using default values
  4034  200005                     	org	2097157
  4035  200005  FF                 	db	255
  4036                           
  4037                           ;Config register IDLOC6 @ 0x200006
  4038                           ;	unspecified, using default values
  4039  200006                     	org	2097158
  4040  200006  FF                 	db	255
  4041                           
  4042                           ;Config register IDLOC7 @ 0x200007
  4043                           ;	unspecified, using default values
  4044  200007                     	org	2097159
  4045  200007  FF                 	db	255
  4046                           
  4047                           	psect	config
  4048                           
  4049                           ; Padding undefined space
  4050  300000                     	org	3145728
  4051  300000  FF                 	db	255
  4052                           
  4053                           ;Config register CONFIG1H @ 0x300001
  4054                           ;	Oscillator Selection bits
  4055                           ;	OSC = HS, HS oscillator
  4056                           ;	Fail-Safe Clock Monitor Enable bit
  4057                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  4058                           ;	Internal/External Oscillator Switchover bit
  4059                           ;	IESO = OFF, Oscillator Switchover mode disabled
  4060  300001                     	org	3145729
  4061  300001  02                 	db	2
  4062                           
  4063                           ;Config register CONFIG2L @ 0x300002
  4064                           ;	Power-up Timer Enable bit
  4065                           ;	PWRT = OFF, PWRT disabled
  4066                           ;	Brown-out Reset Enable bits
  4067                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  4068                           ;	Brown Out Reset Voltage bits
  4069                           ;	BORV = 3, Minimum setting
  4070  300002                     	org	3145730
  4071  300002  1F                 	db	31
  4072                           
  4073                           ;Config register CONFIG2H @ 0x300003
  4074                           ;	Watchdog Timer Enable bit
  4075                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  4076                           ;	Watchdog Timer Postscale Select bits
  4077                           ;	WDTPS = 32768, 1:32768
  4078  300003                     	org	3145731
  4079  300003  1E                 	db	30
  4080                           
  4081                           ; Padding undefined space
  4082  300004                     	org	3145732
  4083  300004  FF                 	db	255
  4084                           
  4085                           ;Config register CONFIG3H @ 0x300005
  4086                           ;	CCP2 MUX bit
  4087                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  4088                           ;	PORTB A/D Enable bit
  4089                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  4090                           ;	Low-Power Timer1 Oscillator Enable bit
  4091                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  4092                           ;	MCLR Pin Enable bit
  4093                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  4094  300005                     	org	3145733
  4095  300005  81                 	db	129
  4096                           
  4097                           ;Config register CONFIG4L @ 0x300006
  4098                           ;	Stack Full/Underflow Reset Enable bit
  4099                           ;	STVREN = ON, Stack full/underflow will cause Reset
  4100                           ;	Single-Supply ICSP Enable bit
  4101                           ;	LVP = OFF, Single-Supply ICSP disabled
  4102                           ;	Extended Instruction Set Enable bit
  4103                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  4104                           ;	Background Debugger Enable bit
  4105                           ;	DEBUG = 0x1, unprogrammed default
  4106  300006                     	org	3145734
  4107  300006  81                 	db	129
  4108                           
  4109                           ; Padding undefined space
  4110  300007                     	org	3145735
  4111  300007  FF                 	db	255
  4112                           
  4113                           ;Config register CONFIG5L @ 0x300008
  4114                           ;	Code Protection bit
  4115                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  4116                           ;	Code Protection bit
  4117                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  4118                           ;	Code Protection bit
  4119                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  4120                           ;	Code Protection bit
  4121                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  4122  300008                     	org	3145736
  4123  300008  0F                 	db	15
  4124                           
  4125                           ;Config register CONFIG5H @ 0x300009
  4126                           ;	Boot Block Code Protection bit
  4127                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  4128                           ;	Data EEPROM Code Protection bit
  4129                           ;	CPD = OFF, Data EEPROM not code-protected
  4130  300009                     	org	3145737
  4131  300009  C0                 	db	192
  4132                           
  4133                           ;Config register CONFIG6L @ 0x30000A
  4134                           ;	Write Protection bit
  4135                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  4136                           ;	Write Protection bit
  4137                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  4138                           ;	Write Protection bit
  4139                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  4140                           ;	Write Protection bit
  4141                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  4142  30000A                     	org	3145738
  4143  30000A  0F                 	db	15
  4144                           
  4145                           ;Config register CONFIG6H @ 0x30000B
  4146                           ;	Configuration Register Write Protection bit
  4147                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  4148                           ;	Boot Block Write Protection bit
  4149                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  4150                           ;	Data EEPROM Write Protection bit
  4151                           ;	WRTD = OFF, Data EEPROM not write-protected
  4152  30000B                     	org	3145739
  4153  30000B  E0                 	db	224
  4154                           
  4155                           ;Config register CONFIG7L @ 0x30000C
  4156                           ;	Table Read Protection bit
  4157                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  4158                           ;	Table Read Protection bit
  4159                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  4160                           ;	Table Read Protection bit
  4161                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  4162                           ;	Table Read Protection bit
  4163                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  4164  30000C                     	org	3145740
  4165  30000C  0F                 	db	15
  4166                           
  4167                           ;Config register CONFIG7H @ 0x30000D
  4168                           ;	Boot Block Table Read Protection bit
  4169                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  4170  30000D                     	org	3145741
  4171  30000D  40                 	db	64
  4172                           tosu	equ	0xFFF
  4173                           tosh	equ	0xFFE
  4174                           tosl	equ	0xFFD
  4175                           stkptr	equ	0xFFC
  4176                           pclatu	equ	0xFFB
  4177                           pclath	equ	0xFFA
  4178                           pcl	equ	0xFF9
  4179                           tblptru	equ	0xFF8
  4180                           tblptrh	equ	0xFF7
  4181                           tblptrl	equ	0xFF6
  4182                           tablat	equ	0xFF5
  4183                           prodh	equ	0xFF4
  4184                           prodl	equ	0xFF3
  4185                           indf0	equ	0xFEF
  4186                           postinc0	equ	0xFEE
  4187                           postdec0	equ	0xFED
  4188                           preinc0	equ	0xFEC
  4189                           plusw0	equ	0xFEB
  4190                           fsr0h	equ	0xFEA
  4191                           fsr0l	equ	0xFE9
  4192                           wreg	equ	0xFE8
  4193                           indf1	equ	0xFE7
  4194                           postinc1	equ	0xFE6
  4195                           postdec1	equ	0xFE5
  4196                           preinc1	equ	0xFE4
  4197                           plusw1	equ	0xFE3
  4198                           fsr1h	equ	0xFE2
  4199                           fsr1l	equ	0xFE1
  4200                           bsr	equ	0xFE0
  4201                           indf2	equ	0xFDF
  4202                           postinc2	equ	0xFDE
  4203                           postdec2	equ	0xFDD
  4204                           preinc2	equ	0xFDC
  4205                           plusw2	equ	0xFDB
  4206                           fsr2h	equ	0xFDA
  4207                           fsr2l	equ	0xFD9
  4208                           status	equ	0xFD8

Data Sizes:
    Strings     42
    Constant    0
    Data        0
    BSS         58
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    114     124
    BANK0           128      0      48
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 16
		 -> BufferLCD(BANK0[16]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S805$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S805$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    lcd_write@str	PTR unsigned char  size(2) Largest target is 16
		 -> STR_5(CODE[16]), STR_4(CODE[16]), BufferLCD(BANK0[16]), STR_2(CODE[9]), 
		 -> STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _lcd_write->_lcd_send_byte
    _lcd_send_byte->_lcd_cmd
    _lcd_init->_lcd_cmd
    _lcd_cmd->_set_bit

Critical Paths under _int_EXT in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _int_EXT in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _int_EXT in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _int_EXT in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _int_EXT in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _int_EXT in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _int_EXT in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   11011
                                            112 COMRAM     2     2      0
                     _config_EXT_INT
                        _config_FOSC
                          _config_IO
                           _lcd_init
                          _lcd_write
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    15      6    8196
                                             93 COMRAM    19    13      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7843
                                             85 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           44    38      6    7470
                                             65 COMRAM    20    14      6
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    4358
                                             29 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    2709
                                             18 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              2 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1235
                                             11 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     834
                                              2 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             20 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              2 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              2 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _atoi                                                10     8      2    1172
                                              9 COMRAM    10     8      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (5) _isspace                                              7     5      2     207
                                              2 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              6     4      2     237
                                              2 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     403
                                              2 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _lcd_write                                            5     2      3    1941
                                              8 COMRAM     5     2      3
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_send_byte                                        2     1      1    1024
                                              6 COMRAM     2     1      1
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     874
                                              6 COMRAM     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              2     2      0     828
                                              4 COMRAM     2     2      0
                            _set_bit
 ---------------------------------------------------------------------------------
 (4) _set_bit                                              2     1      1     652
                                              2 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _config_IO                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_FOSC                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_EXT_INT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _int_EXT                                              2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _config_EXT_INT
   _config_FOSC
   _config_IO
   _lcd_init
     _lcd_cmd
       _set_bit
   _lcd_write
     _lcd_send_byte
       _lcd_cmd
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
             _strlen
         _fputc
         _isdigit

 _int_EXT (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      24        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      30       5       37.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     72      7C       1       98.4%
BITBIGSFRlhl        25      0       0      19        0.0%
BITBIGSFRhl         1D      0       0      17        0.0%
BITBIGSFRlhh        11      0       0      18        0.0%
BITBIGSFRlllh        E      0       0      21        0.0%
BITBIGSFRhh          D      0       0      16        0.0%
BITBIGSFRllh         4      0       0      20        0.0%
BITBIGSFRllll        1      0       0      22        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      AC      23        0.0%
DATA                 0      0      AC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Wed Aug 10 14:36:09 2022

                     l41 1818                       l35 180E                       l38 1804  
                     l92 117C                       l84 14F4                       l95 17F0  
                     l88 17D2           ?_lcd_send_byte 0007      ___wmul@multiplicand 0005  
                    l110 17B2                      l107 1456                      l224 0DDE  
                    l237 0F42                      l822 12CE                      l830 0A18  
                    l824 1308                      l832 0A20                      l913 1090  
                    l850 0C56                      l819 128C                      l916 1098  
                    l942 1246                      l950 16B8                      l919 1730  
                    l927 1626                      l864 071C                      l953 181A  
                    l891 16F8                      l883 15CC                      l884 15D4  
                    l788 1674                      l877 0978                      l959 1766  
                    l888 16F0                      u700 11CA                      u701 11C6  
                    u710 1200                      u711 11FC                      u800 0D9E  
                    u720 16B8                      u801 0D9A                      u721 16B4  
                    u810 0DF2                      u730 175A                      u811 0DEE  
                    u731 1756                      u740 0C6A                      u820 0E24  
                    u900 12DC                      u741 0C66                      u821 0E20  
                    u901 12D8                      u750 0C9C                      u830 0E62  
                    u910 16D4                      u751 0C98                      u831 0E5E  
                    u911 16D0                      u920 172A                      u840 0E8C  
                    u680 1190                      u921 1724                      u761 0CC6  
                    u841 0E88                      u681 118C                      u930 172C  
                    u770 0CEA                      u850 0EBA                      u690 11A2  
                    u771 0CE6                      u851 0EB6                      u691 119E  
                    u940 15EE                      u780 0D14                      u860 0F02  
                    u941 15EA                      u781 0D10                      u861 0EFE  
                    u950 161C                      u790 0D54                      u870 1256  
                    u951 1618                      u791 0D50                      u871 1252  
                    u960 17CA                      u880 1278                      u961 17C6  
                    u881 1274                      u890 12CE                      u970 09AA  
                    u891 12CA                      u971 09A4                      u980 09AC  
                    u990 09C2                      u991 09BE                      _abs 16BA  
                    _pad 1248                      wreg 000FE8                     ?_abs 0015  
                   l2043 06DC                     l2045 0FE0                     l1501 1200  
                   l1511 1698                     l1601 0EF2                     l1505 1676  
                   l1513 1732                     l1523 178E                     l1531 0C5C  
                   l1603 0F02                     l1507 1682                     l1515 173E  
                   l1611 1256                     l1525 17AA                     l1541 0CBC  
                   l1533 0C6A                     l1605 0F22                     l1509 1694  
                   l1517 1742                     l1621 12AC                     l1613 126A  
                   l1701 0B90                     l1551 0D06                     l1543 0CC0  
                   l1535 0C8A                     l1631 16BA                     l1519 175A  
                   l1623 12B0                     l1615 1278                     l1711 0BF2  
                   l1703 0BAA                     l1641 15DA                     l1561 0D76  
                   l1553 0D14                     l1545 0CCC                     l1537 0C8E  
                   l1529 0C58                     l1633 16D4                     l1625 12DC  
                   l1617 1284                     l1609 1248                     l1713 0BF8  
                   l1721 0C2E                     l1705 0BC4                     l1651 17B6  
                   l1635 16FA                     l1643 15EE                     l1731 0F5C  
                   l1563 0D88                     l1555 0D26                     l1547 0CEA  
                   l1539 0C9C                     l1491 117E                     l1627 12F0  
                   l1619 1298                     l1715 0C0A                     l1707 0BD2  
                   l1811 06B6                     l1803 06A4                     l1653 17CA  
                   l1901 1460                     l1645 161C                     l1741 0FF6  
                   l1733 0F78                     l1725 0F44                     l1557 0D54  
                   l1549 0CF2                     l1565 0D8E                     l1581 0E16  
                   l1573 0DE0                     l1493 1190                     l1717 0C16  
                   l1709 0BE4                     l1821 0786                     l1813 070A  
                   l1911 147C                     l1903 1466                     l1647 1620  
                   l1639 15D6                     l1751 1074                     l1735 0FB2  
                   l1727 0F58                     l1567 0D9E                     l1559 0D74  
                   l1591 0E7E                     l1583 0E24                     l1575 0DE4  
                   l1495 11A2                     l1719 0C1E                     l1671 09F0  
                   l1663 097A                     l1831 07D0                     l1823 0794  
                   l1815 072A                     l1807 06AA                     l1761 1106  
                   l1921 1494                     l1905 1468                     l1737 0FBA  
                   l1569 0DBE                     l1593 0E8C                     l1585 0E44  
                   l1577 0DF2                     l1497 11AC                     l1681 0A48  
                   l1673 09F2                     l1665 099A                     l1833 080E  
                   l1825 07A2                     l1817 072C                     l1659 17D0  
                   l1771 115E                     l1763 1108                     l1931 14C2  
                   l1923 1496                     l1907 146A                     l1747 102C  
                   l1739 0FC2                     l1595 0EBA                     l1587 0E62  
                   l1579 0E12                     l1499 11CA                     l1691 0AE8  
                   l1683 0A4E                     l1675 0A0C                     l1667 09C2  
                   l1843 08D6                     l1835 0832                     l1827 07C2  
                   l1819 0750                     l1773 1178                     l1765 1110  
                   l1757 109C                     l1933 14C8                     l1925 14A6  
                   l1917 1480                     l1909 146C                     l1941 13CA  
                   l1749 1062                     l1597 0EDA                     l1589 0E6A  
                   l1693 0AEE                     l1685 0A56                     l1677 0A28  
                   l1669 09E2                     l1861 0966                     l1845 08FA  
                   l1853 0928                     l1837 0856                     l1781 065E  
                   l1775 117A                     l1767 1128                     l1759 1104  
                   l1935 14DE                     l1927 14AC                     l1919 1486  
                   l1871 17D6                     l1951 1422                     l1943 13D4  
                   l1599 0EEC                     l1695 0AF4                     l1687 0A60  
                   l1679 0A3A                     l1855 0936                     l1847 0908  
                   l1839 089E                     l1791 0692                     l1783 066E  
                   l1769 1142                     l1937 14E6                     l1929 14B4  
                   l1873 17E0                     l1953 1426                     l1945 13E6  
                   l1689 0A66                     l1697 0B58                     l1849 091C  
                   l1785 0672                     l1777 062C                     l1881 1580  
                   l1961 1648                     l1891 17FE                     l1875 17E8  
                   l1947 13EC                     l1939 13BA                     l1699 0B72  
                   l1795 0698                     l1787 067E                     l1779 0650  
                   l1859 0942                     l1883 158C                     l1963 1664  
                   l1955 1628                     l1971 1506                     l1893 1810  
                   l1877 17EA                     l1949 13FA                     l1789 0680  
                   l1885 15B0                     l1957 1638                     l1973 1518  
                   ?_pad 0013                     l1887 1806                     l1895 1458  
                   l1799 069E                     l1879 1578                     l1959 1640  
                   l1975 152A                     l1967 14F6                     l1889 17F2  
                   l1897 145C                     l1977 1542                     l1969 1502  
                   l1899 145E                     l1979 155E                     STR_1 0611  
                   STR_2 061D                     STR_3 0626                     STR_4 0601  
                   u1000 09F0                     u1001 09EC                     u1010 0A0C  
                   u1011 0A08                     u1100 0BF2                     u1020 0A3A  
                   u1101 0BEE                     u1021 0A36                     u1110 0C0A  
                   u1030 0A48                     u1111 0C06                     u1031 0A44  
                   u1120 0F78                     u1040 0B72                     u1200 0794  
                   u1121 0F74                     u1041 0B6E                     u1201 0790  
                   u1130 0FAE                     u1050 0B90                     u1210 080E  
                   u1131 0FAA                     u1051 0B8C                     u1211 080A  
                   u1300 141A                     u1140 1062                     u1060 0BAA  
                   u1220 0832                     u1141 105E                     u1061 0BA6  
                   u1221 082E                     u1310 1446                     u1150 1074  
                   u1070 0BC4                     u1230 0856                     u1151 1070  
                   u1071 0BC0                     u1231 0852                     u1320 1456  
                   u1080 0BD2                     u1240 08FA                     u1160 0650  
                   u1321 1452                     u1081 0BCE                     u1241 08F6  
                   u1161 064C                     u1090 0BE4                     u1170 071C  
                   u1307 1410                     u1091 0BE0                     u1171 0718  
                   u1180 072A                     u1260 15CC                     u1317 143C  
                   u1181 0726                     u1261 15C8                     u1270 14A6  
                   u1190 0750                     u1407 14E0                     u1271 14A2  
                   u1255 17DE                     u1191 074C                     u1256 17E0  
                   u1280 13CA                     u1417 14EE                     u1281 13C6  
                   u1337 1534                     u1290 13E6                     u1427 110A  
                   u1347 17E2                     u1291 13E2                     u1357 1472  
                   u1367 148C                     u1377 14AE                     u1387 14BC  
                   u1397 14CE                     i2l47 13B2                     i2l55 13B4  
                   abs@a 0015                     _dbuf 0080                     _atoi 0F44  
                   _main 14F6                     _dtoa 097A                     _prec 0077  
                   _nout 0073                     pad@i 001A                     pad@p 0017  
                   fsr1h 000FE2                     fsr2h 000FDA                     indf1 000FE7  
                   indf2 000FDF                     fsr1l 000FE1                     pad@w 001C  
                   fsr2l 000FD9                     btemp 007D                     prodh 000FF4  
                   prodl 000FF3                     start 000E             ___param_bank 000000  
                  ??_abs 0017                    ??_pad 0019          __end_of___aodiv 0DE0  
                  ?_atoi 000A                    ?_main 0001                    ?_dtoa 001E  
        __end_of___aomod 0F44             vfpfcnvrt@fmt 0044                    _PORTB 000F81  
                  _PORTC 000F82                    _PORTD 000F83                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95          __end_of_lcd_cmd 117E  
        __end_of_int_EXT 13B8                    _flags 0079                    _fputc 117E  
                  _fputs 1676          __end_of_isdigit 1732                    atoi@n 0012  
                  pad@fp 0013                    atoi@s 000A                    _width 0075  
                  _putch 181A                    dtoa@d 0020                    dtoa@i 0040  
                  dtoa@n 0038                    dtoa@p 0032                    dtoa@s 0036  
                  dtoa@w 0034          __end_of_isspace 1628          __end_of_set_bit 17D4  
                  tablat 000FF5                    ttemp5 007E                    ttemp6 0081  
                  ttemp7 0085                    status 000FD8                    wtemp8 007E  
        __end_of_sprintf 1676             lcd_write@end 000C             lcd_write@col 0009  
           lcd_write@lin 000D             lcd_write@str 000A          __initialization 1768  
           __end_of_atoi 109A             __end_of_main 1578             __end_of_dtoa 0C58  
        ??_lcd_send_byte 0008                   ??_atoi 000C                   ??_main 0071  
                 ??_dtoa 0028            __activetblptr 000002         ??_config_EXT_INT 0003  
                 _ADCON1 000FC1                   ?_fputc 0003                   ?_fputs 000C  
                 ?_putch 0001                   i2l2047 1384                   i2l1441 131E  
                 i2l1451 1356                   i2l1453 135E                   i2l1445 133E  
                 i2l1437 130C                   i2l1447 1346                   i2l1439 131A  
                 i2l1449 134E                   i2l1457 136E                   _INTCON 000FF2  
                 _OSCCON 000FD3            vfpfcnvrt@done 0054             vfprintf@cfmt 005C  
       __end_of_lcd_init 14F6                ??___aodiv 0013                ??___aomod 0013  
                 ___wmul 178E                   clear_0 176E                   clear_1 177A  
                 isa$std 000001                   pad@buf 0015                ??_lcd_cmd 0005  
                 dtoa@fp 001E                   _strlen 1732                ??_int_EXT 0001  
                 fputc@c 0003                   fputs@c 0010                   fputs@i 0011  
                 fputs@s 000C                ??_isdigit 0005             __mediumconst 0000  
              ??_isspace 0005                ??_set_bit 0004                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                   putch@c 0001  
       __end_of_vfprintf 15D6                ??_sprintf 0064               __accesstop 0080  
__end_of__initialization 1780            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_fputc 1248            __end_of_fputs 16BA            __end_of_putch 181C  
                ??_fputc 0007                  ??_fputs 0010                  ??_putch 0003  
             __pbssBANK0 0080                  ?___wmul 0003                  ?_strlen 0003  
                _INTCON2 000FF1       lcd_send_byte@level 0008                  _OSCTUNE 000F9B  
                i2u66_40 131A                  i2u66_41 1316                  i2u67_40 133A  
                i2u67_41 1336                ?_lcd_init 0001                  __Hparam 0000  
                __Lparam 0000        __end_of_config_IO 1806                  ___aodiv 0C58  
                ___aomod 0DE0        __end_of_lcd_write 1458                ?_vfprintf 0056  
            set_bit@comp 0003             __psmallconst 0600                  __pcinit 1768  
                __ramtop 0600                  __ptext0 14F6                  __ptext1 1628  
                __ptext2 1578                  __ptext3 062C                  __ptext4 097A  
                __ptext5 1248                  __ptext6 1732                  __ptext7 1676  
                __ptext8 117E                  __ptext9 181A                  _lcd_cmd 109A  
                _int_EXT 0008                  _counter 007B                  _isdigit 16FA  
                _isspace 15D6                  _set_bit 17B4                  atoi@neg 0010  
                _sprintf 1628               ??_lcd_init 0007           __pintcode_body 130A  
   end_of_initialization 1780                  fputc@fp 0005            __Lmediumconst 0000  
                int_func 130A                  fputs@fp 000E        __end_of_vfpfcnvrt 097A  
                postdec2 000FDD                  postinc0 000FEE                  postinc1 000FE6  
                postinc2 000FDE               ??_vfprintf 005C    __end_of_lcd_send_byte 17F2  
                strlen@a 0005                  strlen@s 0003                _PORTDbits 000F83  
              _PORTEbits 000F84                _TRISEbits 000F96               lcd_cmd@cmd 0006  
          ??_config_FOSC 0003                _BufferLCD 00A0              vfpfcnvrt@ap 0046  
            vfpfcnvrt@fp 0042              vfpfcnvrt@ll 004C           __end_of___wmul 17B4  
         __end_of_strlen 1768      start_initialization 1768              __end_of_abs 16FA  
            __end_of_pad 130A              vfprintf@fmt 0058      __end_of_config_FOSC 1810  
               ??___wmul 0007                 ??_strlen 0005              __pbssCOMRAM 0073  
       ___aodiv@dividend 0003                __pintcode 0008                 ?___aodiv 0003  
               ?___aomod 0003         ___aodiv@quotient 0015                _config_IO 17F2  
      lcd_send_byte@data 0007                 ?_lcd_cmd 0001                _lcd_write 13B8  
               ?_int_EXT 0001              __smallconst 0600                 ?_isdigit 0003  
               ?_isspace 0003                 ?_set_bit 0003               set_bit@cmd 0004  
               ?_sprintf 005E           ___wmul@product 0007              _config_FOSC 1806  
              _vfpfcnvrt 062C               ?_config_IO 0001               ?_lcd_write 0009  
      ___wmul@multiplier 0003                lcd_init@i 0008           _config_EXT_INT 1810  
               __Hrparam 0000               vfprintf@ap 005A                 __Lrparam 0000  
             vfprintf@fp 0056               ?_vfpfcnvrt 0042          ___aodiv@divisor 000B  
        ___aodiv@counter 0013               sprintf@fmt 0060                 _dtoa$897 0030  
               __ptext10 16BA                 __ptext11 0DE0                 __ptext20 109A  
               __ptext12 0C58                 __ptext21 17B4                 __ptext13 0F44  
               __ptext22 17F2                 __ptext14 15D6                 __ptext23 1806  
               __ptext15 16FA                 __ptext24 1810                 __ptext16 178E  
               __ptext17 13B8                 __ptext18 17D4                 __ptext19 1458  
               _lcd_init 1458   __end_of_config_EXT_INT 181A                 isa$xinst 000000  
               int$flags 007D                 _vfprintf 1578              ??_config_IO 0003  
            _isspace$946 0009              ??_lcd_write 000C         ___aomod@dividend 0003  
             _INTCONbits 000FF2                 isdigit@c 0003                 intlevel2 0000  
              sprintf@ap 0064                 isspace@c 0003          ?_config_EXT_INT 0001  
        ___aomod@divisor 000B              ??_vfpfcnvrt 0048          ___aomod@counter 0013  
          _lcd_send_byte 17D4                 sprintf@f 0066                 sprintf@s 005E  
           ___aodiv@sign 0014             ?_config_FOSC 0001             ___aomod@sign 0014  
